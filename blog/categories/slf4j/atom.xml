<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: slf4j | yann's Blog]]></title>
  <link href="http://yanns.github.io/blog/categories/slf4j/atom.xml" rel="self"/>
  <link href="http://yanns.github.io/"/>
  <updated>2016-05-26T08:47:54+02:00</updated>
  <id>http://yanns.github.io/</id>
  <author>
    <name><![CDATA[Yann Simon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SLF4J Mapped Diagnostic Context (MDC) with play framework]]></title>
    <link href="http://yanns.github.io/blog/2014/05/04/slf4j-mapped-diagnostic-context-mdc-with-play-framework/"/>
    <updated>2014-05-04T11:45:52+02:00</updated>
    <id>http://yanns.github.io/blog/2014/05/04/slf4j-mapped-diagnostic-context-mdc-with-play-framework</id>
    <content type="html"><![CDATA[<p>I&rsquo;d like the share with this post one solution I found to use a Mapped Diagnostic Context (MDC) in an asynchronous environment like the play framework.</p>

<h2>Edit (September 2014)</h2>

<p>Based on <a href="https://github.com/jroper/thread-local-context-propagation/">one implementation from James Roper</a>, I added one solution based on <a href="http://doc.akka.io/docs/akka/current/scala/dispatchers.html">Akka Dispatcher</a>.</p>

<h2>tl;dr</h2>

<p>This post provides two solution to propagate the MDC context in an asynchronous Play application:</p>

<ul>
<li>using a custom Akka <code>Dispatcher</code>. This solution needs minimal change to a current application.</li>
<li>using a custom <code>ExecutionContext</code> that propagates the MDC from the caller&rsquo;s thread to the callee&rsquo;s one. A custom <code>ActionBuilder</code> is necessary as well to completely use this custom <code>ExectionContext</code>.</li>
</ul>


<h2>The Mapped Diagnostic Context (MDC)</h2>

<p>The play framework uses for logging <a href="http://logback.qos.ch/">Logback</a> behind <a href="http://www.slf4j.org/">SLF4J (&ldquo;Simple Logging Facade for Java&rdquo;)</a>.<br/>
This library provides a convenient feature: the <a href="http://logback.qos.ch/manual/mdc.html">Mapped Diagnostic Context (MDC)</a>.
This context can be used to store values that can be displayed in every Logging statement.<br/>
For example, if we want to display the current user ID:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.slf4j.MDC</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">currentUser</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="nc">MDC</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="s">&quot;X-UserId&quot;</span><span class="o">,</span> <span class="n">currentUser</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// the block of code that uses the Logger</span>
</span><span class='line'>  <span class="c1">// for example:</span>
</span><span class='line'>  <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// clean up the MDC</span>
</span><span class='line'>  <span class="nc">MDC</span><span class="o">.</span><span class="n">remove</span><span class="o">(</span><span class="s">&quot;X-UserId&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;(</span><span class="nc">This</span> <span class="n">code</span> <span class="n">could</span> <span class="n">be</span> <span class="n">in</span> <span class="n">a</span> <span class="o">[</span><span class="kt">filter</span><span class="o">](</span><span class="n">https</span><span class="o">://</span><span class="n">www</span><span class="o">.</span><span class="n">playframework</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">documentation</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="nc">ScalaHttpFilters</span><span class="o">),</span> <span class="n">run</span> <span class="k">for</span> <span class="n">each</span> <span class="n">request</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Logback</span> <span class="n">must</span> <span class="n">be</span> <span class="n">configured</span> <span class="n">to</span> <span class="n">display</span> <span class="n">the</span> <span class="n">`X-UserId`</span> <span class="n">value</span><span class="k">:</span>
</span><span class='line'><span class="kt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">appender</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;stdout&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">encoder</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">pattern</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;%</span><span class="n">d</span><span class="o">{</span><span class="nc">HH</span><span class="k">:</span><span class="kt">mm:ss.SSS</span><span class="o">}</span> <span class="o">%</span><span class="n">coloredLevel</span> <span class="o">%</span><span class="n">logger</span><span class="o">{</span><span class="mi">35</span><span class="o">}</span> <span class="o">%</span><span class="n">mdc</span><span class="o">{</span><span class="n">X</span><span class="o">-</span><span class="nc">UserId</span><span class="o">:--}</span> <span class="o">-</span> <span class="o">%</span><span class="n">msg</span><span class="o">%</span><span class="n">n</span><span class="o">%</span><span class="n">rootException</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">pattern</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">encoder</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">appender</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">In</span> <span class="n">the</span> <span class="n">log</span> <span class="n">file</span><span class="o">,</span> <span class="n">the</span> <span class="nc">MDC</span> <span class="n">value</span> <span class="k">for</span> <span class="n">`X-UserId`</span> <span class="n">is</span> <span class="n">now</span> <span class="n">printed</span> <span class="n">out</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">10</span><span class="k">:</span><span class="err">50</span><span class="kt">:</span><span class="err">54</span><span class="kt">.</span><span class="err">773</span> <span class="err">[</span><span class="kt">info</span><span class="err">]</span> <span class="kt">application</span> <span class="kt">jean.leloup</span> <span class="kt">-</span> <span class="kt">test</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Limitation of the default implementation of the MDC</h2>

<p>To record the values in the MDC, Logback uses a <code>ThreadLocal</code> variable.
This strategy works when one thread is used for one request, like in servlet container before the 3.1 specification.</p>

<p>Play framework, on the other hand, is <a href="http://www.playframework.com/documentation/2.2.x/ScalaAsync">asynchronous</a>. The processing of a request is composed of several function calls, and each call can be run on a different thread. (&ldquo;Don&rsquo;t call me, I&rsquo;ll call you&rdquo;)</p>

<p>The implementation of the MDC with a <code>ThreadLocal</code> cannot work with this non-blocking asynchronous threading model.</p>

<h2>First solution with Akka Dispatcher</h2>

<h4>Defining a custom Akka dispatcher</h4>

<p>Play dispatchs the jobs on different threads with a <a href="https://www.playframework.com/documentation/latest/ThreadPools">thread pool</a>. The Play default thread pool is an <a href="http://doc.akka.io/docs/akka/current/scala/dispatchers.html">Akka dispatcher</a>.</p>

<p>To use the MDC, we provide a custom Akka <code>Dispatcher</code> that propagates the MDC from the caller&rsquo;s thread to the callee&rsquo;s one.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">monitoring</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">akka.dispatch._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.typesafe.config.Config</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.slf4j.MDC</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.duration.</span><span class="o">{</span><span class="nc">Duration</span><span class="o">,</span> <span class="nc">FiniteDuration</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">Configurator</span> <span class="k">for</span> <span class="n">a</span> <span class="nc">MDC</span> <span class="n">propagating</span> <span class="n">dispatcher</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">To</span> <span class="n">use</span> <span class="n">it</span><span class="o">,</span> <span class="n">configure</span> <span class="n">play</span> <span class="n">like</span> <span class="k">this:</span>
</span><span class='line'> <span class="kt">*</span> <span class="o">{{{</span>
</span><span class='line'> <span class="kt">*</span> <span class="kt">play</span> <span class="o">{</span>
</span><span class='line'> <span class="kt">*</span>   <span class="kt">akka</span> <span class="o">{</span>
</span><span class='line'> <span class="kt">*</span>     <span class="kt">actor</span> <span class="o">{</span>
</span><span class='line'> <span class="kt">*</span>       <span class="kt">default-dispatcher</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'> <span class="kt">*</span>         <span class="k">type</span> <span class="o">=</span> <span class="kt">&amp;ldquo</span><span class="o">;</span><span class="kt">monitoring.MDCPropagatingDispatcherConfigurator&amp;rdquo</span><span class="o">;</span>
</span><span class='line'> <span class="kt">*</span>       <span class="o">}</span>
</span><span class='line'> <span class="kt">*</span>     <span class="o">}</span>
</span><span class='line'> <span class="kt">*</span>   <span class="o">}</span>
</span><span class='line'> <span class="kt">*</span> <span class="o">}</span>
</span><span class='line'> <span class="o">*</span> <span class="o">}}}</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">Credits</span> <span class="n">to</span> <span class="nc">James</span> <span class="nc">Roper</span> <span class="k">for</span> <span class="n">the</span> <span class="o">[[</span><span class="kt">&lt;a</span> <span class="kt">href=</span><span class="err">&quot;</span><span class="kt">https://github.com/jroper/thread-local-context-propagation/</span><span class="err">&quot;</span><span class="kt">&gt;https://github.com/jroper/thread-local-context-propagation/&lt;/a&gt;</span> <span class="kt">initial</span> <span class="kt">implementation</span><span class="o">]]</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MDCPropagatingDispatcherConfigurator</span><span class="o">(</span><span class="n">config</span><span class="k">:</span> <span class="kt">Config</span><span class="o">,</span> <span class="n">prerequisites</span><span class="k">:</span> <span class="kt">DispatcherPrerequisites</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">MessageDispatcherConfigurator</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">prerequisites</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">private</span> <span class="k">val</span> <span class="n">instance</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MDCPropagatingDispatcher</span><span class="o">(</span>
</span><span class='line'>    <span class="k">this</span><span class="o">,</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">getString</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;),</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">getInt</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">throughput</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;),</span>
</span><span class='line'>    <span class="nc">FiniteDuration</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="n">getDuration</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">throughput</span><span class="o">-</span><span class="n">deadline</span><span class="o">-</span><span class="n">time</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">NANOSECONDS</span><span class="o">),</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">NANOSECONDS</span><span class="o">),</span>
</span><span class='line'>    <span class="n">configureExecutor</span><span class="o">(),</span>
</span><span class='line'>    <span class="nc">FiniteDuration</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="n">getDuration</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">shutdown</span><span class="o">-</span><span class="n">timeout</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">MILLISECONDS</span><span class="o">),</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">MILLISECONDS</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">override</span> <span class="k">def</span> <span class="n">dispatcher</span><span class="o">()</span><span class="k">:</span> <span class="kt">MessageDispatcher</span> <span class="o">=</span> <span class="n">instance</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">A</span> <span class="nc">MDC</span> <span class="n">propagating</span> <span class="n">dispatcher</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">This</span> <span class="n">dispatcher</span> <span class="n">propagates</span> <span class="n">the</span> <span class="nc">MDC</span> <span class="n">current</span> <span class="n">request</span> <span class="n">context</span> <span class="k">if</span> <span class="n">it</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">set</span> <span class="n">when</span> <span class="n">it</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">executed</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MDCPropagatingDispatcher</span><span class="o">(&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">configurator</span><span class="k">:</span> <span class="kt">MessageDispatcherConfigurator</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">throughput</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">throughputDeadlineTime</span><span class="k">:</span> <span class="kt">Duration</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">executorServiceFactoryProvider</span><span class="k">:</span> <span class="kt">ExecutorServiceFactoryProvider</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">shutdownTimeout</span><span class="k">:</span> <span class="kt">FiniteDuration</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">Dispatcher</span><span class="o">(&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">configurator</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">throughput</span><span class="o">,</span> <span class="n">throughputDeadlineTime</span><span class="o">,</span> <span class="n">executorServiceFactoryProvider</span><span class="o">,</span> <span class="n">shutdownTimeout</span> <span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">self</span> <span class="o">=&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">override</span> <span class="k">def</span> <span class="n">prepare</span><span class="o">()</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ExecutionContext</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// capture the MDC</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">mdcContext</span> <span class="k">=</span> <span class="nc">MDC</span><span class="o">.</span><span class="n">getCopyOfContextMap</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">execute</span><span class="o">(</span><span class="n">r</span><span class="k">:</span> <span class="kt">Runnable</span><span class="o">)</span> <span class="k">=</span> <span class="n">self</span><span class="o">.</span><span class="n">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// backup the callee MDC context</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">oldMDCContext</span> <span class="k">=</span> <span class="nc">MDC</span><span class="o">.</span><span class="n">getCopyOfContextMap</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Run the runnable with the captured context</span>
</span><span class='line'>    <span class="n">setContextMap</span><span class="o">(</span><span class="n">mdcContext</span><span class="o">)</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">r</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// restore the callee MDC context</span>
</span><span class='line'>      <span class="n">setContextMap</span><span class="o">(</span><span class="n">oldMDCContext</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">})</span>
</span><span class='line'><span class="k">def</span> <span class="n">reportFailure</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span> <span class="n">self</span><span class="o">.</span><span class="n">reportFailure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">def</span> <span class="n">setContextMap</span><span class="o">(</span><span class="n">context</span><span class="k">:</span> <span class="kt">java.util.Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MDC</span><span class="o">.</span><span class="n">clear</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MDC</span><span class="o">.</span><span class="n">setContextMap</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
</p>

<h4>Using a custom Akka dispatcher everywhere:</h4>

<p>To use this custom Akka dispatcher everywhere, we just have to configure it:
<code>bash application.conf
play {
  akka {
    actor {
      default-dispatcher = {
        type = "monitoring.MDCPropagatingDispatcherConfigurator"
      }
    }
  }
}
</code>
and that&rsquo;s all! ;)</p>

<p>The MDC context is propagated when we use the play default <a href="https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.libs.concurrent.Execution$"><code>ExecutionContext</code></a>.</p>

<h4>Optimization</h4>

<p>So that this approach works in dev mode, simply make a library (jar) of this custom Akka dispatcher and add this as dependency in your play application.</p>

<h2>Second solution with a custom execution context</h2>

<h4>Defining a custom execution context</h4>

<p>The dispatching of the jobs on different threads in done with an <code>ExecutionContext</code>. Each <code>ExecutionContext</code> manages a <a href="https://www.playframework.com/documentation/latest/ThreadPools">thread pool</a>.</p>

<p>To use the MDC, we just have to use a custom <code>ExecutionContext</code> that propagates the MDC from the caller&rsquo;s thread to the callee&rsquo;s one.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.slf4j.MDC</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">ExecutionContextExecutor</span><span class="o">,</span> <span class="nc">ExecutionContext</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">slf4j</span> <span class="n">provides</span> <span class="n">a</span> <span class="nc">MDC</span> <span class="o">[[</span><span class="kt">&lt;a</span> <span class="kt">href=</span><span class="err">&quot;</span><span class="kt">http://logback.qos.ch/manual/mdc.html</span><span class="err">&quot;</span><span class="kt">&gt;http://logback.qos.ch/manual/mdc.html&lt;/a&gt;</span> <span class="kt">Mapped</span> <span class="kt">Diagnostic</span> <span class="kt">Context</span><span class="o">]]</span>
</span><span class='line'> <span class="o">*</span> <span class="n">based</span> <span class="n">on</span> <span class="n">a</span> <span class="o">[[</span><span class="kt">ThreadLocal</span><span class="o">]].</span> <span class="nc">In</span> <span class="n">an</span> <span class="n">asynchronous</span> <span class="n">environment</span><span class="o">,</span> <span class="n">the</span> <span class="n">callbacks</span> <span class="n">can</span> <span class="n">be</span> <span class="n">called</span>
</span><span class='line'> <span class="o">*</span> <span class="n">in</span> <span class="n">another</span> <span class="n">thread</span><span class="o">,</span> <span class="n">where</span> <span class="n">the</span> <span class="n">local</span> <span class="n">thread</span> <span class="n">variable</span> <span class="n">does</span> <span class="n">not</span> <span class="n">exist</span> <span class="n">anymore</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">This</span> <span class="n">execution</span> <span class="n">context</span> <span class="n">fixes</span> <span class="k">this</span> <span class="n">problem</span><span class="k">:</span>
</span><span class='line'> <span class="kt">*</span> <span class="kt">it</span> <span class="kt">propagates</span> <span class="kt">the</span> <span class="kt">MDC</span> <span class="kt">from</span> <span class="kt">the</span> <span class="kt">caller&amp;rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">thread</span> <span class="n">to</span> <span class="n">the</span> <span class="n">callee</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">one</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">object</span> <span class="nc">MDCHttpExecutionContext</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'>   <span class="o">*</span> <span class="nc">Create</span> <span class="n">an</span> <span class="nc">MDCHttpExecutionContext</span> <span class="k">with</span> <span class="n">values</span> <span class="n">from</span> <span class="n">the</span> <span class="n">current</span> <span class="n">thread</span><span class="o">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromThread</span><span class="o">(</span><span class="n">delegate</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">ExecutionContextExecutor</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">MDCHttpExecutionContext</span><span class="o">(</span><span class="nc">MDC</span><span class="o">.</span><span class="n">getCopyOfContextMap</span><span class="o">,</span> <span class="n">delegate</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">Manages</span> <span class="n">execution</span> <span class="n">to</span> <span class="n">ensure</span> <span class="n">that</span> <span class="n">the</span> <span class="n">given</span> <span class="nc">MDC</span> <span class="n">context</span> <span class="n">are</span> <span class="n">set</span> <span class="n">correctly</span>
</span><span class='line'> <span class="o">*</span> <span class="n">in</span> <span class="n">the</span> <span class="n">current</span> <span class="n">thread</span><span class="o">.</span> <span class="nc">Actual</span> <span class="n">execution</span> <span class="n">is</span> <span class="n">performed</span> <span class="n">by</span> <span class="n">a</span> <span class="n">delegate</span> <span class="nc">ExecutionContext</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MDCHttpExecutionContext</span><span class="o">(</span><span class="n">mdcContext</span><span class="k">:</span> <span class="kt">java.util.Map</span><span class="o">[</span><span class="kt">&lt;em&gt;</span>, <span class="kt">&lt;/em&gt;</span><span class="o">],</span> <span class="n">delegate</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">ExecutionContextExecutor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">execute</span><span class="o">(</span><span class="n">runnable</span><span class="k">:</span> <span class="kt">Runnable</span><span class="o">)</span> <span class="k">=</span> <span class="n">delegate</span><span class="o">.</span><span class="n">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">oldMDCContext</span> <span class="k">=</span> <span class="nc">MDC</span><span class="o">.</span><span class="n">getCopyOfContextMap</span>
</span><span class='line'>      <span class="n">setContextMap</span><span class="o">(</span><span class="n">mdcContext</span><span class="o">)</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setContextMap</span><span class="o">(</span><span class="n">oldMDCContext</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">})&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">def</span> <span class="n">setContextMap</span><span class="o">(</span><span class="n">context</span><span class="k">:</span> <span class="kt">java.util.Map</span><span class="o">[</span><span class="kt">&lt;em&gt;</span>, <span class="kt">&lt;/em&gt;</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MDC</span><span class="o">.</span><span class="n">clear</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MDC</span><span class="o">.</span><span class="n">setContextMap</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">reportFailure</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span> <span class="n">delegate</span><span class="o">.</span><span class="n">reportFailure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then we can define the default ExecutionContext in our application:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">concurrent</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">The</span> <span class="n">standard</span> <span class="o">[[</span><span class="kt">play.api.libs.concurrent.Execution.defaultContext</span><span class="o">]]</span> <span class="n">loses</span> <span class="n">the</span> <span class="nc">MDC</span> <span class="n">context</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="nc">This</span> <span class="n">custom</span> <span class="o">[[</span><span class="kt">ExecutionContext</span><span class="o">]]</span> <span class="n">propagates</span> <span class="n">the</span> <span class="nc">MDC</span> <span class="n">context</span><span class="o">,</span> <span class="n">so</span> <span class="n">that</span> <span class="n">the</span> <span class="n">request</span>
</span><span class='line'> <span class="o">*</span> <span class="n">and</span> <span class="n">the</span> <span class="n">correlation</span> <span class="nc">IDs</span> <span class="n">can</span> <span class="n">be</span> <span class="n">logged</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Execution</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">object</span> <span class="nc">Implicits</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">def</span> <span class="n">defaultContext</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="nc">Execution</span><span class="o">.</span><span class="n">defaultContext</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">defaultContext</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="nc">MDCHttpExecutionContext</span><span class="o">.</span><span class="n">fromThread</span><span class="o">(</span><span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Execution</span><span class="o">.</span><span class="n">defaultContext</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now we will use the <code>concurrent.Execution.defaultContext</code> instead of the one from play (<code>play.api.libs.concurrent.Execution.defaultContext</code>)</p>

<h4>Using a custom execution context everywhere</h4>

<p>Using a custom execution context is sometimes as easy as replacing
<code>import play.api.libs.concurrent.Execution.Implicits._</code> with <code>import concurrent.Execution.Implicits._</code></p>

<p>The default <a href="https://www.playframework.com/documentation/latest/ScalaActions"><code>Action</code></a> uses the default <code>play.api.libs.concurrent.Execution.defaultContext</code>.
We must define a custom <code>ActionBuilder</code> that uses our new <code>ExecutionContext</code>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">Action</span> <span class="k">extends</span> <span class="nc">ActionBuilder</span><span class="o">[</span><span class="kt">Request</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">invokeBlock</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;request:%20Request[A],%20block:%20(Request[A]&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">SimpleResult</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">block</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'>   <span class="o">*</span> <span class="nc">The</span> <span class="n">standard</span> <span class="o">[[</span><span class="kt">play.api.mvc.Action</span><span class="o">]]</span> <span class="n">loses</span> <span class="n">the</span> <span class="nc">MDC</span> <span class="n">context</span><span class="o">.</span>
</span><span class='line'>   <span class="o">*</span>
</span><span class='line'>   <span class="o">*</span> <span class="nc">This</span> <span class="n">action</span> <span class="n">builder</span> <span class="n">sets</span> <span class="n">the</span> <span class="o">[[</span><span class="kt">ExecutionContext</span><span class="o">]]</span> <span class="n">so</span> <span class="n">that</span> <span class="n">the</span>
</span><span class='line'>   <span class="o">*</span> <span class="nc">MDC</span> <span class="n">context</span> <span class="n">is</span> <span class="n">propagated</span><span class="o">.</span>
</span><span class='line'>   <span class="o">*</span> <span class="nc">With</span> <span class="k">this</span> <span class="n">custom</span> <span class="o">[[</span><span class="kt">ExecutionContext</span><span class="o">]],</span> <span class="n">the</span> <span class="n">request</span> <span class="n">and</span> <span class="n">the</span> <span class="n">correlation</span> <span class="nc">IDs</span>
</span><span class='line'>   <span class="o">*</span> <span class="n">can</span> <span class="n">be</span> <span class="n">logged</span><span class="o">.</span>
</span><span class='line'>   <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">executionContext</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="nc">Execution</span><span class="o">.</span><span class="n">defaultContext</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Instead of using of <code>play.api.mvc.Action</code>, we just have to use the newly defined <code>controllers.Action</code>.</p>

<p>With each of these customizations, we are now able to use the Mapped Diagnostic Context (MDC) with asynchronous actions written in Scala.</p>
]]></content>
  </entry>
  
</feed>
