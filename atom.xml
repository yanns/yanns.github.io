<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yann's Blog]]></title>
  <link href="http://yanns.github.io/atom.xml" rel="self"/>
  <link href="http://yanns.github.io/"/>
  <updated>2015-11-22T22:15:01+01:00</updated>
  <id>http://yanns.github.io/</id>
  <author>
    <name><![CDATA[Yann Simon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play Framework Meetup in Berlin in November 2015]]></title>
    <link href="http://yanns.github.io/blog/2015/11/17/introduction-to-type-classes-in-scala/"/>
    <updated>2015-11-17T21:43:55+01:00</updated>
    <id>http://yanns.github.io/blog/2015/11/17/introduction-to-type-classes-in-scala</id>
    <content type="html"><![CDATA[<p>During the <a href="http://www.meetup.com/Play-Berlin-Brandenburg/events/226561633/">play framework meetup in Berlin in November 2015</a>:</p>

<h2>for a better workflow between designers and developers</h2>

<p><a href="https://twitter.com/lluizesc">Laura</a> made a very good talk about how to better organize the work between front-end designers and developers.</p>

<p>For that, her team build some tools:</p>

<ul>
<li><p>the designer uses an assets pipeline in nodejs to build a website. The templates are written with <a href="http://handlebarsjs.com/">handlebars</a>. When the website is ready, a release is made and all assets are packaged as a <a href="http://www.webjars.org/">webjar</a>: <a href="https://github.com/lauraluiz/handlebars-webjars-demo">https://github.com/lauraluiz/handlebars-webjars-demo</a></p></li>
<li><p>the developer uses a play framework application that is capable of using directly the assets released by the designer: <a href="https://github.com/lauraluiz/play-handlebars-demo">https://github.com/lauraluiz/play-handlebars-demo</a></p></li>
</ul>


<p>Slides: <a href="http://slides.com/lauraluiz/handlebarsplay">http://slides.com/lauraluiz/handlebarsplay</a></p>

<p>Project using this workflow: <a href="https://github.com/sphereio/sphere-sunrise">https://github.com/sphereio/sphere-sunrise</a></p>

<h2>type classes in Scala</h2>

<p>I introduced type classes in Scala: <a href="http://www.slideshare.net/yann_s/introduction-to-type-classes-in-scala">http://www.slideshare.net/yann_s/introduction-to-type-classes-in-scala</a></p>

<p>Step by step, I explained how the Json Reads/Writes/Formats work in the <a href="https://www.playframework.com/documentation/2.4.x/ScalaJson">scala API of the play framework</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DI With Play 2.4]]></title>
    <link href="http://yanns.github.io/blog/2015/05/20/di-with-play-2-dot-4/"/>
    <updated>2015-05-20T23:01:57+02:00</updated>
    <id>http://yanns.github.io/blog/2015/05/20/di-with-play-2-dot-4</id>
    <content type="html"><![CDATA[<p>During the <a href="http://www.meetup.com/Play-Berlin-Brandenburg/events/222130013/">play framework meetup in Mai 2015</a>, there were 3 talks about Dependency Injection (DI) in Play 2.4:</p>

<ul>
<li><p>from Micheal: runtime DI in Java with <a href="https://github.com/google/guice">Guice</a>, the default framework introduced in play 2.4: <a href="https://github.com/schleichardt/play-2-4-di-talk">https://github.com/schleichardt/play-2-4-di-talk</a></p></li>
<li><p>from <a href="https://twitter.com/easyangel">Oleg</a>: runtime DI in Scala with <a href="http://scaldi.org/">Scaldi</a>: <a href="http://scaldi.github.io/scaldi-play-2.4.0-presentation/">http://scaldi.github.io/scaldi-play-2.4.0-presentation/</a></p></li>
<li><p>compile-time DI in Scala with constructor arguments or <a href="https://github.com/adamw/macwire">MacWire</a>: <a href="http://de.slideshare.net/yann_s/play-24dimacwire.">http://de.slideshare.net/yann_s/play-24dimacwire.</a> For that talk, I re-used the TBA application I used at the <a href="http://localhost:4000/blog/2014/02/17/ping-conf-2014/">Ping Conf</a> last year and added a version using MacWire: <a href="https://github.com/yanns/TPA/tree/master/frontend/TBA_macwire">https://github.com/yanns/TPA/tree/master/frontend/TBA_macwire</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goto Conference 2014]]></title>
    <link href="http://yanns.github.io/blog/2014/11/10/goto-conference-2014/"/>
    <updated>2014-11-10T10:33:59+01:00</updated>
    <id>http://yanns.github.io/blog/2014/11/10/goto-conference-2014</id>
    <content type="html"><![CDATA[<p>My notes from the <a href="http://gotocon.com/berlin-2014">goto conference Berlin 2014</a>:</p>

<h2>Thursday</h2>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Opening%20Keynote:%20Software%20Design%20in%20the%2021st%20Century">Opening Keynote: Software Design in the 21st Century</a> &ndash; <a href="https://twitter.com/martinfowler">Martin Fowler</a></h5>

<p>We, developers, take responsibility in the code we write.<br/>
We cannot simply say: &ldquo;I implemented that because I was told so&rdquo;.<br/>
Avoid <a href="http://darkpatterns.org/">dark patterns</a>.</p>

<p>We are not code monkeys.</p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Aeron:%20The%20Next%20Generation%20in%20Open-Source%20High-Performance%20Messaging">Aeron: The Next Generation in Open-Source High-Performance Messaging</a> &ndash; <a href="https://twitter.com/mjpt777">Martin Thompson</a></h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/MartinThompson_AeronTheNextGenerationInOpenSourceHighPerformanceMessaging.pdf">slides</a>
<a href="http://mechanical-sympathy.blogspot.com/">blog</a></p>

<p><a href="https://github.com/real-logic/Aeron">Aeron</a> is a OSI layer 4 Transport for message oriented streams.
is simply impressive, achieving a very low latency.<br/>
I&rsquo;d like to see an integration of Aeron in Akka cluster.</p>

<p><a href="https://www.youtube.com/watch?v=tM4YskS94b0">similar talk</a></p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Writing%20highly%20Concurrent%20Polyglot%20Applications%20with%20Vert.x">Writing highly Concurrent Polyglot Applications with Vert.x</a> &ndash; <a href="https://twitter.com/timfox">Tim Fox</a></h5>

<p>It was a good introduction to Vert.x.<br/>
But I was expecting more than an introduction.</p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Fast%20Analytics%20on%20Big%20Data">Fast Analytics on Big Data</a> &ndash; Petr Maj and Tomas Nykodym</h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/PetrMaj_and_TomasNykodym_FastAnalyticsOnBigData.pdf">slides</a></p>

<p>Presentation of an ML runtime for bigdata.</p>

<p><a href="https://github.com/0xdata/h2o">Code</a> <a href="https://github.com/0xdata/h2o-dev">With Spark API</a></p>

<p>TODO: have a look at <a href="https://github.com/0xdata/h2o-training">https://github.com/0xdata/h2o-training</a></p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Security%20Architecture%20for%20the%20SmartHome">Security Architecture for the SmartHome</a> &ndash; <a href="https://twitter.com/jacobfahrenkrug">Jacob Fahrenkrug</a></h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/JacobFahrenkrug_SecurityArchitectureForTheSmartHome.pdf">slides</a></p>

<p>A good presentation about the future threats of connected objects and the solution <a href="http://www.yetu.com/">yetu</a> implements.</p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Graph%20All%20The%20Things!!%20Graph%20Database%20Use%20Cases%20That%20Aren't%20Social">Graph All The Things!! Graph Database Use Cases That Aren&rsquo;t Social</a> &ndash; <a href="https://twitter.com/emileifrem">Emil Eifrem</a></h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/EmilEifrem_GraphAllTheThingsGraphDatabaseUseCasesThatArentSocial.pdf">slides</a></p>

<p>very good presentation of <a href="http://neo4j.com/">Neo4j</a>.<br/>
We should use a graph database where it make sense &ndash; the search queries are much easier to write / read, and the performance very good.</p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Party%20Keynote:%20Staying%20Ahead%20of%20the%20Curve">Party Keynote: Staying Ahead of the Curve</a> &ndash; <a href="https://twitter.com/trisha_gee">Trisha Gee</a></h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/TrishaGee_PartyKeynoteStayingAheadOfTheCurve.pdf">slides</a></p>

<h2>Friday</h2>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Morning%20Keynote:%20Excellence%20Culture%20&amp;%20Humane%20Keeping%20of%20Techies">Morning Keynote: Excellence Culture &amp; Humane Keeping of Techies</a> &ndash; <a href="https://twitter.com/wilddueck">Prof. Dr. Gunter Dueck</a></h5>

<p>a very good keynote, very funny and true at the same time.</p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Aerospike:%20Flash-optimized,%20High-Performance%20noSQL%20database%20for%20All">Aerospike: Flash-optimized, High-Performance noSQL database for All</a> &ndash; <a href="https://twitter.com/khaf">Khosrow Afroozeh</a></h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/KhosrowAfroozeh_AerospikeFlashOptimizedHighPerformanceNoSQLDatabaseForAll.pdf">slides</a></p>

<p>A new database on my radar &ndash; impressive.</p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/Docker%20-%20A%20Lot%20Changed%20in%20a%20Year">Docker &ndash; A Lot Changed in a Year</a> &ndash; <a href="http://twitter.com/cpswan">Chris Swan</a></h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/ChrisSwan_DockerALotChangedInAYear.pdf">slides</a></p>

<p>Docker is maturating.<br/>
Just do not forget that &ldquo;containers do not contain&rdquo; &ndash;> no complete security between container and host, and between containers.</p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/The%20Joys%20and%20Perils%20of%20Interactive%20Development">The Joys and Perils of Interactive Development</a> &ndash; <a href="https://twitter.com/stuartsierra">Stuart Sierra</a></h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/protected/StuartSierra_TheJoysAndPerilsOfInteractiveDevelopment.pdf">slides</a></p>

<h5><a href="http://gotocon.com/berlin-2014/presentation/New%20Concurrency%20Utilities%20in%20Java%208">New Concurrency Utilities in Java 8</a> &ndash; <a href="https://twitter.com/AngelikaLanger">Angelika Langer</a></h5>

<p><a href="http://gotocon.com/dl/goto-berlin-2014/slides/protected/AngelikaLanger_NewConcurrencyUtilitiesInJava8.pdf">slides</a></p>

<ul>
<li>Future API is becoming usable, it is now possible to chain futures and callbacks.</li>
<li>new StampedLock is optimized for reading. (personal note: but lock-free algorithms should be preferred, like in <a href="http://mechanical-sympathy.blogspot.com/">Lock-Based vs Lock-Free Concurrent Algorithms</a>)</li>
</ul>


<h5><a href="http://gotocon.com/berlin-2014/presentation/Adaptive%20Planning%20-%20Beyond%20User%20Stories">Adaptive Planning &ndash; Beyond User Stories</a> &ndash; <a href="https://twitter.com/gojkoadzic">Gojko Adzic</a></h5>

<p><a href="http://gojko.net/">blog</a>
<a href="http://gotocon.com/dl/goto-berlin-2014/slides/GojkoAdzic_AdaptivePlanningBeyondUserStories.pdf">slides</a></p>

<p>Gojko Adzic really thinks agile. Good presentation of how to make better user stories.<br/>
Do not describe a desired behavior but a behavior change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous IO for Play! Applications in Servlet 3.1 Containers With the Play2-war Plugin]]></title>
    <link href="http://yanns.github.io/blog/2014/08/10/complete-asynchronous-io-for-play-applications-in-servlet-3-dot-1-containers-with-the-play2-war-plugin/"/>
    <updated>2014-08-10T18:55:36+02:00</updated>
    <id>http://yanns.github.io/blog/2014/08/10/complete-asynchronous-io-for-play-applications-in-servlet-3-dot-1-containers-with-the-play2-war-plugin</id>
    <content type="html"><![CDATA[<p>A <a href="http://playframework.com/">Play application</a> does not need any container and <a href="http://playframework.com/documentation/2.3.x/Production">runs directly in production</a>.</p>

<p>However some organizations prefer to run play applications within a servlet container and can use for this the <a href="https://github.com/play2war/play2-war-plugin">WAR Plugin</a>.</p>

<p>I am very pleased to share that this plugin is now compatible with servlet 3.1 containers. It can now use the new asynchronous IO possibilities.</p>

<p>Let me explain why and when it is important.</p>

<h3>Play applications are asynchronous</h3>

<p>The Play Framework is build to be totally asynchronous and reactive. It uses no blocking IO. A Play application scales very well, using very few threads.</p>

<p>This reactive consuming or construction of IO stream is designed in play with <a href="http://www.playframework.com/documentation/2.3.x/Iteratees">Iteratees</a>. It will progressively be completed with <a href="http://typesafe.com/blog/typesafe-announces-akka-streams">Akka Streams</a>, the implementation in Akka of the reactive stream project (<a href="http://www.reactive-streams.org/">http://www.reactive-streams.org/</a>)</p>

<h3>Servlet containers use blocking IO</h3>

<p>On the other hand, servlet containers traditionally use a <a href="http://www.slideshare.net/brikis98/the-play-framework-at-linkedin/62">thread per request</a>. When doing IO (database access, external web request), the thread waits for the IO completion (blocking IO). That&rsquo;s why servlet containers need a lot of working threads to handle requests in parallel (<a href="http://tomcat.apache.org/tomcat-7.0-doc/config/executor.html">default 200 threads max for tomcat</a>)</p>

<h4>Asynchronous 3.0 servlet</h4>

<p>Servlet 3.0 containers introduced the possibility to “suspend” a request.
For example, if an application makes an HTTP request to another web service using the <a href="http://www.playframework.com/documentation/2.3.x/ScalaWS">WS client</a>, the play2 war plugin is able to suspend the servlet request until the external web service answers. It means that with the same number of servlet threads, a servlet 3.0 container can support more requests in parallel than a servlet 2.x container. It does not need that a thread waits for an HTTP request, this thread can be used for other requests.</p>

<h4>Limitations of asynchronous 3.0 servlet</h4>

<p>When uploading or downloading a big file, the servlet container is able to stream the data. But between each chunks, the servlet thread is blocking, waiting for the next one.
It is not possible to consume one chunk, and later, when we are ready to consume another one, tell the container: “now I am ready, you can send me the next chunk as soon as you receive one from the browser”.</p>

<p>If a browser needs an hour to upload a file with a slow Internet connection, the container needs a thread during an hour, even if the application does not do anything, just waiting for the upload completion.</p>

<h3>Play applications deployed as war are limited by the servlet container</h3>

<p>A Play application deployed in a war container is limited by the technical possibilites of the servlet API. With a servlet 2.x or 3.0, a Play application does not scale as well as when run natively.</p>

<h3>New asynchronous IO in servlet 3.1</h3>

<p>The <a href="https://jcp.org/en/jsr/detail?id=340">servlet 3.1 specification</a> added asynchronous IO. Based on <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EventListener.html">events</a>, it is now possible to completly handle an <a href="https://javaee-spec.java.net/nonav/javadocs/javax/servlet/ReadListener.html">upload</a> and a <a href="https://javaee-spec.java.net/nonav/javadocs/javax/servlet/WriteListener.html">download</a> asynchronously.</p>

<h3>Asynchronous IO in WAR Plugin for Play! applications</h3>

<p>Since the <a href="https://github.com/play2war/play2-war-plugin/releases/tag/1.2">version 1.2</a>, the play2 war plugin is using this API to provide a complete reactive upload and download.</p>

<p>To use this, simply <a href="https://github.com/play2war/play2-war-plugin/wiki/Configuration#servlet-31-container-configuration">configure the servlet container version</a> and deploy to a servlet 3.1 server.</p>

<h4>When to use this feature?</h4>

<p>This feature should be used especially if the application is using big download/upload. The servlet 3.1 will help to scale much better.</p>

<p>During my tests, I could upload and download files from several GB in parallel. The container and the JVM garbage collection could support that without any problems. The memory usage was very low.</p>

<p>Also please test this new version and report issues!</p>

<h4>How to build the application to scale better?</h4>

<p>To scale as much as possible, the application should not block. It should always use asynchronous IO API like in the WS client.</p>

<p>But in the Java World a lot a librairies are still designed for a one-thread-per-request model and do not provide asynchronous API. It is for example the case for a JDBC driver. In that case, a separate dispatcher should be configured to handle blocking IO. More Information for this can be found in the <a href="http://www.playframework.com/documentation/2.3.x/ThreadPools">Play Framework documentation</a>.</p>

<h3>Implementation history</h3>

<p>The implementation of asynchronous IO in the WAR plugin lasted a few months.
The <a href="https://github.com/play2war/play2-war-plugin/pull/204">first pull request</a> introduced the asynchronous download, and <a href="https://github.com/play2war/play2-war-plugin/pull/235">the second one</a> the asynchronous upload.
I&rsquo;d like to thank <a href="https://twitter.com/jroper">James Roper</a> and <a href="https://twitter.com/viktorklang">Viktor Klang</a> for their reviews.</p>

<p>This feature was quite challenging to implement:</p>

<ul>
<li><p>I had to find a good way to implement the glue between two very different APIs. The servlet 3.1 API is quite imperative and use <a href="http://docs.oracle.com/javase/7/docs/api/java/util/EventListener.html">EventListener</a> and methods with side effects. The Iteratee API is functional and I needed some time to feel at ease with it.</p></li>
<li><p>The servlet 3.1 specification was recently finalized as I began. The first implementations in some containers contained bugs. Reporting the problems, explaining, convincing other developers took a lot of time and energy.</p></li>
<li><p>The servlet 3.1 specification is not always explicit. The implementations in the different servlet containers are also different. Finding an implementation that covers all these subtle differences was challenging. The <a href="https://play-war.ci.cloudbees.com/job/Play_2_War_Run_integration_tests_-_Play_22x/">testing infrastructure of the play2-war plugin</a> provides a lot of integration tests with different containers and helped a lot for this.</p></li>
</ul>


<p>My firm <a href="http://www.leanovate.de/">Leanovate</a> gave me some time to work on that. Having worked two days full time on it helped me a lot. Thanks Leanovate for this!</p>

<p>All in all it was a great experience to contribute to the WAR Plugin, and I hope my work will be useful for others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enlarge Your Test Scope]]></title>
    <link href="http://yanns.github.io/blog/2014/05/30/enlarge-your-test-scope/"/>
    <updated>2014-05-30T22:00:22+02:00</updated>
    <id>http://yanns.github.io/blog/2014/05/30/enlarge-your-test-scope</id>
    <content type="html"><![CDATA[<p>At the beginning at the year, I had the chance to present <a href="blog/2014/02/17/ping-conf-2014/">how to organize a play application with the Cake pattern</a> at <a href="http://www.ping-conf.com/">Ping Conf</a>.
I showed how this pattern enable designing the application as components, how to reduce visibility of specific gateway&rsquo;s model only to components that need it. One side-effect of the cake pattern is that it allows a dependency injection resolved at compilation time.</p>

<p>In one of my last slides, I warned against abusing a dependency injection mechanism to write too much unit tests.
To stay within the time slot, I have not developed so much my concerns about that point.</p>

<p><img src="http://image.slidesharecdn.com/play-with-cake-export2-140121150250-phpapp01/95/slide-66-638.jpg"></p>

<p>During the talk, I implemented an application to demonstrate my points. This application consumes two external web services to render HTML pages. It is quite a typical application we can see in an infrastructure build with micro-services.</p>

<p>I&rsquo;ve now took the time to write a new version of this application I used in the demo.
<a href="https://github.com/yanns/TPA/tree/master/frontend/TBA_07">And This new version is not using any unit tests but only some sort of component tests.</a></p>

<p>Let&rsquo;s dig into the details how this new version differs from the ones build around the Cake pattern.</p>

<h3>Traditional view of unit tests</h3>

<p>When building an application, we usually structure the code into layers to separate responsibilities, thus enabling re-use of logic, and avoiding repetition.</p>

<p>In the demo I used for the talk, the application is for example layered into views, controllers, services and gateways. All these layers have access to a common model.</p>

<p><img src="http://image.slidesharecdn.com/play-with-cake-export2-140121150250-phpapp01/95/slide-10-638.jpg"" title="'code structured in layers'" ></p>

<p>A traditional approach of unit test is to consider one class or function of one layer as a unit to test. The other dependent layers are mocked.</p>

<p>For example, to test the service layers, we use mocks for the gateways, simulating responses from external web services.</p>

<p><img src="http://image.slidesharecdn.com/play-with-cake-export2-140121150250-phpapp01/95/slide-21-638.jpg"></p>

<p>This approach works well, but has several downsides:</p>

<ul>
<li>the unit tests prove that one layer is working as expected, but they said nothing about all the layers used together.</li>
<li>the unit tests use the internal details of the implementation. Re-factoring the code implies then to change a lot of tests.</li>
</ul>


<p>By using dependency injection and mocks, it is nowadays very easy to write unit tests. The effect if some applications are tested almost only with unit tests:</p>

<p><img src="http://image.slidesharecdn.com/play-with-cake-export2-140121150250-phpapp01/95/slide-65-638.jpg"></p>

<h3>Traditional view of component tests</h3>

<p>To complement the unit tests, a team can decide to implement some component tests.</p>

<p>For the sample used in the talk, the component is the font end application we are currently implementing.</p>

<p>The most common way to run component tests is to start the tested application. The application is configured not to use the real external web services, but some local mock implementations. The local mock implementations are started as http servers as well, running on different ports.</p>

<p><img src="http://image.slidesharecdn.com/play-with-cake-export2-140121150250-phpapp01/95/slide-13-638.jpg"></p>

<p>When the application and all the mocks are started, we can test the application by sending some http requests and by analyzing the responses.</p>

<p>Setting up the test environment with this approach is quite complex. For each external web service, a mock must be implemented as a real local http server. We must start all mock implementations, and then the new configured application. At the end of the tests, we must shutdown all services, even in case of exceptions.</p>

<p>But the main drawback with this approach in my opinion is that running the tests take a lot of time, too much to be integrated in a normal development flow (write code &ndash;> compile &ndash;> test)</p>

<h3>An alternative approach between component and unit tests</h3>

<p>To strictly adhere to the definition of component tests, we should treat the tested application as a black box, and simulate all external web services. We saw that this approach is somewhat heavy to use: each external web service must be mock with a real http server.</p>

<p>Starting and running the tests in that configuration take time. Debugging an error can be difficult.</p>

<p>The strategy I used in new version of the demo application (<a href="https://github.com/yanns/TPA/tree/master/frontend/TBA_07">TBA_07</a>) is a little bit different.
The idea is still to use a request / response to test the application, but without having to run the application and any external web services.</p>

<p>Implementing that is actually quite easy: each layer declared as dependency an HTTP client (a <a href="http://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.libs.ws.WSClient">WSClient</a> in play framework 2.3)</p>

<ul>
<li>The http client is a dependency at the top (controllers&#8217; layer):</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span><span class="o">(</span><span class="n">ws</span><span class="k">:</span> <span class="kt">WSClient</span><span class="o">,</span> <span class="n">app</span><span class="k">:</span> <span class="kt">play.api.Application</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">topVideoService</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">TopVideoService</span><span class="o">(</span><span class="n">ws</span><span class="o">,</span> <span class="n">app</span><span class="o">)</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(a second &ldquo;dependency&rdquo; is the current play application. This approach is very convenient to simulate different configurations)</p>

<ul>
<li>The real implementation of the http client is then &ldquo;injected&rdquo; at the last time, when we construct the controller singleton:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">playCurrent</span> <span class="k">=</span> <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="nc">Play</span><span class="o">.</span><span class="n">current</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Application</span><span class="o">(</span><span class="nc">WS</span><span class="o">.</span><span class="n">client</span><span class="o">(</span><span class="n">playCurrent</span><span class="o">),</span> <span class="n">playCurrent</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>To test the application, we then simply have to instantiate the controller with an <a href="https://github.com/yanns/TPA/blob/master/frontend/TBA_07/test/httpclient/MockWS.scala">alternative implementation of the http client capable of simulating external web services</a>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ApplicationControllerFixture</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">Application</span><span class="o">(</span><span class="nc">MockWS</span><span class="o">(</span><span class="n">playerRoute</span><span class="o">),</span> <span class="nc">FakeApplication</span><span class="o">())</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The <code>playerRoute</code> simulate the external player web service:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">playerId</span> <span class="k">=</span> <span class="nc">PlayerId</span><span class="o">(</span><span class="mi">34</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">playerRoute</span><span class="k">:</span> <span class="kt">MockWS.Routes</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="o">(</span><span class="s">&quot;GET&quot;</span><span class="o">,</span> <span class="n">u</span><span class="o">)</span> <span class="k">if</span> <span class="n">u</span> <span class="o">==</span> <span class="n">s</span><span class="s">&quot;http://localhost:9001/players/$playerId&quot;</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="nc">Action</span> <span class="o">{</span> <span class="nc">Ok</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="n">parse</span><span class="o">(</span><span class="n">playerJson</span><span class="o">(</span><span class="n">playerId</span><span class="o">)))</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">Action</span> <span class="o">{</span> <span class="nc">NotFound</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">playerJson</span><span class="o">(</span><span class="n">playerId</span><span class="k">:</span> <span class="kt">PlayerId</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'>  <span class="n">s</span><span class="s">&quot;&quot;&quot;{</span>
</span><span class='line'><span class="s">       |  &quot;id&quot;: $playerId,</span>
</span><span class='line'><span class="s">       |  &quot;name&quot;: &quot;ze name&quot;,</span>
</span><span class='line'><span class="s">       |  &quot;height&quot;: &quot;ze height&quot;,</span>
</span><span class='line'><span class="s">       |  &quot;weight&quot;: &quot;ze weight&quot;,</span>
</span><span class='line'><span class="s">       |  &quot;team&quot;: &quot;ze team&quot;</span>
</span><span class='line'><span class="s">       |}</span>
</span><span class='line'><span class="s">     &quot;&quot;&quot;</span><span class="o">.</span><span class="n">stripMargin</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>MockWS.Routes</code> type defines a partial function <code>PartialFunction[(String, String), EssentialAction]</code>, making really easy to combine different routes together with <code>orElse</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">SimulatedVideoBackend</span><span class="o">.</span><span class="n">videoRoute</span> <span class="n">orElse</span> <span class="nc">SimulatedPlayerBackend</span><span class="o">.</span><span class="n">playerRoute</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>and we can test the response by calling the controller with a <a href="http://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.test.FakeRequest"><code>FakeRequest</code></a>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">index</span><span class="o">.</span><span class="n">apply</span><span class="o">(</span><span class="nc">FakeRequest</span><span class="o">())</span>
</span><span class='line'><span class="n">status</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="n">mustEqual</span> <span class="nc">OK</span>
</span></code></pre></td></tr></table></div></figure>


<p>The application is constructed as if it was depending from the http client and the current play application.</p>

<p>These tests are not strictly component tests, as we are not testing the real implementation of the http client.
The application is not entirely treated as a black box. But most of the code is tested like in production.</p>

<h4>Drawbacks of this approach:</h4>

<ul>
<li>writing a test is more complicated than testing a little unit of code</li>
<li>writing unit test can help avoiding code mixing responsibilities. We do not profit from that.</li>
<li>when a test suddenly fails, it is more difficult to find out why.</li>
<li>we do not test the complete application stack. For example, the <a href="http://www.playframework.com/documentation/2.3.x/ScalaHttpFilters">play filters</a> and the real http client is not tested.</li>
</ul>


<h4>Advantages of this approach:</h4>

<ul>
<li>a developer must understand how the application works in general to be able to write good tests</li>
<li>the application can be re-factored without modifying the tests</li>
<li>the user functions are better tested</li>
<li>the integration of all layers together is tested</li>
<li>we do not need any running server to check all the tests. The tests run very fast.</li>
<li>the code is simple (compare the <a href="https://github.com/yanns/TPA/blob/master/frontend/TBA_07/app/services/TopVideoService.scala">TopVideoService in that version</a> with the <a href="https://github.com/yanns/TPA/blob/master/frontend/TBA_05_final/app/services/TopVideoServiceComp.scala">one using the Cake pattern</a>)</li>
</ul>


<h3>Experience with that approach</h3>

<p>With one team, we are currently testing this approach. The results are quite encouraging: more than 80 % of the statements are covered by tests. We have more than 200 tests running in 10 seconds on my machine.</p>

<p>And I could deeply change the code with almost no impact on the tests. ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SLF4J Mapped Diagnostic Context (MDC) With Play Framework]]></title>
    <link href="http://yanns.github.io/blog/2014/05/04/slf4j-mapped-diagnostic-context-mdc-with-play-framework/"/>
    <updated>2014-05-04T11:45:52+02:00</updated>
    <id>http://yanns.github.io/blog/2014/05/04/slf4j-mapped-diagnostic-context-mdc-with-play-framework</id>
    <content type="html"><![CDATA[<p>I&rsquo;d like the share with this post one solution I found to use a Mapped Diagnostic Context (MDC) in an asynchronous environment like the play framework.</p>

<h2>Edit (September 2014)</h2>

<p>Based on <a href="https://github.com/jroper/thread-local-context-propagation/">one implementation from James Roper</a>, I added one solution based on <a href="http://doc.akka.io/docs/akka/current/scala/dispatchers.html">Akka Dispatcher</a>.</p>

<h2>tl;dr</h2>

<p>This post provides two solution to propagate the MDC context in an asynchronous Play application:</p>

<ul>
<li>using a custom Akka <code>Dispatcher</code>. This solution needs minimal change to a current application.</li>
<li>using a custom <code>ExecutionContext</code> that propagates the MDC from the caller&rsquo;s thread to the callee&rsquo;s one. A custom <code>ActionBuilder</code> is necessary as well to completely use this custom <code>ExectionContext</code>.</li>
</ul>


<h2>The Mapped Diagnostic Context (MDC)</h2>

<p>The play framework uses for logging <a href="http://logback.qos.ch/">Logback</a> behind <a href="http://www.slf4j.org/">SLF4J (&ldquo;Simple Logging Facade for Java&rdquo;)</a>.<br/>
This library provides a convenient feature: the <a href="http://logback.qos.ch/manual/mdc.html">Mapped Diagnostic Context (MDC)</a>.
This context can be used to store values that can be displayed in every Logging statement.<br/>
For example, if we want to display the current user ID:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.slf4j.MDC</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">id</span> <span class="k">=</span> <span class="n">currentUser</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'><span class="nc">MDC</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="s">&quot;X-UserId&quot;</span><span class="o">,</span> <span class="n">currentUser</span><span class="o">.</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// the block of code that uses the Logger</span>
</span><span class='line'>  <span class="c1">// for example:</span>
</span><span class='line'>  <span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;test&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// clean up the MDC</span>
</span><span class='line'>  <span class="nc">MDC</span><span class="o">.</span><span class="n">remove</span><span class="o">(</span><span class="s">&quot;X-UserId&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(This code could be in a <a href="https://www.playframework.com/documentation/latest/ScalaHttpFilters">filter</a>, run for each request)</p>

<p>Logback must be configured to display the <code>X-UserId</code> value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;stdout&quot;</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;encoder&gt;</span>
</span><span class='line'>        <span class="nt">&lt;pattern&gt;</span>%d{HH:mm:ss.SSS} %coloredLevel %logger{35} %mdc{X-UserId:--} - %msg%n%rootException<span class="nt">&lt;/pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/encoder&gt;</span>
</span><span class='line'><span class="nt">&lt;/appender&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the log file, the MDC value for <code>X-UserId</code> is now printed out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>10:50:54.773 [info] application jean.leloup - test
</span></code></pre></td></tr></table></div></figure>


<h2>Limitation of the default implementation of the MDC</h2>

<p>To record the values in the MDC, Logback uses a <code>ThreadLocal</code> variable.
This strategy works when one thread is used for one request, like in servlet container before the 3.1 specification.</p>

<p>Play framework, on the other hand, is <a href="http://www.playframework.com/documentation/2.2.x/ScalaAsync">asynchronous</a>. The processing of a request is composed of several function calls, and each call can be run on a different thread. (&ldquo;Don&rsquo;t call me, I&rsquo;ll call you&rdquo;)</p>

<p>The implementation of the MDC with a <code>ThreadLocal</code> cannot work with this non-blocking asynchronous threading model.</p>

<h2>First solution with Akka Dispatcher</h2>

<h4>Defining a custom Akka dispatcher</h4>

<p>Play dispatchs the jobs on different threads with a <a href="https://www.playframework.com/documentation/latest/ThreadPools">thread pool</a>. The Play default thread pool is an <a href="http://doc.akka.io/docs/akka/current/scala/dispatchers.html">Akka dispatcher</a>.</p>

<p>To use the MDC, we provide a custom Akka <code>Dispatcher</code> that propagates the MDC from the caller&rsquo;s thread to the callee&rsquo;s one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">monitoring</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">java.util.concurrent.TimeUnit</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.dispatch._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.typesafe.config.Config</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.slf4j.MDC</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.duration.</span><span class="o">{</span><span class="nc">Duration</span><span class="o">,</span> <span class="nc">FiniteDuration</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Configurator for a MDC propagating dispatcher.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * To use it, configure play like this:</span>
</span><span class='line'><span class="cm"> * {{{</span>
</span><span class='line'><span class="cm"> * play {</span>
</span><span class='line'><span class="cm"> *   akka {</span>
</span><span class='line'><span class="cm"> *     actor {</span>
</span><span class='line'><span class="cm"> *       default-dispatcher = {</span>
</span><span class='line'><span class="cm"> *         type = &quot;monitoring.MDCPropagatingDispatcherConfigurator&quot;</span>
</span><span class='line'><span class="cm"> *       }</span>
</span><span class='line'><span class="cm"> *     }</span>
</span><span class='line'><span class="cm"> *   }</span>
</span><span class='line'><span class="cm"> * }</span>
</span><span class='line'><span class="cm"> * }}}</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Credits to James Roper for the [[https://github.com/jroper/thread-local-context-propagation/ initial implementation]]</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MDCPropagatingDispatcherConfigurator</span><span class="o">(</span><span class="n">config</span><span class="k">:</span> <span class="kt">Config</span><span class="o">,</span> <span class="n">prerequisites</span><span class="k">:</span> <span class="kt">DispatcherPrerequisites</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">MessageDispatcherConfigurator</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">prerequisites</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">instance</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MDCPropagatingDispatcher</span><span class="o">(</span>
</span><span class='line'>    <span class="k">this</span><span class="o">,</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">getString</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">getInt</span><span class="o">(</span><span class="s">&quot;throughput&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="nc">FiniteDuration</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="n">getDuration</span><span class="o">(</span><span class="s">&quot;throughput-deadline-time&quot;</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">NANOSECONDS</span><span class="o">),</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">NANOSECONDS</span><span class="o">),</span>
</span><span class='line'>    <span class="n">configureExecutor</span><span class="o">(),</span>
</span><span class='line'>    <span class="nc">FiniteDuration</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="n">getDuration</span><span class="o">(</span><span class="s">&quot;shutdown-timeout&quot;</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">MILLISECONDS</span><span class="o">),</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="nc">MILLISECONDS</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">dispatcher</span><span class="o">()</span><span class="k">:</span> <span class="kt">MessageDispatcher</span> <span class="o">=</span> <span class="n">instance</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A MDC propagating dispatcher.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This dispatcher propagates the MDC current request context if it&#39;s set when it&#39;s executed.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MDCPropagatingDispatcher</span><span class="o">(</span><span class="nc">_configurator</span><span class="k">:</span> <span class="kt">MessageDispatcherConfigurator</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">id</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">throughput</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">throughputDeadlineTime</span><span class="k">:</span> <span class="kt">Duration</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">executorServiceFactoryProvider</span><span class="k">:</span> <span class="kt">ExecutorServiceFactoryProvider</span><span class="o">,</span>
</span><span class='line'>                               <span class="n">shutdownTimeout</span><span class="k">:</span> <span class="kt">FiniteDuration</span><span class="o">)</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">Dispatcher</span><span class="o">(</span><span class="nc">_configurator</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">throughput</span><span class="o">,</span> <span class="n">throughputDeadlineTime</span><span class="o">,</span> <span class="n">executorServiceFactoryProvider</span><span class="o">,</span> <span class="n">shutdownTimeout</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">self</span> <span class="k">=&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">prepare</span><span class="o">()</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ExecutionContext</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// capture the MDC</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">mdcContext</span> <span class="k">=</span> <span class="nc">MDC</span><span class="o">.</span><span class="n">getCopyOfContextMap</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">execute</span><span class="o">(</span><span class="n">r</span><span class="k">:</span> <span class="kt">Runnable</span><span class="o">)</span> <span class="k">=</span> <span class="n">self</span><span class="o">.</span><span class="n">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">def</span> <span class="n">run</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// backup the callee MDC context</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">oldMDCContext</span> <span class="k">=</span> <span class="nc">MDC</span><span class="o">.</span><span class="n">getCopyOfContextMap</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Run the runnable with the captured context</span>
</span><span class='line'>        <span class="n">setContextMap</span><span class="o">(</span><span class="n">mdcContext</span><span class="o">)</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">r</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// restore the callee MDC context</span>
</span><span class='line'>          <span class="n">setContextMap</span><span class="o">(</span><span class="n">oldMDCContext</span><span class="o">)</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">reportFailure</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span> <span class="n">self</span><span class="o">.</span><span class="n">reportFailure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">def</span> <span class="n">setContextMap</span><span class="o">(</span><span class="n">context</span><span class="k">:</span> <span class="kt">java.util.Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MDC</span><span class="o">.</span><span class="n">clear</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MDC</span><span class="o">.</span><span class="n">setContextMap</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using a custom Akka dispatcher everywhere:</h4>

<p>To use this custom Akka dispatcher everywhere, we just have to configure it:</p>

<figure class='code'><figcaption><span>application.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>play <span class="o">{</span>
</span><span class='line'>  akka <span class="o">{</span>
</span><span class='line'>    actor <span class="o">{</span>
</span><span class='line'>      default-dispatcher <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="nb">type</span> <span class="o">=</span> <span class="s2">&quot;monitoring.MDCPropagatingDispatcherConfigurator&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and that&rsquo;s all! ;)</p>

<p>The MDC context is propagated when we use the play default <a href="https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.libs.concurrent.Execution$"><code>ExecutionContext</code></a>.</p>

<h4>Optimization</h4>

<p>So that this approach works in dev mode, simply make a library (jar) of this custom Akka dispatcher and add this as dependency in your play application.</p>

<h2>Second solution with a custom execution context</h2>

<h4>Defining a custom execution context</h4>

<p>The dispatching of the jobs on different threads in done with an <code>ExecutionContext</code>. Each <code>ExecutionContext</code> manages a <a href="https://www.playframework.com/documentation/latest/ThreadPools">thread pool</a>.</p>

<p>To use the MDC, we just have to use a custom <code>ExecutionContext</code> that propagates the MDC from the caller&rsquo;s thread to the callee&rsquo;s one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.slf4j.MDC</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">ExecutionContextExecutor</span><span class="o">,</span> <span class="nc">ExecutionContext</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * slf4j provides a MDC [[http://logback.qos.ch/manual/mdc.html Mapped Diagnostic Context]]</span>
</span><span class='line'><span class="cm"> * based on a [[ThreadLocal]]. In an asynchronous environment, the callbacks can be called</span>
</span><span class='line'><span class="cm"> * in another thread, where the local thread variable does not exist anymore.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This execution context fixes this problem:</span>
</span><span class='line'><span class="cm"> * it propagates the MDC from the caller&#39;s thread to the callee&#39;s one.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">MDCHttpExecutionContext</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Create an MDCHttpExecutionContext with values from the current thread.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">fromThread</span><span class="o">(</span><span class="n">delegate</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">ExecutionContextExecutor</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">MDCHttpExecutionContext</span><span class="o">(</span><span class="nc">MDC</span><span class="o">.</span><span class="n">getCopyOfContextMap</span><span class="o">,</span> <span class="n">delegate</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Manages execution to ensure that the given MDC context are set correctly</span>
</span><span class='line'><span class="cm"> * in the current thread. Actual execution is performed by a delegate ExecutionContext.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MDCHttpExecutionContext</span><span class="o">(</span><span class="n">mdcContext</span><span class="k">:</span> <span class="kt">java.util.Map</span><span class="o">[</span><span class="k">_</span>, <span class="k">_</span><span class="o">],</span> <span class="n">delegate</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">ExecutionContextExecutor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">execute</span><span class="o">(</span><span class="n">runnable</span><span class="k">:</span> <span class="kt">Runnable</span><span class="o">)</span> <span class="k">=</span> <span class="n">delegate</span><span class="o">.</span><span class="n">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">oldMDCContext</span> <span class="k">=</span> <span class="nc">MDC</span><span class="o">.</span><span class="n">getCopyOfContextMap</span>
</span><span class='line'>      <span class="n">setContextMap</span><span class="o">(</span><span class="n">mdcContext</span><span class="o">)</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setContextMap</span><span class="o">(</span><span class="n">oldMDCContext</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">def</span> <span class="n">setContextMap</span><span class="o">(</span><span class="n">context</span><span class="k">:</span> <span class="kt">java.util.Map</span><span class="o">[</span><span class="k">_</span>, <span class="k">_</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MDC</span><span class="o">.</span><span class="n">clear</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">MDC</span><span class="o">.</span><span class="n">setContextMap</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">reportFailure</span><span class="o">(</span><span class="n">t</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span> <span class="n">delegate</span><span class="o">.</span><span class="n">reportFailure</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can define the default ExecutionContext in our application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">concurrent</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The standard [[play.api.libs.concurrent.Execution.defaultContext]] loses the MDC context.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This custom [[ExecutionContext]] propagates the MDC context, so that the request</span>
</span><span class='line'><span class="cm"> * and the correlation IDs can be logged.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Execution</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">object</span> <span class="nc">Implicits</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">def</span> <span class="n">defaultContext</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="nc">Execution</span><span class="o">.</span><span class="n">defaultContext</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">defaultContext</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="nc">MDCHttpExecutionContext</span><span class="o">.</span><span class="n">fromThread</span><span class="o">(</span><span class="n">play</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">libs</span><span class="o">.</span><span class="n">concurrent</span><span class="o">.</span><span class="nc">Execution</span><span class="o">.</span><span class="n">defaultContext</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we will use the <code>concurrent.Execution.defaultContext</code> instead of the one from play (<code>play.api.libs.concurrent.Execution.defaultContext</code>)</p>

<h4>Using a custom execution context everywhere</h4>

<p>Using a custom execution context is sometimes as easy as replacing
<code>import play.api.libs.concurrent.Execution.Implicits._</code> with <code>import concurrent.Execution.Implicits._</code></p>

<p>The default <a href="https://www.playframework.com/documentation/latest/ScalaActions"><code>Action</code></a> uses the default <code>play.api.libs.concurrent.Execution.defaultContext</code>.
We must define a custom <code>ActionBuilder</code> that uses our new <code>ExecutionContext</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Action</span> <span class="k">extends</span> <span class="nc">ActionBuilder</span><span class="o">[</span><span class="kt">Request</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">invokeBlock</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">request</span><span class="k">:</span> <span class="kt">Request</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">block</span><span class="k">:</span> <span class="o">(</span><span class="kt">Request</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">SimpleResult</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">block</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * The standard [[play.api.mvc.Action]] loses the MDC context.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * This action builder sets the [[ExecutionContext]] so that the</span>
</span><span class='line'><span class="cm">   * MDC context is propagated.</span>
</span><span class='line'><span class="cm">   * With this custom [[ExecutionContext]], the request and the correlation IDs</span>
</span><span class='line'><span class="cm">   * can be logged.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">executionContext</span><span class="k">:</span> <span class="kt">ExecutionContext</span> <span class="o">=</span> <span class="nc">Execution</span><span class="o">.</span><span class="n">defaultContext</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of using of <code>play.api.mvc.Action</code>, we just have to use the newly defined <code>controllers.Action</code>.</p>

<p>With each of these customizations, we are now able to use the Mapped Diagnostic Context (MDC) with asynchronous actions written in Scala.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Side Rendering for JavaScript ReactJS Framework]]></title>
    <link href="http://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework/"/>
    <updated>2014-03-15T09:44:00+01:00</updated>
    <id>http://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework</id>
    <content type="html"><![CDATA[<h2>Flicker effect with JavaScript applications</h2>

<p>A lot of web applications are nowadays build with a JavaScript framework, rendering the HTML in the browser (client side).
There are a few reasons for this, like:</p>

<ul>
<li>avoiding server-browser round-trips to modify one HTML element</li>
<li>it is easier to keep the server side stateless if you maintain the state in the browser</li>
<li>the server can expose a public REST API for partners. And your own JavaScript application can use this API, encouraging <a href="http://en.wikipedia.org/wiki/Eating_your_own_dog_food">eating our own dog food</a></li>
</ul>


<p>Building a client side JavaScript application is not always easy for teams used to server side code, and a few frameworks can help there, like <a href="http://angularjs.org/">AngularJS</a>, <a href="http://emberjs.com/">Ember</a> or <a href="http://facebook.github.io/react/">React</a></p>

<p>We will look at an <a href="http://play-react.herokuapp.com/clientSide">example with React</a></p>

<p>To display the HTML, a few steps are needed:</p>

<ol>
<li><p>The browser loads HTML, CSS and JavaScript.<br>
It displays the HTML delivered directly by the server.<br>
 <img src="http://yanns.github.io/assets/2014-03-15/server.png" alt="The browser shows the HTML coming from the server" /></p>

<p> With AngularJS, if <a href="http://docs.angularjs.org/guide/expression">inline expression</a> are used, the user can see the following for a few milliseconds:<br/>
 hello {{firstname}}<br/>
 before AngularJS replaces this expression with its computed value.</p></li>
<li><p>The JavaScript framework manipulates the DOM and the user can then see the application.
 <img src="http://yanns.github.io/assets/2014-03-15/server_and_client.png" alt="The JavaScript application has changed the DOM" /></p></li>
<li><p>If the application needs to display some data from the server, it must first request it with Ajax. The data is displayed only after being received by the browser.
 <img src="http://yanns.github.io/assets/2014-03-15/server_and_client_and_data.png" alt="The JavaScript application has received data and changed the DOM accordingly" /></p></li>
</ol>


<p>(to make the <a href="http://play-react.herokuapp.com/clientSide">flicker</a> more visible, I introduced a latency of 500 ms to simulate a slow backend)</p>

<p>The user experience is not optimal. The application flickers at each step, as the DOM is changed several times in a few seconds.</p>

<h2>Avoiding the flicker effect</h2>

<h3>On the client side</h3>

<p>In the browser, we can mitigate the flicker effect.
Some applications show a spinner as long as the page is not ready to be shown.
The not-yet-completed DOM is hidden before being shown in one final step.</p>

<p>For example, AngularJS provides the <a href="http://docs.angularjs.org/api/ng/directive/ngCloak">ng-cloak directive</a>.
With this directive, AngularJS can hide the HTML as long as it is not ready.</p>

<h3>Welcome back to server side rendering</h3>

<p>Instead of rendering everything in the browser, it is also possible to first render the page on the server side, serve it when ready, and when updating it on the client side when necessary.</p>

<p>(Please notice that this technic allows the HTML to be indexed for search engines that do not execute the JavaScript.)</p>

<p>From example, React can render a UI component without any browser with <a href="http://facebook.github.io/react/docs/top-level-api.html#react.rendercomponenttostring">React.renderComponentToString</a>.</p>

<p>With this function, the complete page can be prepared on the server side, send under this form to the browser that can directly display the ready application. On the client side, the same JavaScript code can dynamically manipulate this DOM as a normal client side application.</p>

<p>The <a href="https://github.com/mhart/react-server-example">React server rendering example</a> demonstrates how to use React&rsquo;s server rendering capabilities. Rendering a JavaScript application on the server side is technically possible because the JavaScript is executed by <a href="http://nodejs.org/">Node.js</a>.</p>

<h3>And what about the JVM?</h3>

<p>If you are not using NodeJS, but the Java Virtual Machine (JVM), you might be disappointed at this time.
Pre-render a JavaScript application is only possible with Node.js?</p>

<p>In Java, there are a few projects that can save us:</p>

<ul>
<li><p><a href="https://github.com/apigee/trireme">trireme</a> provides a Node.js API and can run node.js scripts inside Java. It uses Rhino, the current JavaScript implementation for the JVM. (With Java 8, let&rsquo;s see if trireme will use the new JavaScript implementation, Nashorn, or whether Nashorn will implement the node.js API itself.)</p></li>
<li><p><a href="https://github.com/typesafehub/js-engine">js-engine</a> provides <a href="http://akka.io/">Akka Actors</a> to execute JavaScript code with trireme or with node.js</p></li>
</ul>


<p>As a proof of concept, I implemented a little play application that uses these projects to pre-render a React component on the server side.</p>

<p>The JavaScript is loaded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">serverside</span> <span class="k">=</span> <span class="nc">Play</span><span class="o">.</span><span class="n">getFile</span><span class="o">(</span><span class="s">&quot;public/javascripts/serverside.js&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>An actor is created for a JavaScript engine (trireme or node.js)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">engine</span> <span class="k">=</span> <span class="nc">Akka</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="n">jsEngine</span><span class="o">,</span> <span class="n">s</span><span class="s">&quot;engine-${request.id}&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We receive the data from the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">data</span> <span class="k">&lt;-</span> <span class="n">initialData</span>
</span></code></pre></td></tr></table></div></figure>


<p>and let the JavaScript code execute with that data as parameter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">result</span> <span class="k">&lt;-</span> <span class="o">(</span><span class="n">engine</span> <span class="o">?</span> <span class="nc">Engine</span><span class="o">.</span><span class="nc">ExecuteJs</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">serverside</span><span class="o">.</span><span class="n">toURI</span><span class="o">),</span> <span class="nc">List</span><span class="o">(</span><span class="n">data</span><span class="o">))).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">JsExecutionResult</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is send to the browser</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="nc">Html</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">toArray</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>complete controller code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="c1">// with js-engine</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">serverSideTrireme</span> <span class="k">=</span> <span class="n">serverSideWithJsEngine</span><span class="o">(</span><span class="nc">Trireme</span><span class="o">.</span><span class="n">props</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// with node</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">serverSideNode</span> <span class="k">=</span> <span class="n">serverSideWithJsEngine</span><span class="o">(</span><span class="nc">Node</span><span class="o">.</span><span class="n">props</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">serverSideWithJsEngine</span><span class="o">(</span><span class="n">jsEngine</span><span class="k">:</span> <span class="kt">Props</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">.</span><span class="n">async</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">akka.pattern.ask</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">serverside</span> <span class="k">=</span> <span class="nc">Play</span><span class="o">.</span><span class="n">getFile</span><span class="o">(</span><span class="s">&quot;public/javascripts/serverside.js&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mf">5.</span><span class="n">seconds</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">engine</span> <span class="k">=</span> <span class="nc">Akka</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="n">jsEngine</span><span class="o">,</span> <span class="n">s</span><span class="s">&quot;engine-${request.id}&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">data</span> <span class="k">&lt;-</span> <span class="n">initialData</span>
</span><span class='line'>      <span class="n">result</span> <span class="k">&lt;-</span> <span class="o">(</span><span class="n">engine</span> <span class="o">?</span> <span class="nc">Engine</span><span class="o">.</span><span class="nc">ExecuteJs</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">serverside</span><span class="o">.</span><span class="n">toURI</span><span class="o">),</span> <span class="nc">List</span><span class="o">(</span><span class="n">data</span><span class="o">))).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">JsExecutionResult</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="nc">Html</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">toArray</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">))))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code <code>serverside.js</code> uses the <a href="http://nodejs.org/api/modules.html#modules_module_require_id">node.js modules API</a> to render our main component (CommentBox).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./react&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">CommentBox</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./CommentBox&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It then loads the data given as first parameter in the controller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// take data from parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It renders the CommentBox component to a String and output it to console.log so that the Scala controller can receive the result with <code>result.output.toArray</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">React</span><span class="p">.</span><span class="nx">renderComponentToString</span><span class="p">(</span><span class="nx">CommentBox</span><span class="p">(</span><span class="nx">backend</span><span class="p">)({</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">onServerSide</span><span class="o">:</span> <span class="kc">true</span><span class="p">})));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Complete code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./react&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">CommentBox</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./CommentBox&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// take data from parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">backend</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">loadCommentsFromServer</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleCommentSubmit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">React</span><span class="p">.</span><span class="nx">renderComponentToString</span><span class="p">(</span><span class="nx">CommentBox</span><span class="p">(</span><span class="nx">backend</span><span class="p">)({</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">onServerSide</span><span class="o">:</span> <span class="kc">true</span><span class="p">})));</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://play-react.herokuapp.com/serverSide">This page</a> does not flicker anymore compared to the <a href="http://play-react.herokuapp.com/clientSide">first version</a>.</p>

<h3>Drawback with server side rendering</h3>

<p>The drawback with pre-rendering the page on the server side is that we have to wait to have all the data before sending the page.
In the <a href="http://play-react.herokuapp.com/serverSide">sample application</a>, I introduced a latency when requesting the data to simulate a slow database.</p>

<p>The browser must also wait long before getting any HTML. The following diagram shows that the application (deployed on Heroku) needs more than one second to deliver the page!
<img src="http://yanns.github.io/assets/2014-03-15/wait_for_server.png" alt="The browser is waiting for the server" /></p>

<h3>Can we optimize more?</h3>

<p>We can optimize this version by sending the first bytes of the HTML page before having any data.
When the data is there, we can send the rest of the page.</p>

<p>With <a href="http://play-react.herokuapp.com/serverSideStream">that variant</a>, we can include the CSS and part of the JavaScript in the &lt;HEAD> section of the HTML page.
The browser receives this information very quickly and can begin downloading these assets.
The server lets the connection open and when the rest of the page is ready, it is send to the browser.</p>

<p><img src="http://yanns.github.io/assets/2014-03-15/browser_loads_assets.png" alt="The browser can load the CSS and JavaScript" /></p>

<p>To implement this, I used the Facebook’s BigPipe concept as presented in the <a href="http://de.slideshare.net/brikis98/composable-and-streamable-play-apps">talk “Building composable, streaming, testable Play apps” from Yevgeniy Brikman</a></p>

<p>It is not a &ldquo;Silver Bullet&rdquo; as we are still waiting for the data before displaying it to the user (that makes sense).
But the browser can load the stylesheets, the JavaScripts very quickly, leading to a more responsive page.</p>

<h2>Integrate Play and trireme</h2>

<p>To resolve node.js modules, trireme needs to access the JavaScripts directly on the file system.
But Play Framework package all the public assets in the jar, making the JavaScript assets not available with <a href="http://www.playframework.com/documentation/2.2.x/api/scala/index.html#play.api.Play$">Play.getFile</a></p>

<p>It would be easier if trireme would use a <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileSystem.html">FileSystem</a> object, but this API is only available from Java 7.</p>

<p>To wordaround this, I configured the <a href="https://github.com/sbt/sbt-native-packager">SBT Universal plugin</a> to deploy the public assets to the file system:</p>

<ul>
<li>in build.sbt:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">PublicOnFileSystem</span><span class="o">.</span><span class="n">settings</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>project/PublicOnFileSystem.scala</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">sbt._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">sbt.Keys._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.Keys.playAssetsDirectories</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.typesafe.sbt.SbtNativePackager._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">PublicOnFileSystem</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">settings</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>    <span class="n">mappings</span> <span class="n">in</span> <span class="nc">Universal</span> <span class="o">&lt;++=</span> <span class="n">playAssetsDirectories</span> <span class="n">map</span> <span class="o">{</span> <span class="n">directories</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">File</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">directories</span><span class="o">.</span><span class="n">flatMap</span> <span class="o">{</span> <span class="n">dir</span><span class="k">:</span> <span class="kt">File</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">directoryLen</span> <span class="k">=</span> <span class="n">dir</span><span class="o">.</span><span class="n">getCanonicalPath</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">pathFinder</span> <span class="k">=</span> <span class="n">dir</span> <span class="o">**</span> <span class="s">&quot;*&quot;</span>
</span><span class='line'>        <span class="n">pathFinder</span><span class="o">.</span><span class="n">get</span> <span class="n">map</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">publicFile</span><span class="k">:</span> <span class="kt">File</span> <span class="o">=&gt;</span>
</span><span class='line'>            <span class="n">publicFile</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="s">&quot;public/&quot;</span> <span class="o">+</span> <span class="n">publicFile</span><span class="o">.</span><span class="n">getCanonicalPath</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="n">directoryLen</span><span class="o">))</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I personaly think that we will more and more use JavaScript even on the server side.
Projects like <a href="http://vertx.io/">Vert.x</a> are interesting because they support this from the beginning.
With Play Framework on the JVM, there is currently <a href="http://openjdk.java.net/projects/nashorn/">a</a> <a href="https://github.com/typesafehub/webdriver">lot</a> <a href="https://github.com/typesafehub/js-engine">of</a> <a href="https://github.com/sbt/sbt-web">effort</a> <a href="http://www.webjars.org/">put</a> to support that.</p>

<p>This proof of concept shows that it is already possible to achieve that.
And I guess it will be even easier in the future.</p>

<p>If you need more information, the <a href="https://github.com/yanns/play-react">code is available on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ping Conf 2014]]></title>
    <link href="http://yanns.github.io/blog/2014/02/17/ping-conf-2014/"/>
    <updated>2014-02-17T16:49:00+01:00</updated>
    <id>http://yanns.github.io/blog/2014/02/17/ping-conf-2014</id>
    <content type="html"><![CDATA[<p>In January, I had the pleasure to participate and give a talk at the <a href="http://www.ping-conf.com/">ping conf</a>.</p>

<p>Ping conf was the first world wide community conference about the <a href="http://www.playframework.com/">Play Framework!</a>.</p>

<p>This conference was very well organized. I&rsquo;d like to thank all the organizers one more time for this.
It was a good opportunity to meet people I only knew online from the mailing list or on twitter.</p>

<p>The talks were very interesting. Some notices:</p>

<h4>&ldquo;Javascript functionality coming to Play 2.3&rdquo; from <a href="https://twitter.com/huntchr">Christopher Hunt</a></h4>

<p>Typesafe take the JavaScript build chain very seriously and the new <a href="https://github.com/sbt/sbt-web">sbt-web</a> offers a lot of new functionalities.
IMO, one of the most important is the possibility to use NodeJS as JavaScript engine. The performance of the JavaScript build pipeline in Play is similar or even better than the ones based on NodeJS (like Grunt or Gulp)<br/>
<a href="http://huntc.github.io/sbt-web-presentation/#/step-1">slides</a></p>

<h4>&ldquo;Typesafing your blobs with Scala&rdquo; from <a href="https://twitter.com/skaalf">Julien Tournay</a> and <a href="https://twitter.com/mandubian/">Pascal Voitot</a></h4>

<p>Julien and Pascal show us the new <a href="https://github.com/jto/Play20/tree/new_validation_api/documentation/manual/scalaGuide/main/validation">validation API</a>, unifying the Form and JSON validation.
This new API should appear in Play 2.3.<br/>
<a href="http://jto.github.io/articles/play_new_validation_api/">More info</a><br/>
<a href="https://docs.google.com/presentation/d/1bc4437zIO3dUD0cYoSFDbNjrSErY3soURfE5QUErbgw/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.g11c889a6e_23">slides</a></p>

<h4>&ldquo;Writing a reactive web app with Scala.js and ReactJS&rdquo; from <a href="https://twitter.com/matthiasnehlsen">Matthias Nehlsen</a></h4>

<p>Matthias, famous for his <a href="http://matthiasnehlsen.com/">blog</a> and his <a href="http://birdwatch.matthiasnehlsen.com/">realtime reactive tweet analysing application</a> talked about the <a href="http://facebook.github.io/react/">ReactJS UI library</a> combined with <a href="http://www.scala-js.org/">ScalaJS</a>.
These two tools can be well combined. ReactJS like immutable data structure, that ScalaJS can provide.</p>

<h4>&ldquo;Play2 and Redis : when simplicity meets productivity&rdquo; from <a href="https://twitter.com/nmartignole">Nicolas Martignole</a></h4>

<p>Nicolas talked about his experience with Redis and Play. This combination is looking very simple and performant.</p>

<h4>&ldquo;Building composable, streaming, testable Play apps&rdquo; from <a href="https://twitter.com/brikis98">Yevgeniy Brikman</a></h4>

<p>The &ldquo;Jim&rdquo; from LinkedIn talked about how to compose web pages together, using the <a href="https://www.facebook.com/note.php?note_id=389414033919">Facebook&rsquo;s BigPipe concept</a>.
Very interesting way to decompose a web site into small web components.<br/>
<a href="http://de.slideshare.net/brikis98/composable-and-streamable-play-apps">slides</a></p>

<h4>&ldquo;Play is for Performance&rdquo; from <a href="https://twitter.com/jroper">James Roper</a>, tech lead for Play! framework</h4>

<p>Very interesting talk about how to optimize (or not) an asynchronous Play! application.<br/>
<a href="https://github.com/jroper/play-is-for-performance">slides as Play! application</a> (simply check it out and start the Play! application, it is very impressive)</p>

<h4>&ldquo;Making the case for Play&rdquo; from <a href="https://twitter.com/ajevans85">Adam Evans</a> and <a href="https://twitter.com/asherglynn">Asher Glynn</a>, BBC</h4>

<p>Adam and Asher talked about pushing change within an organization like the BBC, how they introduced the Play Framework!<br/>
<a href="http://pt.slideshare.net/ajevans/making-the-30191542">slides</a></p>

<h4><a href="https://twitter.com/grantklopper">Grant Klopper</a>, Software engineer at The Guardian.</h4>

<p>Grant made a change during the talk and push it into production, very impressive.</p>

<h4><a href="https://twitter.com/tobnee">Tobias Neef</a></h4>

<p>Tobias talk about action composition and filter in Play, when to use the first ones and when to use the others.</p>

<h4>&ldquo;Async: Reacting instead of waiting for better times&rdquo; from <a href="https://twitter.com/apnylle">Johan Andrén</a></h4>

<p>Johan talk about asynchronous programming and how it works with Play. A very good introduction!<br/>
<a href="http://de.slideshare.net/johanandren/async-react-dont-wait-ping-conf">slides</a></p>

<hr/>


<p>My talk was about &ldquo;Structure your Play application with the cake pattern (and test it)&rdquo;</p>

<p>I talked about how to organize a Play! application written in Scala into components with the cake pattern.
The main goal of these components is to encaspulate and expose services only to others components, and to declare dependencies if needed.</p>

<p>As a side effect, the cake pattern allows to inject dependencies at compile time.
A particularity of this &ldquo;dependency injection&rdquo; mechanism is that it does not need any container like Spring or Guice at runtime.</p>

<p><a href="http://www.ustream.tv/recorded/42775808">Video of my talk &ldquo;Structure your Play application with the cake pattern (and test it)&rdquo;</a><br/>
<a href="http://de.slideshare.net/yann_s/play-withcake-export2">slides</a></p>

<p>I had great feedbacks, like these ones:<br/></p>

<blockquote><p>Leanovate Software Engineer Yann Simon gives the best presentation on the cake pattern I’ve ever seen.</p><footer><strong>Gilt,</strong> <cite><a href='http://tech.gilt.com/post/74733533436/a-few-things-about-ping-a-play-framework-conference'>tech.gilt.com/post/74733533436/&hellip;</a></cite></footer></blockquote>


<blockquote><p>it was great that Yann pointed out the disadvantages as well every step along the way and made it clear how far it’s worth going in various cases.</p><footer><strong>Csaba Palfi,</strong> <cite><a href='http://csaba.palfi.me/ping-conf-day-1/'>csaba.palfi.me/ping-conf-day-1/&hellip;</a></cite></footer></blockquote>


<blockquote><p>Currently talking, is astounding the audience with live baking an application, slam dunk videos feat. Sulley - of Monsters fame - and hand drawn presentation slides!</p><footer><strong>kinja,</strong> <cite><a href='http://pingconference.kinja.com/yann-simon-1502530900'>pingconference.kinja.com/&hellip;</a></cite></footer></blockquote>


<blockquote><p>All this was presented using funny monster videos and a French-German accent.</p><footer><strong>Marius Soutier,</strong> <cite><a href='http://www.mariussoutier.com/blog/2014/01/20/ping-conference-play-edition-day-1/'>www.mariussoutier.com/blog/2014/&hellip;</a></cite></footer></blockquote>




<blockquote class="twitter-tweet" lang="en"><p>the infamous Totoro-defense! <a href="https://twitter.com/search?q=%23pingconf&amp;src=hash">#pingconf</a> <a href="http://t.co/EnJhauj8tw">pic.twitter.com/EnJhauj8tw</a></p>&mdash; serif (@_serif) <a href="https://twitter.com/_serif/statuses/423793818857930752">January 16, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Thanks everybody!</p>

<hr/>


<p>Some people saw that I was using my phone to controll the slideshow during the talk and asked me how I did that.
I was simply using <a href="https://www.libreoffice.org/">LibreOffice Impress</a> for my slides. I controlled the slideshow with <a href="https://play.google.com/store/apps/details?id=org.libreoffice.impressremote&amp;hl=en">Impress Remote app</a> installed on my phone.
It works very well. The app displays the duration of your talk, the current, previous and next slide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOpsDays Berlin 2013]]></title>
    <link href="http://yanns.github.io/blog/2013/05/08/devopsdays-berlin-2013/"/>
    <updated>2013-05-08T12:47:00+02:00</updated>
    <id>http://yanns.github.io/blog/2013/05/08/devopsdays-berlin-2013</id>
    <content type="html"><![CDATA[<p>direct from DevOpsDay Berlin 2013, my notices:</p>

<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/program/">Program</a>
<a target="_blank" href="http://new.livestream.com/accounts/4051563">Videos</a></p>

<h2 id="day1"><a href="#day1">Day #1</a></h2>


<p>From the <a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/DevOps3.0/">presentation from Immobilienscout</a> &ndash; <i>Marcel Wolf, <a target="_blank" href="https://twitter.com/felixsperling">Felix Sperling</a></i></p>

<ul>
    <li>Dev AM rotation: exchange between Dev and Ops</li>
    <li>Self service VM</li>
    <li>unique configuration server, accessible to anyone</li>
</ul>


<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/DevOps3.0/">DevTools team at Etsy</a> &ndash; <a target="_blank" href="https://twitter.com/mrtazz">Daniel Schauenberg</a></p>

<ul>
    <li><a target="_blank" href="http://fr.slideshare.net/mrtazz/devtools-at-etsy">Slides</a></li>
    <li><a target="_blank" href="https://github.com/etsy/deployinator">deployinator</a></li>
    <li>Each new employee should deploy on her first day.</li>
    <li><a target="_blank" href="http://lxc.sourceforge.net/">LXC container</a> for tests</li>
    <li>Statistics with <a target="_blank" href="https://github.com/etsy/statsd/">statsd</a>, <a target="_blank" href="https://github.com/etsy/logster">logster</a> and <a target="_blank" href="http://graphite.wikidot.com/">graphite</a></li>
    <li>Log streamer with <a target="_blank" href="https://github.com/etsy/supergrep">supergrep</a></li>
    <li><a target="_blank" href="https://github.com/etsy">Open Source projects</a></li>
</ul>




<h2 id="day2"><a href="#day2">Day #2</a></h2>


<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/How%20the%20QA%20team%20got%20Prezi%20ready%20for%20DevOps/">How the QA team got Prezi ready for DevOps</a> &ndash; <a target="_blank" href="https://twitter.com/pneumark">Peter Neumark</a></p>

<ul>
    <li><a target="_blank" href="http://prezi.com/qmrekeeqqvyf/how-the-qa-team-got-prezi-ready-for-devops/">presentation</a></li>
    <li>Like the <a target="_blank" href="https://twitter.com/simon_yann/status/339462592315682816/photo/1">error handling</a>: &#8220;When blame inevitably arises, the most senior people in the room should repeat this mantra: if a mistake happens, shame on us for making it so easy to make that mistake&#8221;. Very similar to risk management culture.</li>
</ul>


<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/Podularity%20FTW/">Podularity FTW!</a> &ndash; <a target="_blank" href="https://twitter.com/tlossen">Tim Lossen</a></p>

<ul>
    <li><a target="_blank" href="http://fr.slideshare.net/tim.lossen.de/podularity-ftw">slides</a></li>
    <li>team = autonomous cell (even technological stack, product&#8230;)</li>
    <li>The organization is a supercell, bindings autonomous cells together.</li>
    <li><a target="_blank" href="https://twitter.com/simon_yann/status/339461227552047104/photo/1">Lunch roulette</a></li>
    <li>Interesting question from the audience about the business continuity: if each team can choose its technological stack, is not it a problem then the team change, and when the new members do not know the new stack he is working with? Tim answered that it was indeed a problem the organization though of, but in practice, it never happened.<br/>I like this approach that I could try to summarize like this: do not spend your time trying to avoid problems, but solve real problem that exist.</li>
</ul>


<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/How%20we%20built%20and%20deployed%20the%20Honshu%20way/">Island Life: How we built and deployed the Honshū way</a> &ndash; Wes Mason</p>

<ul>
    <li>from one monolith app to several islands like components</li>
</ul>




<h2 id="other-notices"><a href="#other-notices">Other notices:</a></h2>


<ul>
    <li><a target="_blank" href="http://hubot.github.com/">robot for chat room</a> to post more information</li>
    <li>secrets are hard to deploy in a secure way</li>
    <li>distributed file system: <a target="_blank" href="http://ceph.com/">ceph</a><br/>more info: <a target="_blank" href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.110.4574&rep=rep1&type=pdf">Ceph: A scalable, high-performance distributed file system (2006)</a>
</li>
    <li><a target="_blank" href="http://www.docker.io/">doker.io</a> to manage linux containers. The demo was impressive, deploying one version and then another one in a few minutes.</li>
    <li>Discussion with <a target="_blank" href="http://www.gutefrage.net/">gutefrage.net</a> who use Scala / <a target="_blank" href="https://github.com/twitter/finagle">Finagle</a> with <a target="_blank" href="http://thrift.apache.org/">Thrift</a>.<br>Storage of statistics with <a target="_blank" href="http://opentsdb.net/">OpenTSDB</a></li>
    <li><a target="_blank" href="http://zeroturnaround.com/software/liverebel/">LiveRebel</a>: ZeroTurnaround made a presentation of LiveRebel<br/>
LiveRebel contains some versions of the application.<br/>
These versions can be uploaded, manually or automatically (maven plugin, command line tool&#8230;)<br/><br/>
Then LiveRebel can deploy a specific version on production (or staging&#8230;)<br/>
For this, an agent is running on each server.<br/><br/>
LiveRebel can deploy to one server, check it with some configured smoke test.<br/>
If the test is successful, the server is activated on the cluster, and the deployment process continues with the next server.<br/><br/>
Liquibase is used to deploy a version to a database.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[G+ or Blog?]]></title>
    <link href="http://yanns.github.io/blog/2012/08/20/g-plus-or-blog/"/>
    <updated>2012-08-20T06:17:00+02:00</updated>
    <id>http://yanns.github.io/blog/2012/08/20/g-plus-or-blog</id>
    <content type="html"><![CDATA[<p>Why having opened a blog, while I regularly post on G+?</p>

<p>I like posting on G+, it fells spontaneous.</p>

<p>But I felt frustrated about the formatting possibilities on G+, especially for code.
I&rsquo;ve also opened this blog to experiment a new possibility.
It is possible that I move this blog to another platform if I am not happy with it.</p>

<p>To reduce the gap with G+, I compiled some of my posts:</p>

<ul>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/QgyUF9cXPkv">Using LESS CSS with Play! framework 2</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/RxohCRp52J5">Starting staged Play application under windows</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/LKjmmANJBNo">And starting staged Play application as linux service</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/6RUZaCxYi7V">Why using google chrome frame?</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/YvB97rnbSiG">Reverse routing in javascript with Play!</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/PpRUjgHhXzK">Finding who deleted this function with GIT</a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Data Streams With Play2 and Server-Send Events]]></title>
    <link href="http://yanns.github.io/blog/2012/08/12/handling-data-streams-with-play2-and-server-send-events/"/>
    <updated>2012-08-12T09:42:00+02:00</updated>
    <id>http://yanns.github.io/blog/2012/08/12/handling-data-streams-with-play2-and-server-send-events</id>
    <content type="html"><![CDATA[<h2 id="Handling-data-streams"><a href="#Handling-data-streams">Handling data streams</a></h2>


<p>As the version 2 of Play! Framework was published, I was very interested in its new capabilities to handle data streams reactively.<br/>
As a technical proof of concept, I wrote a parser that works with chunks of data instead of loading the whole content in memory.
My source was a file containing the geographical coordinates of Wikipedia articles.<br/>
(This file is the result of an experience of Triposo, showing how Wikipedia has spread over the planet since the start of the Wikipedia project. Do not forget to watch the other labs from Triposo, they are great!)<br/></p>

<p>Play2 architecture is based on event, and gives us some tools to work with streams of data:</p>

<ul>
    <li><a target="_blank" href="http://www.playframework.com/documentation/2.2.x/Enumerators">Enumerators</a> produce chunk of data</li>
    <li><a target="_blank" href="http://www.playframework.com/documentation/2.2.x/Enumeratees">Enumeratees</a> transform these chunks</li>
    <li><a target="_blank" href="http://www.playframework.com/documentation/2.2.x/Iteratees">Iteratees</a> consumes these chunks</li>
</ul>


<p>(For more information, you can read:</p>

<ul>
    <li><a target="_blank" href="https://gist.github.com/sadache/3072893">Is socket.push(bytes) all you need to program Realtime Web apps?</a> from <a href="https://twitter.com/Sadache">Sadek Drobi, CTO Zenexity</a>.</li>
    <li><a target="_blank" href="http://greweb.me/2012/08/zound-a-playframework-2-audio-streaming-experiment-using-iteratees/">Zound, a PlayFramework 2 audio streaming experiment using Iteratees</a> from <a target="_blank" href="https://twitter.com/greweb">Gaetan Renaudeau</a></li>
    <li>If you understand french, you can read <a target="_blank" href="http://www.touilleur-express.fr/2012/08/05/realtime-web-application-un-exemple-avec-play2/">Realtime Web Application, un exemple avec Play2</a> from <a target="_blank" href="https://twitter.com/nmartignole">Nicolas Martignole</a>)
</li>
</ul>


<p>The production of data is an Enumerator, sending line after line of the input file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="k">:</span> <span class="kt">Source</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">lines</span> <span class="k">=</span> <span class="n">source</span><span class="o">.</span><span class="n">getLines</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Enumerator</span><span class="o">.</span><span class="n">fromCallback1</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">line</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">lines</span><span class="o">.</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Some</span><span class="o">(</span><span class="n">lines</span><span class="o">.</span><span class="n">next</span><span class="o">())</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">None</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="n">line</span><span class="o">)</span>
</span><span class='line'>  <span class="o">},</span> <span class="n">source</span><span class="o">.</span><span class="n">close</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With an Enumeratee, each line can be possibly parsed into a Coordinate class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">lineParser</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Option</span><span class="o">[</span><span class="kt">Coordinate</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">{</span> <span class="n">line</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Array</span><span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="nc">IsDouble</span><span class="o">(</span><span class="n">latitude</span><span class="o">),</span> <span class="nc">IsDouble</span><span class="o">(</span><span class="n">longitude</span><span class="o">))</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">Coordinate</span><span class="o">(</span><span class="n">latitude</span><span class="o">,</span> <span class="n">longitude</span><span class="o">))</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Enumerator can be composed with an Enumeratee with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="nc">Play</span><span class="o">.</span><span class="n">getExistingFile</span><span class="o">(</span><span class="s">&quot;conf/coosbyid.txt&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">)</span>
</span><span class='line'><span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">)</span> <span class="o">&amp;&gt;</span> <span class="n">lineParser</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know, the method&rsquo;s name &ldquo;&amp;>&rdquo; can make some of you go away. Please stay! This sign is like the pipe in bash. It is very easy to understand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">)</span> <span class="o">&amp;&gt;</span> <span class="n">lineParser</span>
</span></code></pre></td></tr></table></div></figure>


<p>is the same as (removing infix notation)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">).&amp;&gt;(</span><span class="n">lineParser</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is the same as (method alias)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">).</span><span class="n">through</span><span class="o">(</span><span class="n">lineParser</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use the last form if the first one is not your taste&hellip; :)</p>

<p>With a last Enumeratee to produce JSON, I can send the stream directly to the browser with Server Send Events.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="nc">Play</span><span class="o">.</span><span class="n">getExistingFile</span><span class="o">(</span><span class="s">&quot;conf/coosbyid.txt&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">jsonStream</span> <span class="k">=</span> <span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">)</span> <span class="o">&amp;&gt;</span> <span class="n">lineParser</span> <span class="o">&amp;&gt;</span> <span class="n">validCoordinate</span> <span class="o">&amp;&gt;</span> <span class="n">asJson</span>
</span><span class='line'><span class="k">val</span> <span class="n">eventDataStream</span> <span class="k">=</span> <span class="n">jsonStream</span> <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()</span>
</span><span class='line'><span class="nc">Ok</span><span class="o">.</span><span class="n">chunked</span><span class="o">(</span><span class="n">eventDataStream</span><span class="o">).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What to notice:
Only chunks of data are in memory. The whole content of the source file is never loaded completely.
Each step of the process is isolated in an Enumertor or Enumeratee, making it very easy to modify, to re-use, to combine in a different way.
The Enumerator is reading a file, but you can imagine it could read data from a web service, of from a database.</p>

<h2 id="SSE"><a href="#SSE">Server-Send Events</a></h2>


<p>When we want to send events in &ldquo;real time&rdquo; to the browser, what technologies are available?</p>

<ul>
    <li>polling: the browser pools the server every x milliseconds to check if there is a new message. This method is not very efficient, because a lot of requests are necessary to give the illusion to update the application in real time.</li>
    <li>long-polling (or <a target="_blank" href="http://en.wikipedia.org/wiki/Comet_(programming)">Comet</a>): the browser opens a connection to the server (for example in a iframe), and the server keeps the connection opened. When the server wants to push data to the client, it sends this data with the opened connection. The client receives the data, and opens a connection again for further messages. With this method, the browser is always showing that it is waiting for data. This technology does not scale on threaded system, as each opened connection uses a thread. In JEE environment, we need an asynchronous servlet 3.1 not to make the server exploding.</li>
    <li><a target="_blank" href="http://dev.w3.org/html5/eventsource/">Server-Send Events (SSE)</a> are quite similar to Comet. The main difference is that the browser manages this connection. For example, it opens the connection again if it falls.</li>
    <li><a target="_blank" href="http://dev.w3.org/html5/websockets/">WebSockets</a> provide a bi-directional, full-duplex communications channels. It is a different protocol than HTTP.</li>
</ul>


<p>I choose to use Server-Send Events instead of WebSockets because of the following reasons:</p>

<ul>
    <li>I&#8217;ve already played with WebSockets and wanted to try something new.</li>
    <li>WebSockets are great and can communicate in both directions. But this technology is a new protocol, sometimes difficult to integrate in an existing infrastructure (Proxy, Load-Balancer, Firewall&#8230;) Server-Send Events, on the other hand, use the HTTP protocol. The PaaS <a target="_blank" href="https://www.heroku.com/">Heroku</a> does not support WebSockets yet, but support SSE. When pushing data from the server to clients is all what you need, SSE can be what is the most appropriate and is <a target="_blank" href="http://caniuse.com/#search=eventsource">well supported</a> (except in IE for the moment)</li>
</ul>




<h2 id="SSE-API"><a href="#SSE-API">Server-Send Events API</a></h2>


<p>The Javascript API is very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">feed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s1">&#39;/stream&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// receive message</span>
</span><span class='line'><span class="nx">feed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// do something with data</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<h2 id="Visualizing-results"><a href="#Visualizing-results">Visualizing the results</a></h2>


<p>As the stream is sending coordinates, my first attempt was to display them on a earth in 3D. For this, I used three.js, which was very simple. The first results were promising, but sadly, the browser could not display so much information in 3D. I had to found an alternative.<br/>
My second attempt was to display these coordinates on a 2D canvas, and that worked well, although less impressive that a 3D map&hellip; :)<br/>
You can see the result on Heroku: <a href="http://wiki-growth.herokuapp.com/">http://wiki-growth.herokuapp.com/</a><br/>
The code source is available on github: <a href="https://github.com/yanns/play2-wiki-growth-sse">https://github.com/yanns/play2-wiki-growth-sse</a><br/>
You can run it by yourself with Play and let heroku sleeping.</p>
]]></content>
  </entry>
  
</feed>
