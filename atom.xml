<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Yann&#x27;s blog</title>
	<link href="https://yanns.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://yanns.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-12-21T00:00:00+00:00</updated>
	<id>https://yanns.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>Talk about mongo, FS2 and reactive streams</title>
		<published>2021-12-21T00:00:00+00:00</published>
		<updated>2021-12-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2021/12/21/fs2-mongo-reactivestreams/" type="text/html"/>
		<id>https://yanns.github.io/blog/2021/12/21/fs2-mongo-reactivestreams/</id>
		<content type="html">&lt;p&gt;At the &lt;a href=&quot;https:&#x2F;&#x2F;www.meetup.com&#x2F;de-DE&#x2F;Scala-Berlin-Brandenburg&#x2F;&quot;&gt;scala meetup in Berlin&lt;&#x2F;a&gt;, I presented my investigation on how the &lt;a href=&quot;https:&#x2F;&#x2F;mongodb.github.io&#x2F;mongo-java-driver&#x2F;&quot;&gt;mongo java driver&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.reactive-streams.org&#x2F;&quot;&gt;reactive streams&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;FS2&lt;&#x2F;a&gt; are working together.&lt;&#x2F;p&gt;
&lt;p&gt;By comparing akka-stream and fs2, I could find out a difference in how many elements are asked to the reactive publisher.
That resulted in much more mongo queries when using FS2.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.slideshare.net&#x2F;yann_s&#x2F;fs2-mongo-reactivestreams&quot;&gt;Slides&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;mongo-fs2&quot;&gt;Source code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This whole investigation resulted in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;fs2&#x2F;pull&#x2F;2666&quot;&gt;new API in FS2&lt;&#x2F;a&gt;.
With this change, FS2 is now capable of consuming a reactive stream publisher by asking more than one element at a time. When used with the mongo java driver, it results in less queries fetching each more documents.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GraphQL Conf 2021</title>
		<published>2021-10-28T00:00:00+00:00</published>
		<updated>2021-10-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2021/10/28/graphql-conf/" type="text/html"/>
		<id>https://yanns.github.io/blog/2021/10/28/graphql-conf/</id>
		<content type="html">&lt;p&gt;I am in a lucky situation: at commercetools, I&#x27;ve experienced the adoption of GraphQL as a public API, started as an experiment in 2015 until full support in production.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve already related about this experience at a &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;06&#x2F;11&#x2F;graphql-meetup&#x2F;&quot;&gt;GraphQL Meetup&lt;&#x2F;a&gt; and I was invited at &lt;a href=&quot;https:&#x2F;&#x2F;graphqlconf.org&#x2F;&quot;&gt;GraphQL Conf 2021&lt;&#x2F;a&gt; to do the same.&lt;&#x2F;p&gt;
&lt;p&gt;If you are interested, you can have a look at the &lt;a href=&quot;https:&#x2F;&#x2F;www.slideshare.net&#x2F;yann_s&#x2F;bringing-a-public-graphql-api-from-the-whiteboard-to-production-250332399&quot;&gt;slides&lt;&#x2F;a&gt; or even &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=FwAITJkozr8&amp;amp;list=PL9GHW1s6-K4ZXvbb_nPdV76KlJslmQaEX&amp;amp;index=16&quot;&gt;watch the talk online&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=FwAITJkozr8&amp;amp;list=PL9GHW1s6-K4ZXvbb_nPdV76KlJslmQaEX&amp;amp;index=16&quot;&gt;&lt;p&gt;&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;2021-10-28&amp;#x2F;GraphQL Conf.png&quot; alt=&quot;GraphQL Conf&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bitten by hash codes on production</title>
		<published>2021-02-24T00:00:00+00:00</published>
		<updated>2021-02-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2021/02/24/bitten-by-hash-codes-on-production/" type="text/html"/>
		<id>https://yanns.github.io/blog/2021/02/24/bitten-by-hash-codes-on-production/</id>
		<content type="html">&lt;h1 id=&quot;hash-codes-can-be-surprising&quot;&gt;Hash codes can be surprising&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;d like to write about a performance issue I found out on production.&lt;&#x2F;p&gt;
&lt;p&gt;This issue is coming from change to a Scala function. That change looked totally innocent at the first place.&lt;&#x2F;p&gt;
&lt;p&gt;The code in question is about fetching JSON object from external resources.
The function accepts &lt;code&gt;ids&lt;&#x2F;code&gt; as input and returns a &lt;code&gt;Map&lt;&#x2F;code&gt; where the value is an &lt;code&gt;Option[JObject]&lt;&#x2F;code&gt; to represent, for each &lt;code&gt;id&lt;&#x2F;code&gt; if a JSON object could be found or not.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll try to explain this with some code. I simplified the original code a lot to focus on the important port.&lt;&#x2F;p&gt;
&lt;p&gt;First some code just to fake the data structures used later:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; just to represent a JSON object
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; JObject&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;)])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loadFromExternalServer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JObject&lt;&#x2F;span&gt;&lt;span&gt;] = 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(id.value.hashCode() % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; simulate finding the external resource or not
&lt;&#x2F;span&gt;&lt;span&gt;    None
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else 
&lt;&#x2F;span&gt;&lt;span&gt;    Some(JObject(List(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; -&amp;gt; id.value, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-initial-implementation&quot;&gt;The initial implementation&lt;&#x2F;h3&gt;
&lt;p&gt;The function was initially implemented like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loadRecords&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JObject&lt;&#x2F;span&gt;&lt;span&gt;]] =
&lt;&#x2F;span&gt;&lt;span&gt;  ids
&lt;&#x2F;span&gt;&lt;span&gt;    .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(id, loadFromExternalServer(id)))
&lt;&#x2F;span&gt;&lt;span&gt;    .toMap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we call this function, we will get the expected &lt;code&gt;Map&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span&gt;= Seq(Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;loadRecords(ids)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Map(Id(id-1) -&amp;gt; Some(JObject(List((id,id-1), (name,a name)))), Id(id-5) -&amp;gt; Some(JObject(List((id,id-5), (name,a name)))), Id(id-4) -&amp;gt; None, Id(id-3) -&amp;gt; Some(JObject(List((id,id-3), (name,a name)))), Id(id-2) -&amp;gt; None)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-change&quot;&gt;The change&lt;&#x2F;h3&gt;
&lt;p&gt;At some point, one notices that we sometimes are calling &lt;code&gt;loadRecords&lt;&#x2F;code&gt; with duplicated ids. To avoid that, we changed the &lt;code&gt;Seq&lt;&#x2F;code&gt; to a &lt;code&gt;Set&lt;&#x2F;code&gt; to make sure that all ids are unique:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loadRecords&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JObject&lt;&#x2F;span&gt;&lt;span&gt;]] =
&lt;&#x2F;span&gt;&lt;span&gt;  ids
&lt;&#x2F;span&gt;&lt;span&gt;    .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(id, loadFromExternalServer(id)))
&lt;&#x2F;span&gt;&lt;span&gt;    .toMap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can notice, we only changed &lt;code&gt;ids: Seq[Id]&lt;&#x2F;code&gt; to &lt;code&gt;ids: Set[Id]&lt;&#x2F;code&gt; in the function signature.&lt;&#x2F;p&gt;
&lt;p&gt;The result of calling this function does not change:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span&gt;= Set(Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), Id(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id-5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;loadRecords(ids)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Map(Id(id-1) -&amp;gt; Some(JObject(List((id,id-1), (name,a name)))), Id(id-5) -&amp;gt; Some(JObject(List((id,id-5), (name,a name)))), Id(id-4) -&amp;gt; None, Id(id-3) -&amp;gt; Some(JObject(List((id,id-3), (name,a name)))), Id(id-2) -&amp;gt; None)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-impact&quot;&gt;The impact&lt;&#x2F;h3&gt;
&lt;p&gt;When looking at the servers on production, I found a strange part in one flame graph:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;2021-02-24&amp;#x2F;flame-graph-productHash.png&quot; alt=&quot;Flame graph showing an important portion of scala&#x2F;util&#x2F;hashing&#x2F;MurmurHash3.productHash&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The servers were spending a significant amount of time computing the hash codes of JSON objects.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-explanation&quot;&gt;The explanation&lt;&#x2F;h3&gt;
&lt;p&gt;It took me some time to figure out the issue.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s focus on this part:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  ids
&lt;&#x2F;span&gt;&lt;span&gt;    .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(id, loadFromExternalServer(id)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This piece of code produced a &lt;code&gt;Seq[(Id, Option[JObject])]&lt;&#x2F;code&gt; before the change.
After the change, it produces a &lt;code&gt;Set[(Id, Option[JObject])]&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;For every item inserted, a &lt;code&gt;Set&lt;&#x2F;code&gt; must check for duplicates. It does that with the help of the hash code of each element.&lt;&#x2F;p&gt;
&lt;p&gt;After the change, &lt;code&gt;Set&lt;&#x2F;code&gt; was also asking for the &lt;code&gt;hashCode()&lt;&#x2F;code&gt; of the &lt;code&gt;JObject&lt;&#x2F;code&gt;, computed recursively by traversing the whole JSON object. For large objects, this computation can be costly. (At least, costly enough to make it apparent in a flame graph)&lt;&#x2F;p&gt;
&lt;p&gt;This change went unnoticed because the &lt;code&gt;hashCode()&lt;&#x2F;code&gt; method exists on all objects in Java.&lt;&#x2F;p&gt;
&lt;p&gt;If we had used type classes, we may have noticed this issue before. By assuming that there is no instance of &lt;code&gt;def hashCode(): Int&lt;&#x2F;code&gt; for &lt;code&gt;JObject&lt;&#x2F;code&gt; (which seems fair), the compiler would have fail.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;avoiding-intermediate-collections&quot;&gt;Avoiding intermediate collections&lt;&#x2F;h3&gt;
&lt;p&gt;To avoid computing intermediate collections, we can also use the &lt;code&gt;iterator()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loadRecords&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JObject&lt;&#x2F;span&gt;&lt;span&gt;]] =
&lt;&#x2F;span&gt;&lt;span&gt;  ids
&lt;&#x2F;span&gt;&lt;span&gt;    .iterator
&lt;&#x2F;span&gt;&lt;span&gt;    .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(id, loadFromExternalServer(id)))
&lt;&#x2F;span&gt;&lt;span&gt;    .toMap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That way, we avoid instantiating the intermediate &lt;code&gt;Seq&lt;&#x2F;code&gt; or &lt;code&gt;Set&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Sangria &amp; Scala Futures, round 1</title>
		<published>2020-12-24T00:00:00+00:00</published>
		<updated>2020-12-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2020/12/24/sangria-future-round-1/" type="text/html"/>
		<id>https://yanns.github.io/blog/2020/12/24/sangria-future-round-1/</id>
		<content type="html">&lt;h1 id=&quot;sangria-and-future&quot;&gt;Sangria and &lt;code&gt;Future&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sangria-graphql.github.io&#x2F;&quot;&gt;Sangria&lt;&#x2F;a&gt; is a Scala library implementing GraphQL on the server side.&lt;&#x2F;p&gt;
&lt;p&gt;To use it, one defines the GraphQL schema by defining types, fields, and, for each field, how to solve it.&lt;&#x2F;p&gt;
&lt;p&gt;When Oleg started this library, he used the Scala &lt;code&gt;Future&lt;&#x2F;code&gt; as main representation for asynchronous computation.&lt;&#x2F;p&gt;
&lt;p&gt;The main entry point is the &lt;code&gt;sangria.execution.Executor&lt;&#x2F;code&gt;. Here is a simplified version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Executor&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Root&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Root&lt;&#x2F;span&gt;&lt;span&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;executionContext&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;queryAst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scheme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionScheme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): scheme.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, marshaller.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{...}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;scheme.Result&lt;&#x2F;code&gt; is by default implemented as a &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExecutionScheme &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The resolution of the GraphQL query is delegated to &lt;code&gt;sangria.execution.Resolver&lt;&#x2F;code&gt;, which is using &lt;code&gt;Future&lt;&#x2F;code&gt; internally:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Resolver&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ctx&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;queryAst&lt;&#x2F;span&gt;&lt;span&gt;: ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Document&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;executionContext&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;processFinalResolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Resolve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RegisteredError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;], marshaller.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;)] &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{...}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;future-is-not-the-only-option&quot;&gt;&lt;code&gt;Future&lt;&#x2F;code&gt; is not the only option&lt;&#x2F;h1&gt;
&lt;p&gt;In the &lt;code&gt;Scala&lt;&#x2F;code&gt; world, &lt;code&gt;Future&lt;&#x2F;code&gt; is not the only option to work with asynchronous computations.&lt;&#x2F;p&gt;
&lt;p&gt;And at the time I&#x27;m writing this post, &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; 3.x is being developed, providing a set of very interesting features and performance improvements.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve also used Sangria in application using the &lt;a href=&quot;https:&#x2F;&#x2F;monix.io&#x2F;&quot;&gt;Monix&lt;&#x2F;a&gt; &lt;code&gt;Task&lt;&#x2F;code&gt; instead of &lt;code&gt;Future&lt;&#x2F;code&gt;. The code integrating Sangria is converting back and forth between &lt;code&gt;Task&lt;&#x2F;code&gt; and &lt;code&gt;Future&lt;&#x2F;code&gt;. It&#x27;s not a major issue, but still does not feel optimal.&lt;&#x2F;p&gt;
&lt;p&gt;I think that there is value for a library like Sangria to better support alternatives to &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;supporting-alternatives-to-future&quot;&gt;Supporting alternatives to &lt;code&gt;Future&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;So I&#x27;m trying to enhance Sangria to be able to support any alternatives to &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;By looking at the code, I see some usages of &lt;code&gt;future.map&lt;&#x2F;code&gt;, &lt;code&gt;future.sequence&lt;&#x2F;code&gt;, etc.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;abstracting-with-a-functional-library&quot;&gt;Abstracting with a functional library&lt;&#x2F;h2&gt;
&lt;p&gt;My first reflex is to use a functional library like &lt;code&gt;cats&lt;&#x2F;code&gt; and to make the code abstract by using type classes like &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;typeclasses&#x2F;monad.html&quot;&gt;&lt;code&gt;Monad&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;typeclasses&#x2F;applicative.html&quot;&gt;&lt;code&gt;Applicative&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and so on.&lt;&#x2F;p&gt;
&lt;p&gt;But Oleg wanted the Sangria library to have minimal dependencies. He has not used any functional library.&lt;&#x2F;p&gt;
&lt;p&gt;So I&#x27;ll respect this decision and try another approach.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;abstracting-over-future&quot;&gt;Abstracting over &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;h2&gt;
&lt;p&gt;To make the Sangria code not depending on &lt;code&gt;Future&lt;&#x2F;code&gt; directly, I&#x27;m introducing a trait that should abstract &lt;code&gt;Future&lt;&#x2F;code&gt; away:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Effect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To stay compatible with &lt;code&gt;Future&lt;&#x2F;code&gt;, I also provide a default implicit implementation for it.
If my experiment goes well, at the end, this should be the only place where Sangria is using &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Effect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;FutureEffect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Effect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Effect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Future.successful(a)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; fa.map(f)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I know it would be better to first have &lt;code&gt;flatMap&lt;&#x2F;code&gt; and &lt;code&gt;unit&lt;&#x2F;code&gt; as &lt;code&gt;map&lt;&#x2F;code&gt; could be expressed in &lt;code&gt;flatMap&lt;&#x2F;code&gt; of &lt;code&gt;unit&lt;&#x2F;code&gt; but I don&#x27;t care for now. The name is also not optimal.&lt;&#x2F;p&gt;
&lt;p&gt;My goal is first to check if I can quickly make Sangria using &lt;code&gt;Effect&lt;&#x2F;code&gt; instead of &lt;code&gt;Future&lt;&#x2F;code&gt;.
Once Sangria can compile with it, and if the current tests relying on &lt;code&gt;Future&lt;&#x2F;code&gt; pass, I can refine &lt;code&gt;Effect&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So I&#x27;m starting using &lt;code&gt;Effect&lt;&#x2F;code&gt;. The compiler is calling me names.&lt;&#x2F;p&gt;
&lt;p&gt;But I am changing code step by step, and this is feeling good. I can remove &lt;code&gt;Future&lt;&#x2F;code&gt; completely from some classes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; scala.concurrent.{ExecutionContext, Future}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; DeferredResult&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deferred&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt;]]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futureValue&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;+  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; DeferredResult&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Effect&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;+      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deferred&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt;]]],
&lt;&#x2F;span&gt;&lt;span&gt;+      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futureValue&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Resolve &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;appendErrors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AstLocation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;+        position: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AstLocation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DeferredResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(errors.nonEmpty)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-        copy(futureValue &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; futureValue.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.appendErrors(path, errors, position)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;+        copy(futureValue &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Effect[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]().map(futureValue)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.appendErrors(path, errors, position)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code is a bit more complex but still manageable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;-  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resolveValue&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;+  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resolveValue&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Effect&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionPath&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;astFields&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tpe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;OutputType&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;@@ -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1231&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt; +&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1239&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt; @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Resolver&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ctx&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;             resolveSimpleListValue(simpleRes, path, optional, astFields.head.location)
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this is very hot place, so resorting to mutability to minimize the footprint
&lt;&#x2F;span&gt;&lt;span&gt;-            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deferredBuilder &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;VectorBuilder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt;]]]
&lt;&#x2F;span&gt;&lt;span&gt;-            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resultFutures &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;VectorBuilder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;+            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deferredBuilder &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;VectorBuilder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt;]]]
&lt;&#x2F;span&gt;&lt;span&gt;+            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resultFutures &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;VectorBuilder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resIt &lt;&#x2F;span&gt;&lt;span&gt;= res.iterator
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(resIt.hasNext)
&lt;&#x2F;span&gt;&lt;span&gt;               resIt.next() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;-                  resultFutures += Future.successful(r)
&lt;&#x2F;span&gt;&lt;span&gt;-                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DeferredResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;+                  resultFutures += Effect[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]().pure(r)
&lt;&#x2F;span&gt;&lt;span&gt;+                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DeferredResult&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                   resultFutures += dr.futureValue
&lt;&#x2F;span&gt;&lt;span&gt;                   deferredBuilder ++= dr.deferred
&lt;&#x2F;span&gt;&lt;span&gt;               }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;             DeferredResult(
&lt;&#x2F;span&gt;&lt;span&gt;               deferred = deferredBuilder.result(),
&lt;&#x2F;span&gt;&lt;span&gt;-              futureValue = Future
&lt;&#x2F;span&gt;&lt;span&gt;+              futureValue = Effect[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]()
&lt;&#x2F;span&gt;&lt;span&gt;                 .sequence(resultFutures.result())
&lt;&#x2F;span&gt;&lt;span&gt;                 .map(resolveSimpleListValue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, path, optional, astFields.head.location))
&lt;&#x2F;span&gt;&lt;span&gt;             )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As I abstract more and more functions on &lt;code&gt;Future&lt;&#x2F;code&gt;, the &lt;code&gt;Effect&lt;&#x2F;code&gt; abstraction is growing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Effect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exception&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sequence&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;recover&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;U &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PartialFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s not beautiful but I don&#x27;t consider this as an issue for now. Once everything compiles, I will take time to refine it and to reduce the surface of this abstraction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;promise-on-the-way&quot;&gt;&lt;code&gt;Promise&lt;&#x2F;code&gt; on the way&lt;&#x2F;h2&gt;
&lt;p&gt;But then I encounter some code using &lt;code&gt;Promise&lt;&#x2F;code&gt;, like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; ChildDeferredContext&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Effect&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;promise&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt;]]]]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;resolveDeferredResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DeferredResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      promise.success(res.deferred)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      res.futureValue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-lang.org&#x2F;api&#x2F;current&#x2F;scala&#x2F;concurrent&#x2F;Promise.html&quot;&gt;standard Scala class&lt;&#x2F;a&gt; that allows to build a &lt;code&gt;Future&lt;&#x2F;code&gt; based on side effects.
It&#x27;s low level, and easy to make mistakes when using it.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know why Oleg has decided to use it. I guess it was for performance optimizations to avoid mapping over &lt;code&gt;Future&lt;&#x2F;code&gt; everywhere. Something to check later.&lt;&#x2F;p&gt;
&lt;p&gt;But it&#x27;s quite a shock. I was not expecting that.&lt;&#x2F;p&gt;
&lt;p&gt;This makes an abstraction over &lt;code&gt;Future&lt;&#x2F;code&gt; much more complicated now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-to-do-now&quot;&gt;What to do now&lt;&#x2F;h2&gt;
&lt;p&gt;Encountering &lt;code&gt;Promise&lt;&#x2F;code&gt; is a new challenge.&lt;&#x2F;p&gt;
&lt;p&gt;I see two options from here:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;option-1-abstracting-over-promise&quot;&gt;option 1 - abstracting over &lt;code&gt;Promise&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The first option is to extend the abstraction to also abstract over &lt;code&gt;Promise&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Frankly I doubt this will lead to somewhere. The resulting code might be quite complex. And it might be much more difficult to provide alternative implementations for those abstractions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;option-2-removing-promise&quot;&gt;option 2 - removing &lt;code&gt;Promise&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The second option is to remove the usage of &lt;code&gt;Promise&lt;&#x2F;code&gt;. For that I first need to understand why it was used.&lt;&#x2F;p&gt;
&lt;p&gt;Removing &lt;code&gt;Promise&lt;&#x2F;code&gt; could lead to more functional code at the end. But I&#x27;m afraid it is a big change.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sangria-1-0-yann&quot;&gt;Sangria 1 - 0 Yann&lt;&#x2F;h1&gt;
&lt;p&gt;So I&#x27;ve tried to abstract over &lt;code&gt;Future&lt;&#x2F;code&gt; for sangria, but it was more complex than expected.&lt;&#x2F;p&gt;
&lt;p&gt;Time to stop this first round.&lt;&#x2F;p&gt;
&lt;p&gt;If you have some suggestions how to deal with &lt;code&gt;Promise&lt;&#x2F;code&gt;, I&#x27;m all hear on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;simon_yann&quot;&gt;Twitter&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;mastodon.partipirate.org&#x2F;@yanns&quot;&gt;Mastodon&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GraphQL Meetup (London, Berlin, Munich)</title>
		<published>2020-11-06T00:00:00+00:00</published>
		<updated>2020-11-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2020/06/11/graphql-meetup/" type="text/html"/>
		<id>https://yanns.github.io/blog/2020/06/11/graphql-meetup/</id>
		<content type="html">&lt;p&gt;I am in a lucky situation: I can experience how my company is using GraphQL, started as an experiment in 2015 until supporting it a public API.&lt;&#x2F;p&gt;
&lt;p&gt;I was invited at a &lt;a href=&quot;https:&#x2F;&#x2F;www.meetup.com&#x2F;graphql-berlin&#x2F;events&#x2F;274229061&quot;&gt;GraphQL Meetup&lt;&#x2F;a&gt; to speak about this experience.&lt;&#x2F;p&gt;
&lt;p&gt;If you are interested, you can have a look at the &lt;a href=&quot;https:&#x2F;&#x2F;www.slideshare.net&#x2F;yann_s&#x2F;bringing-a-public-graphql-api-from-beta-to-production-ready-239122223&quot;&gt;slides&lt;&#x2F;a&gt; or even &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Y4aP-ryulgQ&amp;amp;t=489s&quot;&gt;watch the talk online&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Y4aP-ryulgQ&amp;amp;t=489s&quot;&gt;&lt;p&gt;&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;2020-11-05&amp;#x2F;GraphQL_meetup_yann_simon.png&quot; alt=&quot;Online GraphQL Meetup&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There was also a &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Y4aP-ryulgQ&amp;amp;t=5158s&quot;&gt;panel discussion about &amp;quot;GraphQL in Microservices&amp;quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Y4aP-ryulgQ&amp;amp;t=5158s&quot;&gt;&lt;p&gt;&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;2020-11-05&amp;#x2F;Graphql_meetup_panel_microservices.png&quot; alt=&quot;Online GraphQL Meetup&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Open source and sole maintainers</title>
		<published>2020-02-11T00:00:00+00:00</published>
		<updated>2020-02-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2020/02/11/open-source-and-sole-maintainers/" type="text/html"/>
		<id>https://yanns.github.io/blog/2020/02/11/open-source-and-sole-maintainers/</id>
		<content type="html">&lt;h1 id=&quot;open-source-and-sole-maintainers&quot;&gt;Open source and sole maintainers&lt;&#x2F;h1&gt;
&lt;p&gt;Last year I was in the very sad situation of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sangria-graphql&#x2F;sangria&#x2F;issues&#x2F;445&quot;&gt;losing one colleague and friend, Oleg&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;He was the creator and the maintainer of some open source libraries.&lt;&#x2F;p&gt;
&lt;p&gt;Among them the famous &lt;a href=&quot;https:&#x2F;&#x2F;sangria-graphql.org&#x2F;&quot;&gt;Sangria&lt;&#x2F;a&gt;, a scala implementation of GraphQL. This library is used by major companies, such as Twitter or the New York Times.&lt;&#x2F;p&gt;
&lt;p&gt;Over the years Oleg has put a lot of time and energy into building and maintaining Sangria. He also gave many talks about it at &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ymILgZAdfnA&quot;&gt;different conferences&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After his disparition, we, his colleagues, started investigating &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sangria-graphql&#x2F;sangria&#x2F;issues&#x2F;446&quot;&gt;how to proceed with Sangria in the future&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It become apparent early that the bureaucracy involved will be very painful process. Partly due to the fact that Oleg was the only one who granted himself access to almost all his repositories hosted on Github.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dealing-with-github&quot;&gt;Dealing with Github&lt;&#x2F;h2&gt;
&lt;p&gt;The general procedure of dealing with GitHub during this process of transitioning the ownership is very fuzzy. It involves a lot of paperwork. At each subsequent step, we were asked for more documents than during the previous one.&lt;&#x2F;p&gt;
&lt;p&gt;I will spare us all the details as I would like to focus on the current status. By now the process has been ongoing for several months. Sadly, we still do not have transitioned ownership rights of Sangria.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-temporary-solution&quot;&gt;The temporary solution&lt;&#x2F;h2&gt;
&lt;p&gt;As a temporary solution, we &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sangria-graphql&#x2F;sangria&#x2F;issues&#x2F;446#issuecomment-546281588&quot;&gt;set up another Github organization&lt;&#x2F;a&gt;, and we had to fork all repositories.&lt;&#x2F;p&gt;
&lt;p&gt;For this I would like to thank &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;travisbrown&quot;&gt;Travis Brown&lt;&#x2F;a&gt; who jumped in and set up the initial infrastructure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dealing-with-sonatype&quot;&gt;Dealing with Sonatype&lt;&#x2F;h2&gt;
&lt;p&gt;Also Sonatype was very supportive. They were responsive and helped by granting us the &lt;a href=&quot;https:&#x2F;&#x2F;issues.sonatype.org&#x2F;browse&#x2F;OSSRH-48782&quot;&gt;rights to publish the artifacts of Sangria&lt;&#x2F;a&gt;. With these permissions, we were able to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sangria-graphql-org&#x2F;sangria&#x2F;releases&quot;&gt;release new versions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks again Sonatype for the support!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-am-i-telling-you-that&quot;&gt;Why am I telling you that&lt;&#x2F;h1&gt;
&lt;p&gt;The point of my writings is not to blame Github! Any company follows processes in place and struggles with cases like this. If it was not Github today, it would have been another company we would be involved with.&lt;&#x2F;p&gt;
&lt;p&gt;What I would however like to emphasize is how complex and time consuming it is to work with open source library when the maintainer has disappeared.&lt;&#x2F;p&gt;
&lt;p&gt;Oleg’s tragic destiny is not the only cause why one cannot or do not want to maintain an open source library anymore. Many other valid reasons exist.&lt;&#x2F;p&gt;
&lt;p&gt;However, if we would have prepared ourselves by setting up a few things while Oleg was still alive, the remaining steps needed would have caused far less problems and friction for all of us.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;about-me-being-a-single-point-of-failure&quot;&gt;About me being a single point of failure&lt;&#x2F;h1&gt;
&lt;p&gt;Having said all that, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;leanovate&#x2F;play-mockws&#x2F;issues&#x2F;66&quot;&gt;I looked for another maintainer for a modest library of mine&lt;&#x2F;a&gt; and found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;avdv&quot;&gt;someone&lt;&#x2F;a&gt; who stepped up for the library by reviewing and merging pull requests.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, we also made sure that he can publish artifacts. As a result he took care of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;leanovate&#x2F;play-mockws&#x2F;releases&#x2F;tag&#x2F;v2.8.0&quot;&gt;publishing the last release&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;@Claudio: thank you for jumping in. I am now feeling relieved by not being alone on this project anymore.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;avoid-being-a-single-point-of-failure&quot;&gt;Avoid being a single point of failure&lt;&#x2F;h1&gt;
&lt;p&gt;My main message here is: try to make sure you are not a single point of failure for your projects. Think of others using your libraries and their expectations and dependencies towards it. Onboard other maintainers early if you can and delegate some of your reponsibilities.&lt;&#x2F;p&gt;
&lt;p&gt;Admittedly administrative work is needed to grant access to a new maintainer and align on the resulting expectations. Frankly, it is not a very motivating task.&lt;&#x2F;p&gt;
&lt;p&gt;Still, please go through it and do it.&lt;&#x2F;p&gt;
&lt;p&gt;It will make everyone’s life much easier.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;Many thanks to &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tdeekens&quot;&gt;Tobi&lt;&#x2F;a&gt; for the review&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Supporting heterogeneous types in Scala</title>
		<published>2019-10-18T00:00:00+00:00</published>
		<updated>2019-10-18T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2019/10/18/heterogeneous-types-scala/" type="text/html"/>
		<id>https://yanns.github.io/blog/2019/10/18/heterogeneous-types-scala/</id>
		<content type="html">&lt;h1 id=&quot;the-objective&quot;&gt;The objective&lt;&#x2F;h1&gt;
&lt;p&gt;We want to create a function that takes a list of scala classes as input, and outputs a list of all elements, each element being encoded as json.&lt;&#x2F;p&gt;
&lt;p&gt;For encoding in json, we use &lt;a href=&quot;https:&#x2F;&#x2F;circe.github.io&#x2F;&quot;&gt;circe&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This function should be generic and works for any type we can find a &lt;a href=&quot;https:&#x2F;&#x2F;circe.github.io&#x2F;circe&#x2F;codec.html&quot;&gt;circe&lt;&#x2F;a&gt; &lt;code&gt;Encoder&lt;&#x2F;code&gt; for it.&lt;&#x2F;p&gt;
&lt;p&gt;Our first try could be something like the following function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; io.circe.{Encoder, Json}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Json&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  l.map(Encoder[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;].apply)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;encode&lt;&#x2F;code&gt; function seems to work:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;to encode several Strings:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;encode(List(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;to encode several integers:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;encode(List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, 2, 3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this function cannot be used with a list of heterogeneous types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;encode(List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; error: diverging implicit expansion for type io.circe.Encoder[Any]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Indeed the scala compiler first resolves the type parameter &lt;code&gt;A&lt;&#x2F;code&gt; by finding a common type for &lt;code&gt;String&lt;&#x2F;code&gt; and &lt;code&gt;Int&lt;&#x2F;code&gt;. In this scala version, it chooses &lt;code&gt;Any&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then the scala compiler tries to find an instance of &lt;code&gt;Encoder[Any]&lt;&#x2F;code&gt; and fails to do so.&lt;&#x2F;p&gt;
&lt;iframe height=&quot;280px&quot; frameborder=&quot;0&quot; style=&quot;width: 100%&quot; src=&quot;https:&#x2F;&#x2F;embed.scalafiddle.io&#x2F;embed?sfid=lmeb8C8&#x2F;1&amp;theme=dark&amp;layout=h74&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;h1 id=&quot;first-solution-replacing-type-parameters-with-path-dependent-types&quot;&gt;First solution: replacing type parameters with path dependent types&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;introducing-toencode-with-a-path-dependent-type-to-capture-the-type-of-each-element&quot;&gt;Introducing &lt;code&gt;ToEncode&lt;&#x2F;code&gt; with a path dependent type to capture the type of each element&lt;&#x2F;h2&gt;
&lt;p&gt;One solution is to force the scala compiler to capture the &lt;code&gt;Encoder&lt;&#x2F;code&gt; instance for each element, instead of using one generic &lt;code&gt;Encoder&lt;&#x2F;code&gt; for the whole list.&lt;&#x2F;p&gt;
&lt;p&gt;For that, we introduce a trait to capture the value and the &lt;code&gt;Encoder&lt;&#x2F;code&gt; instance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; ToEncode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;encode&lt;&#x2F;code&gt; function does not have any type parameter anymore as the type of each element is already captured in the instance of &lt;code&gt;ToEncode&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToEncode&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Json&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  l.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; v.encoder.apply(v.value))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s define some helper functions to create &lt;code&gt;ToEncode&lt;&#x2F;code&gt; instances:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;stringToEncode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToEncode &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToEncode &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span&gt;= v
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encoder &lt;&#x2F;span&gt;&lt;span&gt;= instance
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;intToEncode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToEncode &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToEncode &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span&gt;= v
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encoder &lt;&#x2F;span&gt;&lt;span&gt;= instance
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can use &lt;code&gt;encode&lt;&#x2F;code&gt; with homogeneous or heterogeneous types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;encode(List(stringToEncode(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), stringToEncode(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(intToEncode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), intToEncode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), intToEncode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, 2, 3)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(intToEncode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), stringToEncode(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), intToEncode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, &amp;quot;hello&amp;quot;, 3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By making our helpers &lt;code&gt;implicit&lt;&#x2F;code&gt;, we can avoid some boilerplate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;encode(List(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, 2, 3)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, &amp;quot;hello&amp;quot;, 3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;iframe height=&quot;625px&quot; frameborder=&quot;0&quot; style=&quot;width: 100%&quot; src=&quot;https:&#x2F;&#x2F;embed.scalafiddle.io&#x2F;embed?sfid=jfGglKO&#x2F;1&amp;theme=dark&amp;layout=h74&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;h2 id=&quot;generic-solution&quot;&gt;Generic solution&lt;&#x2F;h2&gt;
&lt;p&gt;Instead of defining helper functions like &lt;code&gt;stringToEncode&lt;&#x2F;code&gt; or &lt;code&gt;intToEncode&lt;&#x2F;code&gt; for each type we need, we can also have a generic solution by building a &lt;code&gt;ToEncode&lt;&#x2F;code&gt; whenever we find an &lt;code&gt;Encoder&lt;&#x2F;code&gt; instance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; ToEncode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; ToEncode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fromEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToEncode &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToEncode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Value &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encoder &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Encoder[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToEncode&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Json&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  l.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; v.encoder.apply(v.value))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can use our &lt;code&gt;encode&lt;&#x2F;code&gt; function with any kind of type that has an &lt;code&gt;Encoder&lt;&#x2F;code&gt; instance.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;encode(List(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, 2)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, &amp;quot;hello&amp;quot;, 3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;iframe height=&quot;550px&quot; frameborder=&quot;0&quot; style=&quot;width: 100%&quot; src=&quot;https:&#x2F;&#x2F;embed.scalafiddle.io&#x2F;embed?sfid=IMTlBrw&#x2F;2&amp;theme=dark&amp;layout=h74&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;h2 id=&quot;disadvantage&quot;&gt;Disadvantage&lt;&#x2F;h2&gt;
&lt;p&gt;To use this approach, we need one instance of &lt;code&gt;ToEncode&lt;&#x2F;code&gt; for each element in the list.&lt;&#x2F;p&gt;
&lt;p&gt;Calling &lt;code&gt;encode&lt;&#x2F;code&gt; with a list of 500 strings will create 500 instances of &lt;code&gt;ToEncode&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;second-solution-using-value-classes-to-encode-each-element&quot;&gt;Second solution: using value classes to encode each element&lt;&#x2F;h1&gt;
&lt;p&gt;After great feedback from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;travisbrown&#x2F;status&#x2F;1186062469850112002&quot;&gt;Travis&lt;&#x2F;a&gt;, I could get rid of the &lt;code&gt;ToEncode&lt;&#x2F;code&gt; instances.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s introduce a value class that will contain the &lt;code&gt;Json&lt;&#x2F;code&gt; instance for each element:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; AsJson&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Json&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AnyVal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use a value class to (hopefully) avoid runtime instances. A version with Dotty could use phantom type.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of encoding each value in the &lt;code&gt;encode&lt;&#x2F;code&gt; function, we encode directly when converting each element to a &lt;code&gt;AsJson&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; AsJson &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toAsJson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AsJson &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AsJson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(Encoder[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;].apply(a))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;encode&lt;&#x2F;code&gt; function has almost nothing to do except forcing the compiler to encode each element:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AsJson&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Json&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  l.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.json)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By making &lt;code&gt;AsJson.toAsJson&lt;&#x2F;code&gt; visible in the scope, we can now use our &lt;code&gt;encode&lt;&#x2F;code&gt; function with heterogeneous types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; AsJson.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, 2)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;encode(List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List[io.circe.Json] = List(1, &amp;quot;hello&amp;quot;, 3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;iframe height=&quot;400px&quot; frameborder=&quot;0&quot; style=&quot;width: 100%&quot; src=&quot;https:&#x2F;&#x2F;embed.scalafiddle.io&#x2F;embed?sfid=XcTtE5u&#x2F;1&amp;theme=dark&amp;layout=h74&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;h1 id=&quot;feedback-welcome&quot;&gt;Feedback welcome&lt;&#x2F;h1&gt;
&lt;p&gt;If you know a better solution, please do not hesitate to tell &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;simon_yann&#x2F;status&#x2F;1185276156561506304&quot;&gt;me&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rust in 2018</title>
		<published>2018-01-14T00:00:00+00:00</published>
		<updated>2018-01-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2018/01/14/rust-in-2018/" type="text/html"/>
		<id>https://yanns.github.io/blog/2018/01/14/rust-in-2018/</id>
		<content type="html">&lt;p&gt;This is my contribution to the &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2018&#x2F;01&#x2F;03&#x2F;new-years-rust-a-call-for-community-blogposts.html&quot;&gt;#Rust2018 blog posts&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-i-started-with-rust&quot;&gt;Why I started with Rust&lt;&#x2F;h1&gt;
&lt;p&gt;My daily job is to implement scalable backends in Scala.&lt;&#x2F;p&gt;
&lt;p&gt;I very like Functional Programming and async IO.&lt;&#x2F;p&gt;
&lt;p&gt;But I have some pain point in Scala&#x2F;JVM and I was very interested to see how Rust could fit here:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fp-in-scala-is-not-gc-friendly&quot;&gt;FP in Scala is not GC-friendly&lt;&#x2F;h2&gt;
&lt;p&gt;FP in Scala tends to create a lot of small living objects, putting pressure on the Garbage Collector.&lt;&#x2F;p&gt;
&lt;p&gt;For very hot code, I have to re-implement some FP scala code into imperative style for better performances, and I very dislike that.&lt;&#x2F;p&gt;
&lt;p&gt;Rust on the other hand provide abstractions without overhead (or very little).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;java-programs-tend-to-be-very-fat&quot;&gt;Java programs tend to be very &amp;quot;fat&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;A Rust program can be statically compiled and directly packaged as a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;zeugnis&#x2F;blob&#x2F;master&#x2F;Dockerfile&quot;&gt;from scratch docker container&lt;&#x2F;a&gt;, very lightweight compared to java applications that needs a distribution and a JVM.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rust-in-2017&quot;&gt;Rust in 2017&lt;&#x2F;h1&gt;
&lt;p&gt;In 2017, I tried different programs in Rust, from a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sphereio&#x2F;sphere-hello-api&#x2F;tree&#x2F;master&#x2F;rust&quot;&gt;minimal SDK&lt;&#x2F;a&gt; that I tried to move to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sphereio&#x2F;sphere-hello-api&#x2F;tree&#x2F;async_hyper&#x2F;rust&quot;&gt;async IO&lt;&#x2F;a&gt;, to a GUI program. I tried a lot of different HTTP servers.&lt;&#x2F;p&gt;
&lt;p&gt;And I contributed to an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hjr3&#x2F;weldr&quot;&gt;HTTP proxy&lt;&#x2F;a&gt; based on Tokio and Futures.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rust-in-2018&quot;&gt;Rust in 2018&lt;&#x2F;h1&gt;
&lt;p&gt;My wishes for Rust in 2018 are mostly based on the pain I had with Rust in 2017:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;easier-futures&quot;&gt;Easier Futures&lt;&#x2F;h2&gt;
&lt;p&gt;My experience with Futures was... very painful.&lt;&#x2F;p&gt;
&lt;p&gt;I had a lot of strange compiler errors, especially with lifetimes.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, to fix then, I just had to move one variable from one closure to the upper one, something that makes no sense from the implement logic point of view.&lt;&#x2F;p&gt;
&lt;p&gt;I have a lot of difficulties with the static lifetime of Futures.&lt;&#x2F;p&gt;
&lt;p&gt;I hope that this will improve. Maybe non lexical lifetimes will help here.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; feature&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And I&#x27;ll also follow the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexcrichton&#x2F;futures-await&quot;&gt;async&#x2F;await coroutines&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-standard-http-server-for-backends&quot;&gt;a &amp;quot;standard&amp;quot; HTTP server for backends&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d need a good asynchronous http server ready for production usage, with  a good community.
There should exist good libraries that can integrate easily with this &amp;quot;standard&amp;quot; HTTP server, like for logs and metrics.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rust closures as input parameters</title>
		<published>2016-05-23T00:00:00+00:00</published>
		<updated>2016-05-23T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2016/05/23/rust-closures-as-input-parameters/" type="text/html"/>
		<id>https://yanns.github.io/blog/2016/05/23/rust-closures-as-input-parameters/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;Edit:&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;yanns.github.io&#x2F;blog&#x2F;2016&#x2F;05&#x2F;23&#x2F;rust-closures-as-input-parameters&#x2F;#update-2016-05-25&quot;&gt;&lt;em&gt;Update (May 25)&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I am learning &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; and, as a beginner, I have sometimes problems achieving some little tasks that would be so easy in other programming languages I know better.&lt;&#x2F;p&gt;
&lt;p&gt;But when I met some Rust developers and they ask me about my difficulties, I often forget about them.&lt;&#x2F;p&gt;
&lt;p&gt;I therefore decided to write about my difficulties in Rust to keep track of them.&lt;&#x2F;p&gt;
&lt;p&gt;So today about closures.&lt;&#x2F;p&gt;
&lt;p&gt;When reading a &lt;a href=&quot;http:&#x2F;&#x2F;fredrik.anderzon.se&#x2F;2016&#x2F;05&#x2F;10&#x2F;rust-for-node-developers-part-1-introduction&#x2F;&quot;&gt;blog post introducing Rust for Node.js Developers&lt;&#x2F;a&gt; I made the same Todo application.&lt;&#x2F;p&gt;
&lt;p&gt;At the end, the program contains such piece of code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_todo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(todo) = todos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.id == todo_id) {
&lt;&#x2F;span&gt;&lt;span&gt;		todo.deleted = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mark_done&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(todo) = todos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.id == todo_id) {
&lt;&#x2F;span&gt;&lt;span&gt;		todo.completed = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first function marks a Todo as deleted if it can be found by its ID in the vector.
The second function marks a Todo as completed, also if it can be found in the vector of Todos.&lt;&#x2F;p&gt;
&lt;p&gt;Some code is duplicated and I decided to refactor the common code in a third function, that would do &lt;em&gt;something&lt;&#x2F;em&gt; on a Todo if found in a vector.&lt;&#x2F;p&gt;
&lt;p&gt;This third function would take a closure as input parameter, like in pseudo-code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;lt;closure &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; do something on a Todo&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(todo) = todos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.id == todo_id) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(todo);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;so that the 2 initial functions are simplified like that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_todo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;(todos, todo_id, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.deleted = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mark_done&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;(todos, todo_id, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.completed = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This closure is a side-effect on a Todo. It should accept a mutable Todo as parameter and return nothing.&lt;&#x2F;p&gt;
&lt;p&gt;One &lt;a href=&quot;http:&#x2F;&#x2F;rustbyexample.com&#x2F;fn&#x2F;closures&#x2F;input_parameters.html&quot;&gt;source of documentation for closures as input parameters&lt;&#x2F;a&gt; mentions that there exist 3 kinds of closures:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fn: takes captures by reference (&lt;code&gt;&amp;amp;T&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;FnMut: takes captures by mutable reference (&lt;code&gt;&amp;amp;mut T&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;FnOnce: takes captures by value (&lt;code&gt;T&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a lot of information for a new developer.&lt;&#x2F;p&gt;
&lt;p&gt;I tried different possibilities, like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Fn(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mut Todo&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(todo) = todos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.id == todo_id) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(todo);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_todo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;(todos, todo_id, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.deleted = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mark_done&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;(todos, todo_id, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.completed = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without any success:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo run
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Compiling&lt;&#x2F;span&gt;&lt;span&gt; todo-list v0.1.0 (file:&#x2F;&#x2F;&#x2F;Users&#x2F;yannsimon&#x2F;projects&#x2F;rust&#x2F;rust-playground&#x2F;todo-list)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&#x2F;main.rs:27:38:&lt;&#x2F;span&gt;&lt;span&gt; 27:50 error: the type of this value must be known in this context
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;src&#x2F;main.rs:27&lt;&#x2F;span&gt;&lt;span&gt; 	with_todo_id(todos, todo_id, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo.deleted&lt;&#x2F;span&gt;&lt;span&gt; = true);
&lt;&#x2F;span&gt;&lt;span&gt;               	                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^~~~~~~~~~~~
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;closures.html#taking-closures-as-arguments&quot;&gt;official documentation&lt;&#x2F;a&gt; was not so much help neither.&lt;&#x2F;p&gt;
&lt;p&gt;I asked for help on &lt;a href=&quot;https:&#x2F;&#x2F;client00.chat.mibbit.com&#x2F;?server=irc.mozilla.org&amp;amp;channel=%23rust-beginners&quot;&gt;#rust-beginners&lt;&#x2F;a&gt;.
People on this channel are &lt;strong&gt;very&lt;&#x2F;strong&gt; helpful and kind. The community of Rust is awesome!&lt;&#x2F;p&gt;
&lt;p&gt;I was proposed 2 solutions. Both work, and I choose that one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;P&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: P) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; P: Fn(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Todo) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(todo) = todos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.id == todo_id) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(todo);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_todo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;(todos, todo_id, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.deleted = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mark_done&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todos&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Todo&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_todo_id&lt;&#x2F;span&gt;&lt;span&gt;(todos, todo_id, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;todo&lt;&#x2F;span&gt;&lt;span&gt;| todo.completed = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compared to my previous attempt, the &lt;code&gt;f: &amp;amp;Fn(&amp;amp;mut Todo)&lt;&#x2F;code&gt; is replaced by &lt;code&gt;f: P where P: Fn(&amp;amp;mut Todo)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I still do not completely understand why this works and not the previous version. I was explained Rust can use the reference to the closure... I will continue reading documentation about it.... ;)&lt;&#x2F;p&gt;
&lt;p&gt;If you have any good source for this, please &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;simon_yann&quot;&gt;tell me&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In conclusion I still find closure as input parameters quite complex in Rust. I surely need to more understand the theory behind the language to fully understand them.&lt;&#x2F;p&gt;
&lt;p&gt;The Rust community is very helpful, but it may not scale if there are more and more beginners like me.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;update-2016-05-25&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yanns.github.io&#x2F;blog&#x2F;2016&#x2F;05&#x2F;23&#x2F;rust-closures-as-input-parameters&#x2F;#update-2016-05-25&quot;&gt;&lt;em&gt;Update (May 25)&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The following &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;rustlang&#x2F;status&#x2F;734946700536774656&quot;&gt;tweet&lt;&#x2F;a&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;rustlang&quot;&gt;@rustlang&lt;&#x2F;a&gt; provided me the good keywords to search for:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
    &lt;p&gt;it&#x27;s about trait objects vs type parameters, which can be tough when you&#x27;re learning&lt;&#x2F;p&gt;
    &lt;p&gt;&amp;mdash; &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;twitter.com&amp;#x2F;rustlang&amp;#x2F;status&amp;#x2F;734946700536774656&quot;&gt;@rustlang&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;trait-objects.html&quot;&gt;Trait objects&lt;&#x2F;a&gt; are used for &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dynamic_dispatch&quot;&gt;dynamic dispatch&lt;&#x2F;a&gt;, feature found in most OO languages.&lt;&#x2F;p&gt;
&lt;p&gt;With that in mind, I could understand the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;closures.html#taking-closures-as-arguments&quot;&gt;Rust book about closures&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If I use trait objects, this version works:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn with_todo_id(todos: &amp;amp;mut Vec&amp;lt;Todo&amp;gt;, todo_id: i16, f: &amp;amp;Fn(&amp;amp;mut Todo)) {
&lt;&#x2F;span&gt;&lt;span&gt;    if let Some(todo) = todos.iter_mut().find(|todo| todo.id == todo_id) {
&lt;&#x2F;span&gt;&lt;span&gt;        f(todo);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn remove_todo(todos: &amp;amp;mut Vec&amp;lt;Todo&amp;gt;, todo_id: i16) {
&lt;&#x2F;span&gt;&lt;span&gt;    with_todo_id(todos, todo_id, &amp;amp;|todo| todo.deleted = true);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn mark_done(todos: &amp;amp;mut Vec&amp;lt;Todo&amp;gt;, todo_id: i16) {
&lt;&#x2F;span&gt;&lt;span&gt;    with_todo_id(todos, todo_id, &amp;amp;|todo| todo.completed = true);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Trait objects force Rust to use dynamic dispatch.&lt;&#x2F;p&gt;
&lt;p&gt;If I use type parameter instead of a trait object:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn with_todo_id&amp;lt;P&amp;gt;(todos: &amp;amp;mut Vec&amp;lt;Todo&amp;gt;, todo_id: i16, f: P) where P: Fn(&amp;amp;mut Todo) {
&lt;&#x2F;span&gt;&lt;span&gt;    if let Some(todo) = todos.iter_mut().find(|todo| todo.id == todo_id) {
&lt;&#x2F;span&gt;&lt;span&gt;        f(todo);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn remove_todo(todos: &amp;amp;mut Vec&amp;lt;Todo&amp;gt;, todo_id: i16) {
&lt;&#x2F;span&gt;&lt;span&gt;    with_todo_id(todos, todo_id, |todo| todo.deleted = true);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn mark_done(todos: &amp;amp;mut Vec&amp;lt;Todo&amp;gt;, todo_id: i16) {
&lt;&#x2F;span&gt;&lt;span&gt;    with_todo_id(todos, todo_id, |todo| todo.completed = true);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then Rust is able to monomorphize the closure and use static dispatch, and does not need any object for the dyamic dispatch.&lt;&#x2F;p&gt;
&lt;p&gt;Another great example of the &lt;a href=&quot;http:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2015&#x2F;05&#x2F;11&#x2F;traits.html&quot;&gt;zero-cost abstraction&lt;&#x2F;a&gt; possible with Rust!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GraphQL Meetup in Berlin</title>
		<published>2016-05-19T00:00:00+00:00</published>
		<updated>2016-05-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2016/05/19/graphql-meetup-in-berlin/" type="text/html"/>
		<id>https://yanns.github.io/blog/2016/05/19/graphql-meetup-in-berlin/</id>
		<content type="html">&lt;p&gt;Honeypot organized the first meetup about &lt;a href=&quot;http:&#x2F;&#x2F;graphql.org&#x2F;&quot;&gt;GraphQL&lt;&#x2F;a&gt; in Berlin and I had the pleasure to be invited to talk about my experience.&lt;&#x2F;p&gt;
&lt;p&gt;My topic was &lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;yann_s&#x2F;performance-optimisation-with-graphql&quot;&gt;Performance optimisation with GraphQL&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the &lt;a href=&quot;http:&#x2F;&#x2F;blog.honeypot.io&#x2F;honeypot-tech-meetup-graphql&#x2F;&quot;&gt;slides for the other talks here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;graphql-meetup-1.jpg&quot; alt=&quot;Lots of attendees&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;graphql-meetup-2.jpg&quot; alt=&quot;Performance gain with GraphQL field selection&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>migrate a playframework app from 2.3 to 2.5</title>
		<published>2016-04-26T00:00:00+00:00</published>
		<updated>2016-04-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2016/04/26/migrate-a-playframework-app-from-2-dot-3-to-2-dot-5/" type="text/html"/>
		<id>https://yanns.github.io/blog/2016/04/26/migrate-a-playframework-app-from-2-dot-3-to-2-dot-5/</id>
		<content type="html">&lt;p&gt;Recently I migrated several &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;&quot;&gt;play&lt;&#x2F;a&gt; applications from the version 2.3 to the version 2.5.&lt;&#x2F;p&gt;
&lt;p&gt;As this experience may interest other people, I decided to write about it.&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s start!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;migration-from-2-3-to-2-4&quot;&gt;Migration from 2.3 to 2.4&lt;&#x2F;h1&gt;
&lt;p&gt;First, we will migrate the application from the version 2.3 to the version 2.4.&lt;&#x2F;p&gt;
&lt;p&gt;For that, the &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;latest&#x2F;Migration24&quot;&gt;migration guide&lt;&#x2F;a&gt; will be our reference.&lt;&#x2F;p&gt;
&lt;p&gt;How do I proceed?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-update-the-sbt-config-to-play-2-4&quot;&gt;1. Update the sbt config to play 2.4&lt;&#x2F;h3&gt;
&lt;p&gt;First, I update the SBT configuration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;update the play version in &lt;code&gt;project&#x2F;plugins.sbt&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-addSbtPlugin(&amp;quot;com.typesafe.play&amp;quot; % &amp;quot;sbt-plugin&amp;quot; % &amp;quot;2.3.10&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;+addSbtPlugin(&amp;quot;com.typesafe.play&amp;quot; % &amp;quot;sbt-plugin&amp;quot; % &amp;quot;2.4.6&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;if needed, update the sbt version in &lt;code&gt;project&#x2F;build.properties&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sbt.version=0.13.11
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;update the &lt;code&gt;build.sbt&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-import PlayKeys._
&lt;&#x2F;span&gt;&lt;span&gt;+import play.sbt.PlayImport._
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I also had to replace &lt;code&gt;playVersion.value&lt;&#x2F;code&gt; with &lt;code&gt;play.core.PlayVersion.current&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of this first step is to be able to load the application with &lt;code&gt;sbt&lt;&#x2F;code&gt;, even if the application itself does not compile. At this point, Intellij can load the application with a play 2.4 version, and can provide auto-completion.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-fix-compilation-errors&quot;&gt;2. Fix compilation errors&lt;&#x2F;h3&gt;
&lt;p&gt;Then, I fix the compilation&lt;&#x2F;p&gt;
&lt;p&gt;Inside sbt, I just trigger the compilation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;~compile
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and fix all compilation errors. The play team has made a very good job at documenting all steps in the &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;latest&#x2F;Migration24&quot;&gt;migration guide&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At this point, I just want the application to compile with the minimal number of changes. I do not care if I use deprecated APIs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-run-the-application&quot;&gt;3. Run the application&lt;&#x2F;h3&gt;
&lt;p&gt;When all compilation errors are fixed, I just make sure that the application can run:&lt;&#x2F;p&gt;
&lt;p&gt;In sbt:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;~run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When running the application, I sometimes discovered version conflicts between libs (ex: Netty versions) and I know if I can complete the migration or if I have to update a dependency before.&lt;&#x2F;p&gt;
&lt;p&gt;Analysing all dependencies can be difficult.
I use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jrudolph&#x2F;sbt-dependency-graph&quot;&gt;sbt-dependency-graph&lt;&#x2F;a&gt; to have an overview of all dependencies and find overriding versions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-fix-the-tests&quot;&gt;4. Fix the tests&lt;&#x2F;h3&gt;
&lt;p&gt;Then I fix all compilation errors in the tests, and then check that the tests are successful.&lt;&#x2F;p&gt;
&lt;p&gt;In sbt:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;~testQuick
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When all the tests are green, the application is migrated.
The migration to play 2.4 is now completed, profit from the new version! ;)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-remove-all-usages-of-deprecated-api&quot;&gt;5. Remove all usages of deprecated API&lt;&#x2F;h3&gt;
&lt;p&gt;Now it is time to clean our application and to fix all code using a deprecated API.&lt;&#x2F;p&gt;
&lt;p&gt;This clean up can be done step by step.&lt;&#x2F;p&gt;
&lt;p&gt;I use the Scala API, and I prefer not to use any runtime dependency injection framework.&lt;&#x2F;p&gt;
&lt;p&gt;I introduced the so-called &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.5.x&#x2F;ScalaCompileTimeDependencyInjection&quot;&gt;&lt;em&gt;compile time dependency injection&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; to simply instantiate my controllers in one application loader.&lt;&#x2F;p&gt;
&lt;p&gt;For more info about this topic, please refer to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;de.slideshare.net&#x2F;yann_s&#x2F;play-24dimacwire&quot;&gt;my talk about it&lt;&#x2F;a&gt; at the &lt;a href=&quot;&#x2F;blog&#x2F;2015&#x2F;05&#x2F;20&#x2F;di-with-play-2-dot-4&#x2F;&quot;&gt;play meetup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;loicdescotte.github.io&#x2F;posts&#x2F;play24-compile-time-di&#x2F;&quot;&gt;this great post from Loïc Descotte&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This cleanup is necessary before updating to play 2.5, as deprecated API are likely to be removed in the next version.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;migration-from-2-4-to-2-5&quot;&gt;Migration from 2.4 to 2.5&lt;&#x2F;h1&gt;
&lt;p&gt;For that, the &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;latest&#x2F;Migration25&quot;&gt;migration guide&lt;&#x2F;a&gt; will be our reference.&lt;&#x2F;p&gt;
&lt;p&gt;The migrate follow the same steps as &lt;a href=&quot;&#x2F;#migrate-from-2.3-to-2.4&quot;&gt;the previous migration&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;update the sbt config, but to play 2.5:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-addSbtPlugin(&amp;quot;com.typesafe.play&amp;quot; % &amp;quot;sbt-plugin&amp;quot; % &amp;quot;2.4.6&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;+addSbtPlugin(&amp;quot;com.typesafe.play&amp;quot; % &amp;quot;sbt-plugin&amp;quot; % &amp;quot;2.5.2&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;fix the compilation errors, like in application loader:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-    Logger.configure(context.environment)
&lt;&#x2F;span&gt;&lt;span&gt;+    LoggerConfigurator(context.environment.classLoader).foreach { _.configure(context.environment) }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;run the application&lt;&#x2F;li&gt;
&lt;li&gt;fix the tests&lt;&#x2F;li&gt;
&lt;li&gt;clean up the application&lt;br&gt;
For example, I can remove the &lt;code&gt;InjectedRoutesGenerator&lt;&#x2F;code&gt; as it is now the default.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-routesGenerator := InjectedRoutesGenerator
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>trampoline execution context with scala Futures</title>
		<published>2016-02-10T00:00:00+00:00</published>
		<updated>2016-02-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2016/02/10/trampoline-execution-context-with-scala-futures/" type="text/html"/>
		<id>https://yanns.github.io/blog/2016/02/10/trampoline-execution-context-with-scala-futures/</id>
		<content type="html">&lt;p&gt;Disclaimer: I am continually learning, and this post reflects my current understanding of the topic. I may be wrong. Do not believe directly what I write. Test what you need. If you want to provide some precisions or corrections, please contact me on &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;simon_yann&quot;&gt;twitter&lt;&#x2F;a&gt;, and I&#x27;ll fix this post.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;runarorama&quot;&gt;Rúnar&lt;&#x2F;a&gt; showed in a &lt;a href=&quot;http:&#x2F;&#x2F;blog.higher-order.com&#x2F;blog&#x2F;2015&#x2F;06&#x2F;18&#x2F;easy-performance-wins-with-scalaz&#x2F;&quot;&gt;blog post how Scalaz Tasks can perform better than the Scala Futures&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;He explains the details very well. If you have not read that post, I recommend it highly.&lt;&#x2F;p&gt;
&lt;p&gt;The main point if that Scala &lt;code&gt;Future&lt;&#x2F;code&gt; adds a context switching for each &lt;code&gt;map&lt;&#x2F;code&gt; or &lt;code&gt;flatMap&lt;&#x2F;code&gt;.
With Scalaz &lt;code&gt;Task&lt;&#x2F;code&gt;, we have to describe which tasks need a new thread, the other ones are called on the same thread as the previous computation, avoiding these context switchings.&lt;&#x2F;p&gt;
&lt;p&gt;With Scala Futures, if you want to multiply the result of a &lt;code&gt;Future[Int]&lt;&#x2F;code&gt; by 2, you need an &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt; (EC):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; scala.concurrent.ExecutionContext.global
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futureCount&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;] = futureCountOfUsers()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= futureCount.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; i * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)(global)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or with an implicit resolution:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; scala.concurrent.ExecutionContext.Implicits.global
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futureCount&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;] = futureCountOfUsers()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= futureCount.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; i * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To compute the &lt;code&gt;i =&amp;gt; i * 2&lt;&#x2F;code&gt;, the ExecutionContext may use a different thread than the one having the result of the &lt;code&gt;futureCountOfUsers&lt;&#x2F;code&gt;. We observe a context switching between the future and the callback in the &lt;code&gt;map&lt;&#x2F;code&gt;. And the thread executing &lt;code&gt;i =&amp;gt; i * 2&lt;&#x2F;code&gt; can run on a different CPU&#x2F;core than the one having the result of &lt;code&gt;futureCount&lt;&#x2F;code&gt;, meaning that the CPU cache is missed.&lt;&#x2F;p&gt;
&lt;p&gt;This overhead is not problematic for simple computations. But if we do 100 or 1000 of them, then it can have a significant impact on performances.&lt;&#x2F;p&gt;
&lt;p&gt;And in my opinion, Scala Futures have other downsides.&lt;&#x2F;p&gt;
&lt;p&gt;For example, with the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- functionThatReturnsFutureValue1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value2 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- functionThatReturnsFutureValue2
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;(value1, value2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;functionThatReturnsFutureValue1&lt;&#x2F;code&gt; and &lt;code&gt;functionThatReturnsFutureValue2&lt;&#x2F;code&gt; runs sequentially, even if there is no dependency between the two.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futureValue1 &lt;&#x2F;span&gt;&lt;span&gt;= functionThatReturnsFutureValue1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;futureValue2 &lt;&#x2F;span&gt;&lt;span&gt;= functionThatReturnsFutureValue2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- futureValue1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value2 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- futureValue2
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;(value1, value2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;computes &lt;code&gt;functionThatReturnsFutureValue1&lt;&#x2F;code&gt; and &lt;code&gt;functionThatReturnsFutureValue2&lt;&#x2F;code&gt; in parallel.&lt;&#x2F;p&gt;
&lt;p&gt;It means that Scala Futures do not respect the principe of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Referential_transparency&quot;&gt;&amp;quot;referential transparency&amp;quot;&lt;&#x2F;a&gt;.
It&#x27;s not only a theoretical problem, new users of Scala Futures often have problems with that.&lt;&#x2F;p&gt;
&lt;p&gt;And what I do not like about Scala Future is that we always need an ExecutionContext, even for small non-blocking computations.&lt;&#x2F;p&gt;
&lt;p&gt;For example, instead of writing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;multiplyBy2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  f.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need either to import a ExecutionContext that is always used, or leave the liberty to the caller of the function and write:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;multiplyBy2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  f.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My first impression with Scalaz Tasks is that they have a better design than the Scala Futures.
But I have not used Scalaz Tasks extensively and cannot say if they have other problems.&lt;&#x2F;p&gt;
&lt;p&gt;But all in all, Scala Futures are here to stay. They are part of the standard API and are used everywhere.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m still wondering why the Scala Futures were designed that way.
I can only guess, but I think this avoids some common pitfalls:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;easy&amp;quot; for new-comers: simply import the default execution context and that’s all&lt;&#x2F;li&gt;
&lt;li&gt;safe by default: If a callback takes a long time (blocking IO and expensive computation), this callback will not block other ones. The execution context will be able to use a different thread for other computations.&lt;&#x2F;li&gt;
&lt;li&gt;and a design like Scala Tasks works well if all parts of the system are non-blocking and using one thread pool. The reality is more complex. Each driver&#x2F;http client can use its own thread pool. For example, an asynchronous http client may have its own thread pool because some parts of the networking API in Java is blocking like the standard ns lookup &lt;code&gt;InetAddress.getByName()&lt;&#x2F;code&gt;. Running a computation directly on the thread without forking it will run the computation of the thread pool of the http client. And that can lead to an exhaustion of the thread pool of the http client, and the http client cannot function anymore.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;introducing-the-trampoline-execution-context&quot;&gt;Introducing the trampoline execution context&lt;&#x2F;h3&gt;
&lt;p&gt;This performance problem with the standard execution context is not new. The play framework team had this problem, especially with Iteratees that compute everything with a Future and uses callbacks extensively on stream of data.
To solve this problem, James Roper introduced the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;playframework&#x2F;playframework&#x2F;blob&#x2F;master&#x2F;framework&#x2F;src&#x2F;iteratees&#x2F;src&#x2F;main&#x2F;scala&#x2F;play&#x2F;api&#x2F;libs&#x2F;iteratee&#x2F;Execution.scala#L31-L128&quot;&gt;trampoline Execution Context&lt;&#x2F;a&gt;.
This trampoline execution context is a great piece of software:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;it makes sure the callbacks are run on the same thread than the future to avoid context switchings.&lt;&#x2F;li&gt;
&lt;li&gt;it does not overflow with recursive callbacks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To show the benefit of the trampoline execution context, let&#x27;s call this function that does not make any sense, but simply calls &lt;code&gt;Future.map&lt;&#x2F;code&gt; n times:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ec&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; to n).foldLeft[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;]](Future.successful(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;⇒&lt;&#x2F;span&gt;&lt;span&gt; f.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With n = 5 000 000:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Scala Futures with standard EC: 0.037 ops&#x2F;s&lt;&#x2F;li&gt;
&lt;li&gt;Scala Futures with trampoline EC: 1.397 ops&#x2F;s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;should-we-use-the-trampoline-ec&quot;&gt;Should we use the trampoline EC?&lt;&#x2F;h3&gt;
&lt;p&gt;When we are confident with execution contexts, I thing we can use this trampoline EC if:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the callback is running very fast. For example:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;multiplyBy2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  f.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)(trampolineEC)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;we never call some blocking IO. This point can be tricky: some scala libs can use some java libs that use InputStream or OutputStream that can block.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you are unsure, use the standard EC.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to try this yourself, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;trampoline-EC&quot;&gt;code is on github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>review of Essential Slick (for Slick 3.0)</title>
		<published>2015-12-07T00:00:00+00:00</published>
		<updated>2015-12-07T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2015/12/07/review-of-essential-slick/" type="text/html"/>
		<id>https://yanns.github.io/blog/2015/12/07/review-of-essential-slick/</id>
		<content type="html">&lt;p&gt;I had the pleasure to review the book &amp;quot;&lt;a href=&quot;http:&#x2F;&#x2F;underscore.io&#x2F;books&#x2F;essential-slick&#x2F;&quot;&gt;Essential Slick&lt;&#x2F;a&gt;&amp;quot; about &lt;a href=&quot;http:&#x2F;&#x2F;slick.typesafe.com&#x2F;&quot;&gt;Slick 3&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I really enjoyed reading it. For anyone starting a project with Slick, I highly recommend this book, in particular to learn about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;how to build queries that can be composed and re-used&lt;&#x2F;li&gt;
&lt;li&gt;how to structure the code&lt;&#x2F;li&gt;
&lt;li&gt;the patterns, anti-patterns and pitfalls to avoid.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The book goes over a lot of concepts, from simple queries and data-modeling to views, projections, joins and aggregates.&lt;&#x2F;p&gt;
&lt;p&gt;Slick 3 has very powerful concepts that could be hard to manage. The book tries to teach us how to use them. &lt;&#x2F;p&gt;
&lt;p&gt;Some chapters are more demanding, for instance the 2nd chapter introduces in only a few pages concepts like Queries, Actions, Effects, Streaming.&lt;&#x2F;p&gt;
&lt;p&gt;But once the step managed, I had the feeling to have the good abstractions in my mind to build an application based on Slick. And I could use these concepts to solve the exercises.&lt;&#x2F;p&gt;
&lt;p&gt;What I really liked:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;exercices: I think I can only learn a library when I use it and the exercises in the book are a very good opportunity to practice.&lt;&#x2F;li&gt;
&lt;li&gt;the sbt console is so configured that I could copy&#x2F;paste all examples from the book into the console and play with them.&lt;&#x2F;li&gt;
&lt;li&gt;focus on composability and re-usability&lt;&#x2F;li&gt;
&lt;li&gt;the book also points out when one abstraction is not optimal for a particular problem and proposes some alternatives.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What I missed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the 3.0 version of Slick is a lot about asynchronity, streaming and I wish the book could dig further in these concepts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All in all, a very good book!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>play framework meetup in Berlin in November 2015</title>
		<published>2015-11-17T00:00:00+00:00</published>
		<updated>2015-11-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2015/11/17/introduction-to-type-classes-in-scala/" type="text/html"/>
		<id>https://yanns.github.io/blog/2015/11/17/introduction-to-type-classes-in-scala/</id>
		<content type="html">&lt;p&gt;During the &lt;a href=&quot;http:&#x2F;&#x2F;www.meetup.com&#x2F;Play-Berlin-Brandenburg&#x2F;events&#x2F;226561633&#x2F;&quot;&gt;play framework meetup in Berlin in November 2015&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;for-a-better-workflow-between-designers-and-developers&quot;&gt;for a better workflow between designers and developers&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;lluizesc&quot;&gt;Laura&lt;&#x2F;a&gt; made a very good talk about how to better organize the work between front-end designers and developers.&lt;&#x2F;p&gt;
&lt;p&gt;For that, her team build some tools:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the designer uses an assets pipeline in nodejs to build a website. The templates are written with &lt;a href=&quot;http:&#x2F;&#x2F;handlebarsjs.com&#x2F;&quot;&gt;handlebars&lt;&#x2F;a&gt;. When the website is ready, a release is made and all assets are packaged as a &lt;a href=&quot;http:&#x2F;&#x2F;www.webjars.org&#x2F;&quot;&gt;webjar&lt;&#x2F;a&gt;: https:&#x2F;&#x2F;github.com&#x2F;lauraluiz&#x2F;handlebars-webjars-demo&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;the developer uses a play framework application that is capable of using directly the assets released by the designer: https:&#x2F;&#x2F;github.com&#x2F;lauraluiz&#x2F;play-handlebars-demo&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Slides: &lt;a href=&quot;http:&#x2F;&#x2F;slides.com&#x2F;lauraluiz&#x2F;handlebarsplay&quot;&gt;http:&#x2F;&#x2F;slides.com&#x2F;lauraluiz&#x2F;handlebarsplay&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Project using this workflow: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sphereio&#x2F;sphere-sunrise&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;sphereio&#x2F;sphere-sunrise&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-classes-in-scala&quot;&gt;type classes in Scala&lt;&#x2F;h2&gt;
&lt;p&gt;I introduced type classes in Scala: &lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;yann_s&#x2F;introduction-to-type-classes-in-scala&quot;&gt;http:&#x2F;&#x2F;www.slideshare.net&#x2F;yann_s&#x2F;introduction-to-type-classes-in-scala&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Step by step, I explained how the Json Reads&#x2F;Writes&#x2F;Formats work in the &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.4.x&#x2F;ScalaJson&quot;&gt;scala API of the play framework&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>DI with play 2.4</title>
		<published>2015-05-20T00:00:00+00:00</published>
		<updated>2015-05-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2015/05/20/di-with-play-2-dot-4/" type="text/html"/>
		<id>https://yanns.github.io/blog/2015/05/20/di-with-play-2-dot-4/</id>
		<content type="html">&lt;p&gt;During the &lt;a href=&quot;http:&#x2F;&#x2F;www.meetup.com&#x2F;Play-Berlin-Brandenburg&#x2F;events&#x2F;222130013&#x2F;&quot;&gt;play framework meetup in Mai 2015&lt;&#x2F;a&gt;, there were 3 talks about Dependency Injection (DI) in Play 2.4:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;from Micheal: runtime DI in Java with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;guice&quot;&gt;Guice&lt;&#x2F;a&gt;, the default framework introduced in play 2.4: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;schleichardt&#x2F;play-2-4-di-talk&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;schleichardt&#x2F;play-2-4-di-talk&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;easyangel&quot;&gt;Oleg&lt;&#x2F;a&gt;: runtime DI in Scala with &lt;a href=&quot;http:&#x2F;&#x2F;scaldi.org&#x2F;&quot;&gt;Scaldi&lt;&#x2F;a&gt;: &lt;a href=&quot;http:&#x2F;&#x2F;scaldi.github.io&#x2F;scaldi-play-2.4.0-presentation&#x2F;&quot;&gt;http:&#x2F;&#x2F;scaldi.github.io&#x2F;scaldi-play-2.4.0-presentation&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;compile-time DI in Scala with constructor arguments or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;adamw&#x2F;macwire&quot;&gt;MacWire&lt;&#x2F;a&gt;: &lt;a href=&quot;http:&#x2F;&#x2F;de.slideshare.net&#x2F;yann_s&#x2F;play-24dimacwire&quot;&gt;http:&#x2F;&#x2F;de.slideshare.net&#x2F;yann_s&#x2F;play-24dimacwire&lt;&#x2F;a&gt;.
For that talk, I re-used the TBA application I used at the &lt;a href=&quot;&#x2F;blog&#x2F;2014&#x2F;02&#x2F;17&#x2F;ping-conf-2014&#x2F;&quot;&gt;Ping Conf&lt;&#x2F;a&gt; last year and added a version using MacWire: https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;TPA&#x2F;tree&#x2F;master&#x2F;frontend&#x2F;TBA_macwire&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>goto conference 2014</title>
		<published>2014-11-10T00:00:00+00:00</published>
		<updated>2014-11-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2014/11/10/goto-conference-2014/" type="text/html"/>
		<id>https://yanns.github.io/blog/2014/11/10/goto-conference-2014/</id>
		<content type="html">&lt;p&gt;My notes from the &lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&quot;&gt;goto conference Berlin 2014&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thursday&quot;&gt;Thursday&lt;&#x2F;h2&gt;
&lt;h5 id=&quot;opening-keynote-software-design-in-the-21st-century-martin-fowler&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Opening%20Keynote:%20Software%20Design%20in%20the%2021st%20Century&quot;&gt;Opening Keynote: Software Design in the 21st Century&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;martinfowler&quot;&gt;Martin Fowler&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;We, developers, take responsibility in the code we write.&lt;br&#x2F;&gt;
We cannot simply say: &amp;quot;I implemented that because I was told so&amp;quot;.&lt;br&#x2F;&gt;
Avoid &lt;a href=&quot;http:&#x2F;&#x2F;darkpatterns.org&#x2F;&quot;&gt;dark patterns&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We are not code monkeys.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;aeron-the-next-generation-in-open-source-high-performance-messaging-martin-thompson&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Aeron:%20The%20Next%20Generation%20in%20Open-Source%20High-Performance%20Messaging&quot;&gt;Aeron: The Next Generation in Open-Source High-Performance Messaging&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mjpt777&quot;&gt;Martin Thompson&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;MartinThompson_AeronTheNextGenerationInOpenSourceHighPerformanceMessaging.pdf&quot;&gt;slides&lt;&#x2F;a&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;mechanical-sympathy.blogspot.com&#x2F;&quot;&gt;blog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;real-logic&#x2F;Aeron&quot;&gt;Aeron&lt;&#x2F;a&gt; is a OSI layer 4 Transport for message oriented streams.
is simply impressive, achieving a very low latency.&lt;br&#x2F;&gt;
I&#x27;d like to see an integration of Aeron in Akka cluster.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=tM4YskS94b0&quot;&gt;similar talk&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;writing-highly-concurrent-polyglot-applications-with-vert-x-tim-fox&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Writing%20highly%20Concurrent%20Polyglot%20Applications%20with%20Vert.x&quot;&gt;Writing highly Concurrent Polyglot Applications with Vert.x&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;timfox&quot;&gt;Tim Fox&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;It was a good introduction to Vert.x.&lt;br&#x2F;&gt;
But I was expecting more than an introduction.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;fast-analytics-on-big-data-petr-maj-and-tomas-nykodym&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Fast%20Analytics%20on%20Big%20Data&quot;&gt;Fast Analytics on Big Data&lt;&#x2F;a&gt; - Petr Maj and Tomas Nykodym&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;PetrMaj_and_TomasNykodym_FastAnalyticsOnBigData.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Presentation of an ML runtime for bigdata.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0xdata&#x2F;h2o&quot;&gt;Code&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0xdata&#x2F;h2o-dev&quot;&gt;With Spark API&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;TODO: have a look at https:&#x2F;&#x2F;github.com&#x2F;0xdata&#x2F;h2o-training&lt;&#x2F;p&gt;
&lt;h5 id=&quot;security-architecture-for-the-smarthome-jacob-fahrenkrug&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Security%20Architecture%20for%20the%20SmartHome&quot;&gt;Security Architecture for the SmartHome&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jacobfahrenkrug&quot;&gt;Jacob Fahrenkrug&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;JacobFahrenkrug_SecurityArchitectureForTheSmartHome.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A good presentation about the future threats of connected objects and the solution &lt;a href=&quot;http:&#x2F;&#x2F;www.yetu.com&#x2F;&quot;&gt;yetu&lt;&#x2F;a&gt; implements.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;graph-all-the-things-graph-database-use-cases-that-aren-t-social-emil-eifrem&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Graph%20All%20The%20Things!!%20Graph%20Database%20Use%20Cases%20That%20Aren&amp;#x27;t%20Social&quot;&gt;Graph All The Things!! Graph Database Use Cases That Aren&#x27;t Social&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;emileifrem&quot;&gt;Emil Eifrem&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;EmilEifrem_GraphAllTheThingsGraphDatabaseUseCasesThatArentSocial.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;very good presentation of &lt;a href=&quot;http:&#x2F;&#x2F;neo4j.com&#x2F;&quot;&gt;Neo4j&lt;&#x2F;a&gt;.&lt;br&#x2F;&gt;
We should use a graph database where it make sense - the search queries are much easier to write &#x2F; read, and the performance very good.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;party-keynote-staying-ahead-of-the-curve-trisha-gee&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Party%20Keynote:%20Staying%20Ahead%20of%20the%20Curve&quot;&gt;Party Keynote: Staying Ahead of the Curve&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;trisha_gee&quot;&gt;Trisha Gee&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;TrishaGee_PartyKeynoteStayingAheadOfTheCurve.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;friday&quot;&gt;Friday&lt;&#x2F;h2&gt;
&lt;h5 id=&quot;morning-keynote-excellence-culture-humane-keeping-of-techies-prof-dr-gunter-dueck&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Morning%20Keynote:%20Excellence%20Culture%20&amp;amp;%20Humane%20Keeping%20of%20Techies&quot;&gt;Morning Keynote: Excellence Culture &amp;amp; Humane Keeping of Techies&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;wilddueck&quot;&gt;Prof. Dr. Gunter Dueck&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;a very good keynote, very funny and true at the same time.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;aerospike-flash-optimized-high-performance-nosql-database-for-all-khosrow-afroozeh&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Aerospike:%20Flash-optimized,%20High-Performance%20noSQL%20database%20for%20All&quot;&gt;Aerospike: Flash-optimized, High-Performance noSQL database for All&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;khaf&quot;&gt;Khosrow Afroozeh&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;KhosrowAfroozeh_AerospikeFlashOptimizedHighPerformanceNoSQLDatabaseForAll.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A new database on my radar - impressive.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;docker-a-lot-changed-in-a-year-chris-swan&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Docker%20-%20A%20Lot%20Changed%20in%20a%20Year&quot;&gt;Docker - A Lot Changed in a Year&lt;&#x2F;a&gt; - &lt;a href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;cpswan&quot;&gt;Chris Swan&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;ChrisSwan_DockerALotChangedInAYear.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Docker is maturating.&lt;br&#x2F;&gt;
Just do not forget that &amp;quot;containers do not contain&amp;quot; -&amp;gt; no complete security between container and host, and between containers.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;the-joys-and-perils-of-interactive-development-stuart-sierra&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;The%20Joys%20and%20Perils%20of%20Interactive%20Development&quot;&gt;The Joys and Perils of Interactive Development&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;stuartsierra&quot;&gt;Stuart Sierra&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;protected&#x2F;StuartSierra_TheJoysAndPerilsOfInteractiveDevelopment.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;new-concurrency-utilities-in-java-8-angelika-langer&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;New%20Concurrency%20Utilities%20in%20Java%208&quot;&gt;New Concurrency Utilities in Java 8&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;AngelikaLanger&quot;&gt;Angelika Langer&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;protected&#x2F;AngelikaLanger_NewConcurrencyUtilitiesInJava8.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Future API is becoming usable, it is now possible to chain futures and callbacks.&lt;&#x2F;li&gt;
&lt;li&gt;new StampedLock is optimized for reading. (personal note: but lock-free algorithms should be preferred, like in &lt;a href=&quot;http:&#x2F;&#x2F;mechanical-sympathy.blogspot.com&#x2F;&quot;&gt;Lock-Based vs Lock-Free Concurrent Algorithms&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;adaptive-planning-beyond-user-stories-gojko-adzic&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;berlin-2014&#x2F;presentation&#x2F;Adaptive%20Planning%20-%20Beyond%20User%20Stories&quot;&gt;Adaptive Planning - Beyond User Stories&lt;&#x2F;a&gt; - &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;gojkoadzic&quot;&gt;Gojko Adzic&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gojko.net&#x2F;&quot;&gt;blog&lt;&#x2F;a&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;gotocon.com&#x2F;dl&#x2F;goto-berlin-2014&#x2F;slides&#x2F;GojkoAdzic_AdaptivePlanningBeyondUserStories.pdf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Gojko Adzic really thinks agile. Good presentation of how to make better user stories.&lt;br&#x2F;&gt;
Do not describe a desired behavior but a behavior change.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>asynchronous IO for Play! applications in servlet 3.1 containers with the play2-war plugin</title>
		<published>2014-08-10T00:00:00+00:00</published>
		<updated>2014-08-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2014/08/10/complete-asynchronous-io-for-play-applications-in-servlet-3-dot-1-containers-with-the-play2-war-plugin/" type="text/html"/>
		<id>https://yanns.github.io/blog/2014/08/10/complete-asynchronous-io-for-play-applications-in-servlet-3-dot-1-containers-with-the-play2-war-plugin/</id>
		<content type="html">&lt;p&gt;A &lt;a href=&quot;http:&#x2F;&#x2F;playframework.com&#x2F;&quot;&gt;Play application&lt;&#x2F;a&gt; does not need any container and &lt;a href=&quot;http:&#x2F;&#x2F;playframework.com&#x2F;documentation&#x2F;2.3.x&#x2F;Production&quot;&gt;runs directly in production&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However some organizations prefer to run play applications within a servlet container and can use for this the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;play2war&#x2F;play2-war-plugin&quot;&gt;WAR Plugin&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I am very pleased to share that this plugin is now compatible with servlet 3.1 containers. It can now use the new asynchronous IO possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;Let me explain why and when it is important.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;play-applications-are-asynchronous&quot;&gt;Play applications are asynchronous&lt;&#x2F;h3&gt;
&lt;p&gt;The Play Framework is build to be totally asynchronous and reactive. It uses no blocking IO. A Play application scales very well, using very few threads.&lt;&#x2F;p&gt;
&lt;p&gt;This reactive consuming or construction of IO stream is designed in play with &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.3.x&#x2F;Iteratees&quot;&gt;Iteratees&lt;&#x2F;a&gt;. It will progressively be completed with &lt;a href=&quot;http:&#x2F;&#x2F;typesafe.com&#x2F;blog&#x2F;typesafe-announces-akka-streams&quot;&gt;Akka Streams&lt;&#x2F;a&gt;, the implementation in Akka of the reactive stream project (http:&#x2F;&#x2F;www.reactive-streams.org&#x2F;)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;servlet-containers-use-blocking-io&quot;&gt;Servlet containers use blocking IO&lt;&#x2F;h3&gt;
&lt;p&gt;On the other hand, servlet containers traditionally use a &lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;brikis98&#x2F;the-play-framework-at-linkedin&#x2F;62&quot;&gt;thread per request&lt;&#x2F;a&gt;. When doing IO (database access, external web request), the thread waits for the IO completion (blocking IO). That&#x27;s why servlet containers need a lot of working threads to handle requests in parallel (&lt;a href=&quot;http:&#x2F;&#x2F;tomcat.apache.org&#x2F;tomcat-7.0-doc&#x2F;config&#x2F;executor.html&quot;&gt;default 200 threads max for tomcat&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;asynchronous-3-0-servlet&quot;&gt;Asynchronous 3.0 servlet&lt;&#x2F;h4&gt;
&lt;p&gt;Servlet 3.0 containers introduced the possibility to “suspend” a request.
For example, if an application makes an HTTP request to another web service using the &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.3.x&#x2F;ScalaWS&quot;&gt;WS client&lt;&#x2F;a&gt;, the play2 war plugin is able to suspend the servlet request until the external web service answers. It means that with the same number of servlet threads, a servlet 3.0 container can support more requests in parallel than a servlet 2.x container. It does not need that a thread waits for an HTTP request, this thread can be used for other requests.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;limitations-of-asynchronous-3-0-servlet&quot;&gt;Limitations of asynchronous 3.0 servlet&lt;&#x2F;h4&gt;
&lt;p&gt;When uploading or downloading a big file, the servlet container is able to stream the data. But between each chunks, the servlet thread is blocking, waiting for the next one.
It is not possible to consume one chunk, and later, when we are ready to consume another one, tell the container: “now I am ready, you can send me the next chunk as soon as you receive one from the browser”.&lt;&#x2F;p&gt;
&lt;p&gt;If a browser needs an hour to upload a file with a slow Internet connection, the container needs a thread during an hour, even if the application does not do anything, just waiting for the upload completion.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;play-applications-deployed-as-war-are-limited-by-the-servlet-container&quot;&gt;Play applications deployed as war are limited by the servlet container&lt;&#x2F;h3&gt;
&lt;p&gt;A Play application deployed in a war container is limited by the technical possibilites of the servlet API. With a servlet 2.x or 3.0, a Play application does not scale as well as when run natively.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-asynchronous-io-in-servlet-3-1&quot;&gt;New asynchronous IO in servlet 3.1&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;jcp.org&#x2F;en&#x2F;jsr&#x2F;detail?id=340&quot;&gt;servlet 3.1 specification&lt;&#x2F;a&gt; added asynchronous IO. Based on &lt;a href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;EventListener.html&quot;&gt;events&lt;&#x2F;a&gt;, it is now possible to completly handle an &lt;a href=&quot;https:&#x2F;&#x2F;javaee-spec.java.net&#x2F;nonav&#x2F;javadocs&#x2F;javax&#x2F;servlet&#x2F;ReadListener.html&quot;&gt;upload&lt;&#x2F;a&gt; and a &lt;a href=&quot;https:&#x2F;&#x2F;javaee-spec.java.net&#x2F;nonav&#x2F;javadocs&#x2F;javax&#x2F;servlet&#x2F;WriteListener.html&quot;&gt;download&lt;&#x2F;a&gt; asynchronously.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asynchronous-io-in-war-plugin-for-play-applications&quot;&gt;Asynchronous IO in WAR Plugin for Play! applications&lt;&#x2F;h3&gt;
&lt;p&gt;Since the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;play2war&#x2F;play2-war-plugin&#x2F;releases&#x2F;tag&#x2F;1.2&quot;&gt;version 1.2&lt;&#x2F;a&gt;, the play2 war plugin is using this API to provide a complete reactive upload and download.&lt;&#x2F;p&gt;
&lt;p&gt;To use this, simply &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;play2war&#x2F;play2-war-plugin&#x2F;wiki&#x2F;Configuration#servlet-31-container-configuration&quot;&gt;configure the servlet container version&lt;&#x2F;a&gt; and deploy to a servlet 3.1 server.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;when-to-use-this-feature&quot;&gt;When to use this feature?&lt;&#x2F;h4&gt;
&lt;p&gt;This feature should be used especially if the application is using big download&#x2F;upload. The servlet 3.1 will help to scale much better.&lt;&#x2F;p&gt;
&lt;p&gt;During my tests, I could upload and download files from several GB in parallel. The container and the JVM garbage collection could support that without any problems. The memory usage was very low.&lt;&#x2F;p&gt;
&lt;p&gt;Also please test this new version and report issues!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;how-to-build-the-application-to-scale-better&quot;&gt;How to build the application to scale better?&lt;&#x2F;h4&gt;
&lt;p&gt;To scale as much as possible, the application should not block. It should always use asynchronous IO API like in the WS client.&lt;&#x2F;p&gt;
&lt;p&gt;But in the Java World a lot a librairies are still designed for a one-thread-per-request model and do not provide asynchronous API. It is for example the case for a JDBC driver. In that case, a separate dispatcher should be configured to handle blocking IO. More Information for this can be found in the &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.3.x&#x2F;ThreadPools&quot;&gt;Play Framework documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementation-history&quot;&gt;Implementation history&lt;&#x2F;h3&gt;
&lt;p&gt;The implementation of asynchronous IO in the WAR plugin lasted a few months.
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;play2war&#x2F;play2-war-plugin&#x2F;pull&#x2F;204&quot;&gt;first pull request&lt;&#x2F;a&gt; introduced the asynchronous download, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;play2war&#x2F;play2-war-plugin&#x2F;pull&#x2F;235&quot;&gt;the second one&lt;&#x2F;a&gt; the asynchronous upload.
I&#x27;d like to thank &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jroper&quot;&gt;James Roper&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;viktorklang&quot;&gt;Viktor Klang&lt;&#x2F;a&gt; for their reviews.&lt;&#x2F;p&gt;
&lt;p&gt;This feature was quite challenging to implement:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I had to find a good way to implement the glue between two very different APIs. The servlet 3.1 API is quite imperative and use &lt;a href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;EventListener.html&quot;&gt;EventListener&lt;&#x2F;a&gt; and methods with side effects. The Iteratee API is functional and I needed some time to feel at ease with it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The servlet 3.1 specification was recently finalized as I began. The first implementations in some containers contained bugs. Reporting the problems, explaining, convincing other developers took a lot of time and energy.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The servlet 3.1 specification is not always explicit. The implementations in the different servlet containers are also different. Finding an implementation that covers all these subtle differences was challenging. The &lt;a href=&quot;https:&#x2F;&#x2F;play-war.ci.cloudbees.com&#x2F;job&#x2F;Play_2_War_Run_integration_tests_-_Play_22x&#x2F;&quot;&gt;testing infrastructure of the play2-war plugin&lt;&#x2F;a&gt; provides a lot of integration tests with different containers and helped a lot for this.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My firm &lt;a href=&quot;http:&#x2F;&#x2F;www.leanovate.de&#x2F;&quot;&gt;Leanovate&lt;&#x2F;a&gt; gave me some time to work on that. Having worked two days full time on it helped me a lot. Thanks Leanovate for this!&lt;&#x2F;p&gt;
&lt;p&gt;All in all it was a great experience to contribute to the WAR Plugin, and I hope my work will be useful for others.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>enlarge your test scope</title>
		<published>2014-05-30T00:00:00+00:00</published>
		<updated>2014-05-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2014/05/30/enlarge-your-test-scope/" type="text/html"/>
		<id>https://yanns.github.io/blog/2014/05/30/enlarge-your-test-scope/</id>
		<content type="html">&lt;p&gt;At the beginning at the year, I had the chance to present &lt;a href=&quot;&#x2F;blog&#x2F;2014&#x2F;02&#x2F;17&#x2F;ping-conf-2014&#x2F;&quot;&gt;how to organize a play application with the Cake pattern&lt;&#x2F;a&gt; at &lt;a href=&quot;http:&#x2F;&#x2F;www.ping-conf.com&#x2F;&quot;&gt;Ping Conf&lt;&#x2F;a&gt;.
I showed how this pattern enable designing the application as components, how to reduce visibility of specific gateway&#x27;s model only to components that need it. One side-effect of the cake pattern is that it allows a dependency injection resolved at compilation time.&lt;&#x2F;p&gt;
&lt;p&gt;In one of my last slides, I warned against abusing a dependency injection mechanism to write too much unit tests.
To stay within the time slot, I have not developed so much my concerns about that point.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&amp;#x2F;&amp;#x2F;image.slidesharecdn.com&amp;#x2F;play-with-cake-export2-140121150250-phpapp01&amp;#x2F;95&amp;#x2F;slide-66-638.jpg&quot; alt=&quot;Do not over-use unit testing&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;During the talk, I implemented an application to demonstrate my points. This application consumes two external web services to render HTML pages. It is quite a typical application we can see in an infrastructure build with micro-services.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve now took the time to write a new version of this application I used in the demo.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;TPA&#x2F;tree&#x2F;master&#x2F;frontend&#x2F;TBA_07&quot;&gt;And This new version is not using any unit tests but only some sort of component tests.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s dig into the details how this new version differs from the ones build around the Cake pattern.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;traditional-view-of-unit-tests&quot;&gt;Traditional view of unit tests&lt;&#x2F;h3&gt;
&lt;p&gt;When building an application, we usually structure the code into layers to separate responsibilities, thus enabling re-use of logic, and avoiding repetition.&lt;&#x2F;p&gt;
&lt;p&gt;In the demo I used for the talk, the application is for example layered into views, controllers, services and gateways. All these layers have access to a common model.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&amp;#x2F;&amp;#x2F;image.slidesharecdn.com&amp;#x2F;play-with-cake-export2-140121150250-phpapp01&amp;#x2F;95&amp;#x2F;slide-10-638.jpg&quot; alt=&quot;code structured in layers&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A traditional approach of unit test is to consider one class or function of one layer as a unit to test. The other dependent layers are mocked.&lt;&#x2F;p&gt;
&lt;p&gt;For example, to test the service layers, we use mocks for the gateways, simulating responses from external web services.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&amp;#x2F;&amp;#x2F;image.slidesharecdn.com&amp;#x2F;play-with-cake-export2-140121150250-phpapp01&amp;#x2F;95&amp;#x2F;slide-21-638.jpg&quot; alt=&quot;Testing with components&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This approach works well, but has several downsides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the unit tests prove that one layer is working as expected, but they said nothing about all the layers used together.&lt;&#x2F;li&gt;
&lt;li&gt;the unit tests use the internal details of the implementation. Re-factoring the code implies then to change a lot of tests.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By using dependency injection and mocks, it is nowadays very easy to write unit tests. The effect if some applications are tested almost only with unit tests:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&amp;#x2F;&amp;#x2F;image.slidesharecdn.com&amp;#x2F;play-with-cake-export2-140121150250-phpapp01&amp;#x2F;95&amp;#x2F;slide-65-638.jpg&quot; alt=&quot;Test pyramide&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;traditional-view-of-component-tests&quot;&gt;Traditional view of component tests&lt;&#x2F;h3&gt;
&lt;p&gt;To complement the unit tests, a team can decide to implement some component tests.&lt;&#x2F;p&gt;
&lt;p&gt;For the sample used in the talk, the component is the font end application we are currently implementing.&lt;&#x2F;p&gt;
&lt;p&gt;The most common way to run component tests is to start the tested application. The application is configured not to use the real external web services, but some local mock implementations. The local mock implementations are started as http servers as well, running on different ports.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&amp;#x2F;&amp;#x2F;image.slidesharecdn.com&amp;#x2F;play-with-cake-export2-140121150250-phpapp01&amp;#x2F;95&amp;#x2F;slide-13-638.jpg&quot; alt=&quot;Component tests&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When the application and all the mocks are started, we can test the application by sending some http requests and by analyzing the responses.&lt;&#x2F;p&gt;
&lt;p&gt;Setting up the test environment with this approach is quite complex. For each external web service, a mock must be implemented as a real local http server. We must start all mock implementations, and then the new configured application. At the end of the tests, we must shutdown all services, even in case of exceptions.&lt;&#x2F;p&gt;
&lt;p&gt;But the main drawback with this approach in my opinion is that running the tests take a lot of time, too much to be integrated in a normal development flow (write code -&amp;gt; compile -&amp;gt; test)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-alternative-approach-between-component-and-unit-tests&quot;&gt;An alternative approach between component and unit tests&lt;&#x2F;h3&gt;
&lt;p&gt;To strictly adhere to the definition of component tests, we should treat the tested application as a black box, and simulate all external web services. We saw that this approach is somewhat heavy to use: each external web service must be mock with a real http server.&lt;&#x2F;p&gt;
&lt;p&gt;Starting and running the tests in that configuration take time. Debugging an error can be difficult.&lt;&#x2F;p&gt;
&lt;p&gt;The strategy I used in new version of the demo application (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;TPA&#x2F;tree&#x2F;master&#x2F;frontend&#x2F;TBA_07&quot;&gt;TBA_07&lt;&#x2F;a&gt;) is a little bit different.
The idea is still to use a request &#x2F; response to test the application, but without having to run the application and any external web services.&lt;&#x2F;p&gt;
&lt;p&gt;Implementing that is actually quite easy: each layer declared as dependency an HTTP client (a &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.3.x&#x2F;api&#x2F;scala&#x2F;index.html#play.api.libs.ws.WSClient&quot;&gt;WSClient&lt;&#x2F;a&gt; in play framework 2.3)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The http client is a dependency at the top (controllers&#x27; layer):&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;controllers
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Application&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;WSClient&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: play.api.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Controller &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topVideoService &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TopVideoService&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(ws, app)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(a second &amp;quot;dependency&amp;quot; is the current play application. This approach is very convenient to simulate different configurations)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The real implementation of the http client is then &amp;quot;injected&amp;quot; at the last time, when we construct the controller singleton:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;def playCurrent = play.api.Play.current
&lt;&#x2F;span&gt;&lt;span&gt;object Application extends Application(WS.client(playCurrent), playCurrent)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;To test the application, we then simply have to instantiate the controller with an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;TPA&#x2F;blob&#x2F;master&#x2F;frontend&#x2F;TBA_07&#x2F;test&#x2F;httpclient&#x2F;MockWS.scala&quot;&gt;alternative implementation of the http client capable of simulating external web services&lt;&#x2F;a&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; ApplicationControllerFixture
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;(MockWS(playerRoute), FakeApplication())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;playerRoute&lt;&#x2F;code&gt; simulate the external player web service:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;playerId &lt;&#x2F;span&gt;&lt;span&gt;= PlayerId(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;playerRoute&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MockWS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Routes &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GET&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; u == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:9001&#x2F;players&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$playerId&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Action { Ok(Json.parse(playerJson(playerId))) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Action { NotFound }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;playerJson&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;playerId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PlayerId&lt;&#x2F;span&gt;&lt;span&gt;) =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       |  &amp;quot;id&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$playerId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       |  &amp;quot;name&amp;quot;: &amp;quot;ze name&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       |  &amp;quot;height&amp;quot;: &amp;quot;ze height&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       |  &amp;quot;weight&amp;quot;: &amp;quot;ze weight&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       |  &amp;quot;team&amp;quot;: &amp;quot;ze team&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;       |}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;.stripMargin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;MockWS.Routes&lt;&#x2F;code&gt; type defines a partial function &lt;code&gt;PartialFunction[(String, String), EssentialAction]&lt;&#x2F;code&gt;, making really easy to combine different routes together with &lt;code&gt;orElse&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;SimulatedVideoBackend.videoRoute orElse SimulatedPlayerBackend.playerRoute
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;and we can test the response by calling the controller with a &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.3.x&#x2F;api&#x2F;scala&#x2F;index.html#play.api.test.FakeRequest&quot;&gt;&lt;code&gt;FakeRequest&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;= index.apply(FakeRequest())
&lt;&#x2F;span&gt;&lt;span&gt;status(result) mustEqual OK
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The application is constructed as if it was depending from the http client and the current play application.&lt;&#x2F;p&gt;
&lt;p&gt;These tests are not strictly component tests, as we are not testing the real implementation of the http client.
The application is not entirely treated as a black box. But most of the code is tested like in production.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;drawbacks-of-this-approach&quot;&gt;Drawbacks of this approach:&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;writing a test is more complicated than testing a little unit of code&lt;&#x2F;li&gt;
&lt;li&gt;writing unit test can help avoiding code mixing responsibilities. We do not profit from that.&lt;&#x2F;li&gt;
&lt;li&gt;when a test suddenly fails, it is more difficult to find out why.&lt;&#x2F;li&gt;
&lt;li&gt;we do not test the complete application stack. For example, the &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.3.x&#x2F;ScalaHttpFilters&quot;&gt;play filters&lt;&#x2F;a&gt; and the real http client is not tested.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;advantages-of-this-approach&quot;&gt;Advantages of this approach:&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;a developer must understand how the application works in general to be able to write good tests&lt;&#x2F;li&gt;
&lt;li&gt;the application can be re-factored without modifying the tests&lt;&#x2F;li&gt;
&lt;li&gt;the user functions are better tested&lt;&#x2F;li&gt;
&lt;li&gt;the integration of all layers together is tested&lt;&#x2F;li&gt;
&lt;li&gt;we do not need any running server to check all the tests. The tests run very fast.&lt;&#x2F;li&gt;
&lt;li&gt;the code is simple (compare the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;TPA&#x2F;blob&#x2F;master&#x2F;frontend&#x2F;TBA_07&#x2F;app&#x2F;services&#x2F;TopVideoService.scala&quot;&gt;TopVideoService in that version&lt;&#x2F;a&gt; with the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;TPA&#x2F;blob&#x2F;master&#x2F;frontend&#x2F;TBA_05_final&#x2F;app&#x2F;services&#x2F;TopVideoServiceComp.scala&quot;&gt;one using the Cake pattern&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;experience-with-that-approach&quot;&gt;Experience with that approach&lt;&#x2F;h3&gt;
&lt;p&gt;With one team, we are currently testing this approach. The results are quite encouraging: more than 80 % of the statements are covered by tests. We have more than 200 tests running in 10 seconds on my machine.&lt;&#x2F;p&gt;
&lt;p&gt;And I could deeply change the code with almost no impact on the tests. ;)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>SLF4J Mapped Diagnostic Context (MDC) with play framework</title>
		<published>2014-05-04T00:00:00+00:00</published>
		<updated>2014-05-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2014/05/04/slf4j-mapped-diagnostic-context-mdc-with-play-framework/" type="text/html"/>
		<id>https://yanns.github.io/blog/2014/05/04/slf4j-mapped-diagnostic-context-mdc-with-play-framework/</id>
		<content type="html">&lt;p&gt;I&#x27;d like the share with this post one solution I found to use a Mapped Diagnostic Context (MDC) in an asynchronous environment like the play framework.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;edit-september-2014&quot;&gt;Edit (September 2014)&lt;&#x2F;h2&gt;
&lt;p&gt;Based on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jroper&#x2F;thread-local-context-propagation&#x2F;&quot;&gt;one implementation from James Roper&lt;&#x2F;a&gt;, I added one solution based on &lt;a href=&quot;http:&#x2F;&#x2F;doc.akka.io&#x2F;docs&#x2F;akka&#x2F;current&#x2F;scala&#x2F;dispatchers.html&quot;&gt;Akka Dispatcher&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;tl;dr&lt;&#x2F;h2&gt;
&lt;p&gt;This post provides two solution to propagate the MDC context in an asynchronous Play application:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;using a custom Akka &lt;code&gt;Dispatcher&lt;&#x2F;code&gt;. This solution needs minimal change to a current application.&lt;&#x2F;li&gt;
&lt;li&gt;using a custom &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt; that propagates the MDC from the caller&#x27;s thread to the callee&#x27;s one. A custom &lt;code&gt;ActionBuilder&lt;&#x2F;code&gt; is necessary as well to completely use this custom &lt;code&gt;ExectionContext&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-mapped-diagnostic-context-mdc&quot;&gt;The Mapped Diagnostic Context (MDC)&lt;&#x2F;h2&gt;
&lt;p&gt;The play framework uses for logging &lt;a href=&quot;http:&#x2F;&#x2F;logback.qos.ch&#x2F;&quot;&gt;Logback&lt;&#x2F;a&gt; behind &lt;a href=&quot;http:&#x2F;&#x2F;www.slf4j.org&#x2F;&quot;&gt;SLF4J (&amp;quot;Simple Logging Facade for Java&amp;quot;)&lt;&#x2F;a&gt;.&lt;br&#x2F;&gt;
This library provides a convenient feature: the &lt;a href=&quot;http:&#x2F;&#x2F;logback.qos.ch&#x2F;manual&#x2F;mdc.html&quot;&gt;Mapped Diagnostic Context (MDC)&lt;&#x2F;a&gt;.
This context can be used to store values that can be displayed in every Logging statement.&lt;br&#x2F;&gt;
For example, if we want to display the current user ID:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; org.slf4j.MDC
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;= currentUser.id
&lt;&#x2F;span&gt;&lt;span&gt;MDC.put(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-UserId&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, currentUser.id)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the block of code that uses the Logger
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; for example:
&lt;&#x2F;span&gt;&lt;span&gt;    play.api.Logger.info(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; clean up the MDC
&lt;&#x2F;span&gt;&lt;span&gt;    MDC.remove(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-UserId&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(This code could be in a &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;latest&#x2F;ScalaHttpFilters&quot;&gt;filter&lt;&#x2F;a&gt;, run for each request)&lt;&#x2F;p&gt;
&lt;p&gt;Logback must be configured to display the &lt;code&gt;X-UserId&lt;&#x2F;code&gt; value:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ch.qos.logback.core.ConsoleAppender&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pattern&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;%d{HH:mm:ss.SSS} %coloredLevel %logger{35} %mdc{X-UserId:--} - %msg%n%rootException&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pattern&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appender&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the log file, the MDC value for &lt;code&gt;X-UserId&lt;&#x2F;code&gt; is now printed out.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;10:50:54.773 [info] application jean.leloup - test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;limitation-of-the-default-implementation-of-the-mdc&quot;&gt;Limitation of the default implementation of the MDC&lt;&#x2F;h2&gt;
&lt;p&gt;To record the values in the MDC, Logback uses a &lt;code&gt;ThreadLocal&lt;&#x2F;code&gt; variable.
This strategy works when one thread is used for one request, like in servlet container before the 3.1 specification.&lt;&#x2F;p&gt;
&lt;p&gt;Play framework, on the other hand, is &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.2.x&#x2F;ScalaAsync&quot;&gt;asynchronous&lt;&#x2F;a&gt;. The processing of a request is composed of several function calls, and each call can be run on a different thread. (&amp;quot;Don&#x27;t call me, I&#x27;ll call you&amp;quot;)&lt;&#x2F;p&gt;
&lt;p&gt;The implementation of the MDC with a &lt;code&gt;ThreadLocal&lt;&#x2F;code&gt; cannot work with this non-blocking asynchronous threading model.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-solution-with-akka-dispatcher&quot;&gt;First solution with Akka Dispatcher&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;defining-a-custom-akka-dispatcher&quot;&gt;Defining a custom Akka dispatcher&lt;&#x2F;h4&gt;
&lt;p&gt;Play dispatchs the jobs on different threads with a &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;latest&#x2F;ThreadPools&quot;&gt;thread pool&lt;&#x2F;a&gt;. The Play default thread pool is an &lt;a href=&quot;http:&#x2F;&#x2F;doc.akka.io&#x2F;docs&#x2F;akka&#x2F;current&#x2F;scala&#x2F;dispatchers.html&quot;&gt;Akka dispatcher&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To use the MDC, we provide a custom Akka &lt;code&gt;Dispatcher&lt;&#x2F;code&gt; that propagates the MDC from the caller&#x27;s thread to the callee&#x27;s one.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;monitoring
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; java.util.concurrent.TimeUnit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; akka.dispatch.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; com.typesafe.config.Config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; org.slf4j.MDC
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; scala.concurrent.ExecutionContext
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; scala.concurrent.duration.{Duration, FiniteDuration}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Configurator for a MDC propagating dispatcher.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * To use it, configure play like this:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * {{{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * play {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *   akka {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *     actor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *       default-dispatcher = {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *         type = &amp;quot;monitoring.MDCPropagatingDispatcherConfigurator&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *       }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *     }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * }}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Credits to James Roper for the [[https:&#x2F;&#x2F;github.com&#x2F;jroper&#x2F;thread-local-context-propagation&#x2F; initial implementation]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; MDCPropagatingDispatcherConfigurator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prerequisites&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DispatcherPrerequisites&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MessageDispatcherConfigurator&lt;&#x2F;span&gt;&lt;span&gt;(config, prerequisites) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MDCPropagatingDispatcher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    config.getString(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    config.getInt(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;throughput&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    FiniteDuration(config.getDuration(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;throughput-deadline-time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, TimeUnit.NANOSECONDS), TimeUnit.NANOSECONDS),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    configureExecutor(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    FiniteDuration(config.getDuration(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shutdown-timeout&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dispatcher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MessageDispatcher &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; instance
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * A MDC propagating dispatcher.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * This dispatcher propagates the MDC current request context if it&amp;#39;s set when it&amp;#39;s executed.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; MDCPropagatingDispatcher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_configurator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MessageDispatcherConfigurator&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;throughput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;throughputDeadlineTime&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;executorServiceFactoryProvider&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutorServiceFactoryProvider&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shutdownTimeout&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;FiniteDuration&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Dispatcher&lt;&#x2F;span&gt;&lt;span&gt;(_configurator, id, throughput, throughputDeadlineTime, executorServiceFactoryProvider, shutdownTimeout ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;prepare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; capture the MDC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mdcContext &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;MDC.getCopyOfContextMap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Runnable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; self.execute(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Runnable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; backup the callee MDC context
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oldMDCContext &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;MDC.getCopyOfContextMap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Run the runnable with the captured context
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        setContextMap(mdcContext)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          r.run()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; restore the callee MDC context
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          setContextMap(oldMDCContext)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    })
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reportFailure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; self.reportFailure(t)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setContextMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(context &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      MDC.clear()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      MDC.setContextMap(context)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;using-a-custom-akka-dispatcher-everywhere&quot;&gt;Using a custom Akka dispatcher everywhere:&lt;&#x2F;h4&gt;
&lt;p&gt;To use this custom Akka dispatcher everywhere, we just have to configure it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash application.conf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash application.conf &quot;&gt;&lt;code class=&quot;language-bash application.conf&quot; data-lang=&quot;bash application.conf&quot;&gt;&lt;span&gt;play {
&lt;&#x2F;span&gt;&lt;span&gt;  akka {
&lt;&#x2F;span&gt;&lt;span&gt;    actor {
&lt;&#x2F;span&gt;&lt;span&gt;      default-dispatcher = {
&lt;&#x2F;span&gt;&lt;span&gt;        type = &amp;quot;monitoring.MDCPropagatingDispatcherConfigurator&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and that&#x27;s all! ;)&lt;&#x2F;p&gt;
&lt;p&gt;The MDC context is propagated when we use the play default &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.3.x&#x2F;api&#x2F;scala&#x2F;index.html#play.api.libs.concurrent.Execution$&quot;&gt;&lt;code&gt;ExecutionContext&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;optimization&quot;&gt;Optimization&lt;&#x2F;h4&gt;
&lt;p&gt;So that this approach works in dev mode, simply make a library (jar) of this custom Akka dispatcher and add this as dependency in your play application.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;second-solution-with-a-custom-execution-context&quot;&gt;Second solution with a custom execution context&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;defining-a-custom-execution-context&quot;&gt;Defining a custom execution context&lt;&#x2F;h4&gt;
&lt;p&gt;The dispatching of the jobs on different threads in done with an &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt;. Each &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt; manages a &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;latest&#x2F;ThreadPools&quot;&gt;thread pool&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To use the MDC, we just have to use a custom &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt; that propagates the MDC from the caller&#x27;s thread to the callee&#x27;s one.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; org.slf4j.MDC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; scala.concurrent.{ExecutionContextExecutor, ExecutionContext}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * slf4j provides a MDC [[http:&#x2F;&#x2F;logback.qos.ch&#x2F;manual&#x2F;mdc.html Mapped Diagnostic Context]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * based on a [[ThreadLocal]]. In an asynchronous environment, the callbacks can be called
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * in another thread, where the local thread variable does not exist anymore.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * This execution context fixes this problem:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * it propagates the MDC from the caller&amp;#39;s thread to the callee&amp;#39;s one.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; MDCHttpExecutionContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * Create an MDCHttpExecutionContext with values from the current thread.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fromThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delegate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContextExecutor &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MDCHttpExecutionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(MDC.getCopyOfContextMap, delegate)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Manages execution to ensure that the given MDC context are set correctly
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * in the current thread. Actual execution is performed by a delegate ExecutionContext.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; MDCHttpExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mdcContext&lt;&#x2F;span&gt;&lt;span&gt;: java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delegate&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExecutionContextExecutor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runnable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Runnable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; delegate.execute(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Runnable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;oldMDCContext &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;MDC.getCopyOfContextMap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      setContextMap(mdcContext)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        runnable.run()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        setContextMap(oldMDCContext)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  })
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setContextMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(context &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      MDC.clear()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      MDC.setContextMap(context)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reportFailure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; delegate.reportFailure(t)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can define the default ExecutionContext in our application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;concurrent
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; scala.concurrent.ExecutionContext
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * The standard [[play.api.libs.concurrent.Execution.defaultContext]] loses the MDC context.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * This custom [[ExecutionContext]] propagates the MDC context, so that the request
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * and the correlation IDs can be logged.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Execution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Implicits &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;defaultContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Execution.defaultContext
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;defaultContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;MDCHttpExecutionContext.fromThread(play.api.libs.concurrent.Execution.defaultContext)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we will use the &lt;code&gt;concurrent.Execution.defaultContext&lt;&#x2F;code&gt; instead of the one from play (&lt;code&gt;play.api.libs.concurrent.Execution.defaultContext&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;using-a-custom-execution-context-everywhere&quot;&gt;Using a custom execution context everywhere&lt;&#x2F;h4&gt;
&lt;p&gt;Using a custom execution context is sometimes as easy as replacing
&lt;code&gt;import play.api.libs.concurrent.Execution.Implicits._&lt;&#x2F;code&gt; with &lt;code&gt;import concurrent.Execution.Implicits._&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The default &lt;a href=&quot;https:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;latest&#x2F;ScalaActions&quot;&gt;&lt;code&gt;Action&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; uses the default &lt;code&gt;play.api.libs.concurrent.Execution.defaultContext&lt;&#x2F;code&gt;.
We must define a custom &lt;code&gt;ActionBuilder&lt;&#x2F;code&gt; that uses our new &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;controllers
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; Action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActionBuilder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invokeBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SimpleResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    block(request)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * The standard [[play.api.mvc.Action]] loses the MDC context.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * This action builder sets the [[ExecutionContext]] so that the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * MDC context is propagated.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * With this custom [[ExecutionContext]], the request and the correlation IDs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   * can be logged.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;executionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExecutionContext &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Execution.defaultContext
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of using of &lt;code&gt;play.api.mvc.Action&lt;&#x2F;code&gt;, we just have to use the newly defined &lt;code&gt;controllers.Action&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With each of these customizations, we are now able to use the Mapped Diagnostic Context (MDC) with asynchronous actions written in Scala.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Server side rendering for JavaScript ReactJS framework</title>
		<published>2014-03-15T00:00:00+00:00</published>
		<updated>2014-03-15T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework/" type="text/html"/>
		<id>https://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework/</id>
		<content type="html">&lt;h2 id=&quot;flicker-effect-with-javascript-applications&quot;&gt;Flicker effect with JavaScript applications&lt;&#x2F;h2&gt;
&lt;p&gt;A lot of web applications are nowadays build with a JavaScript framework, rendering the HTML in the browser (client side).
There are a few reasons for this, like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;avoiding server-browser round-trips to modify one HTML element&lt;&#x2F;li&gt;
&lt;li&gt;it is easier to keep the server side stateless if you maintain the state in the browser&lt;&#x2F;li&gt;
&lt;li&gt;the server can expose a public REST API for partners. And your own JavaScript application can use this API, encouraging &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Eating_your_own_dog_food&quot;&gt;eating our own dog food&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Building a client side JavaScript application is not always easy for teams used to server side code, and a few frameworks can help there, like &lt;a href=&quot;http:&#x2F;&#x2F;angularjs.org&#x2F;&quot;&gt;AngularJS&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;emberjs.com&#x2F;&quot;&gt;Ember&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;&quot;&gt;React&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We will look at an &lt;a href=&quot;http:&#x2F;&#x2F;play-react.herokuapp.com&#x2F;clientSide&quot;&gt;example with React&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To display the HTML, a few steps are needed:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The browser loads HTML, CSS and JavaScript.&lt;br&gt;
It displays the HTML delivered directly by the server.&lt;br&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;2014-03-15&#x2F;server.png&quot; alt=&quot;The browser shows the HTML coming from the server&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With AngularJS, if &lt;a href=&quot;http:&#x2F;&#x2F;docs.angularjs.org&#x2F;guide&#x2F;expression&quot;&gt;inline expression&lt;&#x2F;a&gt; are used, the user can see the following for a few milliseconds:&lt;br&#x2F;&gt;
hello {{firstname}}&lt;br&#x2F;&gt;
before AngularJS replaces this expression with its computed value.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The JavaScript framework manipulates the DOM and the user can then see the application.
&lt;img src=&quot;&#x2F;assets&#x2F;2014-03-15&#x2F;server_and_client.png&quot; alt=&quot;The JavaScript application has changed the DOM&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If the application needs to display some data from the server, it must first request it with Ajax. The data is displayed only after being received by the browser.
&lt;img src=&quot;&#x2F;assets&#x2F;2014-03-15&#x2F;server_and_client_and_data.png&quot; alt=&quot;The JavaScript application has received data and changed the DOM accordingly&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;(to make the &lt;a href=&quot;http:&#x2F;&#x2F;play-react.herokuapp.com&#x2F;clientSide&quot;&gt;flicker&lt;&#x2F;a&gt; more visible, I introduced a latency of 500 ms to simulate a slow backend)&lt;&#x2F;p&gt;
&lt;p&gt;The user experience is not optimal. The application flickers at each step, as the DOM is changed several times in a few seconds.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;avoiding-the-flicker-effect&quot;&gt;Avoiding the flicker effect&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;on-the-client-side&quot;&gt;On the client side&lt;&#x2F;h3&gt;
&lt;p&gt;In the browser, we can mitigate the flicker effect.
Some applications show a spinner as long as the page is not ready to be shown.
The not-yet-completed DOM is hidden before being shown in one final step.&lt;&#x2F;p&gt;
&lt;p&gt;For example, AngularJS provides the &lt;a href=&quot;http:&#x2F;&#x2F;docs.angularjs.org&#x2F;api&#x2F;ng&#x2F;directive&#x2F;ngCloak&quot;&gt;ng-cloak directive&lt;&#x2F;a&gt;.
With this directive, AngularJS can hide the HTML as long as it is not ready.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;welcome-back-to-server-side-rendering&quot;&gt;Welcome back to server side rendering&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of rendering everything in the browser, it is also possible to first render the page on the server side, serve it when ready, and when updating it on the client side when necessary.&lt;&#x2F;p&gt;
&lt;p&gt;(Please notice that this technic allows the HTML to be indexed for search engines that do not execute the JavaScript.)&lt;&#x2F;p&gt;
&lt;p&gt;From example, React can render a UI component without any browser with &lt;a href=&quot;http:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;docs&#x2F;top-level-api.html#react.rendercomponenttostring&quot;&gt;React.renderComponentToString&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With this function, the complete page can be prepared on the server side, send under this form to the browser that can directly display the ready application. On the client side, the same JavaScript code can dynamically manipulate this DOM as a normal client side application.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mhart&#x2F;react-server-example&quot;&gt;React server rendering example&lt;&#x2F;a&gt; demonstrates how to use React&#x27;s server rendering capabilities. Rendering a JavaScript application on the server side is technically possible because the JavaScript is executed by &lt;a href=&quot;http:&#x2F;&#x2F;nodejs.org&#x2F;&quot;&gt;Node.js&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;and-what-about-the-jvm&quot;&gt;And what about the JVM?&lt;&#x2F;h3&gt;
&lt;p&gt;If you are not using NodeJS, but the Java Virtual Machine (JVM), you might be disappointed at this time.
Pre-render a JavaScript application is only possible with Node.js?&lt;&#x2F;p&gt;
&lt;p&gt;In Java, there are a few projects that can save us:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apigee&#x2F;trireme&quot;&gt;trireme&lt;&#x2F;a&gt; provides a Node.js API and can run node.js scripts inside Java. It uses Rhino, the current JavaScript implementation for the JVM. (With Java 8, let&#x27;s see if trireme will use the new JavaScript implementation, Nashorn, or whether Nashorn will implement the node.js API itself.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typesafehub&#x2F;js-engine&quot;&gt;js-engine&lt;&#x2F;a&gt; provides &lt;a href=&quot;http:&#x2F;&#x2F;akka.io&#x2F;&quot;&gt;Akka Actors&lt;&#x2F;a&gt; to execute JavaScript code with trireme or with node.js&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As a proof of concept, I implemented a little play application that uses these projects to pre-render a React component on the server side.&lt;&#x2F;p&gt;
&lt;p&gt;The JavaScript is loaded:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serverside &lt;&#x2F;span&gt;&lt;span&gt;= Play.getFile(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;public&#x2F;javascripts&#x2F;serverside.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An actor is created for a JavaScript engine (trireme or node.js)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;engine &lt;&#x2F;span&gt;&lt;span&gt;= Akka.system.actorOf(jsEngine, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;engine-${&lt;&#x2F;span&gt;&lt;span&gt;request.id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We receive the data from the database:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;data &amp;lt;- initialData
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and let the JavaScript code execute with that data as parameter&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;result &amp;lt;- (engine ? Engine.ExecuteJs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;(serverside.toURI), List(data))).mapTo[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JsExecutionResult&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result is send to the browser&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Ok(views.html.index(Html(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;(result.output.toArray, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;complete controller code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; with js-engine
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;serverSideTrireme &lt;&#x2F;span&gt;&lt;span&gt;= serverSideWithJsEngine(Trireme.props())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; with node
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;serverSideNode &lt;&#x2F;span&gt;&lt;span&gt;= serverSideWithJsEngine(Node.props())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;serverSideWithJsEngine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsEngine&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Props&lt;&#x2F;span&gt;&lt;span&gt;) = Action.async { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; akka.pattern.ask
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; scala.concurrent.duration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serverside &lt;&#x2F;span&gt;&lt;span&gt;= Play.getFile(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;public&#x2F;javascripts&#x2F;serverside.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout &lt;&#x2F;span&gt;&lt;span&gt;= Timeout(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;.seconds)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;engine &lt;&#x2F;span&gt;&lt;span&gt;= Akka.system.actorOf(jsEngine, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;engine-${&lt;&#x2F;span&gt;&lt;span&gt;request.id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- initialData
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;- (engine ? Engine.ExecuteJs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;(serverside.toURI), List(data))).mapTo[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JsExecutionResult&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      Ok(views.html.index(Html(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;(result.output.toArray, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code &lt;code&gt;serverside.js&lt;&#x2F;code&gt; uses the &lt;a href=&quot;http:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;modules.html#modules_module_require_id&quot;&gt;node.js modules API&lt;&#x2F;a&gt; to render our main component (CommentBox).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;React &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;react&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CommentBox &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;CommentBox&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It then loads the data given as first parameter in the controller&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; take data from parameters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;= JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(process.argv[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It renders the CommentBox component to a String and output it to console.log so that the Scala controller can receive the result with &lt;code&gt;result.output.toArray&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;renderComponentToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;CommentBox&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;)({data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, onServerSide: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;})));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Complete code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;React &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;react&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CommentBox &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;CommentBox&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; take data from parameters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;= JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(process.argv[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backend &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loadCommentsFromServer&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;settings&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handleCommentSubmit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;settings&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;renderComponentToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;CommentBox&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;)({data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, onServerSide: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;})));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;play-react.herokuapp.com&#x2F;serverSide&quot;&gt;This page&lt;&#x2F;a&gt; does not flicker anymore compared to the &lt;a href=&quot;http:&#x2F;&#x2F;play-react.herokuapp.com&#x2F;clientSide&quot;&gt;first version&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;drawback-with-server-side-rendering&quot;&gt;Drawback with server side rendering&lt;&#x2F;h3&gt;
&lt;p&gt;The drawback with pre-rendering the page on the server side is that we have to wait to have all the data before sending the page.
In the &lt;a href=&quot;http:&#x2F;&#x2F;play-react.herokuapp.com&#x2F;serverSide&quot;&gt;sample application&lt;&#x2F;a&gt;, I introduced a latency when requesting the data to simulate a slow database.&lt;&#x2F;p&gt;
&lt;p&gt;The browser must also wait long before getting any HTML. The following diagram shows that the application (deployed on Heroku) needs more than one second to deliver the page!
&lt;img src=&quot;&#x2F;assets&#x2F;2014-03-15&#x2F;wait_for_server.png&quot; alt=&quot;The browser is waiting for the server&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-we-optimize-more&quot;&gt;Can we optimize more?&lt;&#x2F;h3&gt;
&lt;p&gt;We can optimize this version by sending the first bytes of the HTML page before having any data.
When the data is there, we can send the rest of the page.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;a href=&quot;http:&#x2F;&#x2F;play-react.herokuapp.com&#x2F;serverSideStream&quot;&gt;that variant&lt;&#x2F;a&gt;, we can include the CSS and part of the JavaScript in the &amp;lt;HEAD&amp;gt; section of the HTML page.
The browser receives this information very quickly and can begin downloading these assets.
The server lets the connection open and when the rest of the page is ready, it is send to the browser.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;2014-03-15&#x2F;browser_loads_assets.png&quot; alt=&quot;The browser can load the CSS and JavaScript&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To implement this, I used the Facebook’s BigPipe concept as presented in the &lt;a href=&quot;http:&#x2F;&#x2F;de.slideshare.net&#x2F;brikis98&#x2F;composable-and-streamable-play-apps&quot;&gt;talk “Building composable, streaming, testable Play apps” from Yevgeniy Brikman&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It is not a &amp;quot;Silver Bullet&amp;quot; as we are still waiting for the data before displaying it to the user (that makes sense).
But the browser can load the stylesheets, the JavaScripts very quickly, leading to a more responsive page.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integrate-play-and-trireme&quot;&gt;Integrate Play and trireme&lt;&#x2F;h2&gt;
&lt;p&gt;To resolve node.js modules, trireme needs to access the JavaScripts directly on the file system.
But Play Framework package all the public assets in the jar, making the JavaScript assets not available with &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.2.x&#x2F;api&#x2F;scala&#x2F;index.html#play.api.Play$&quot;&gt;Play.getFile&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It would be easier if trireme would use a &lt;a href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;7&#x2F;docs&#x2F;api&#x2F;java&#x2F;nio&#x2F;file&#x2F;FileSystem.html&quot;&gt;FileSystem&lt;&#x2F;a&gt; object, but this API is only available from Java 7.&lt;&#x2F;p&gt;
&lt;p&gt;To wordaround this, I configured the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sbt&#x2F;sbt-native-packager&quot;&gt;SBT Universal plugin&lt;&#x2F;a&gt; to deploy the public assets to the file system:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;in build.sbt:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;PublicOnFileSystem.settings
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;project&#x2F;PublicOnFileSystem.scala&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; sbt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; sbt.Keys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; play.Keys.playAssetsDirectories
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; com.typesafe.sbt.SbtNativePackager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt; PublicOnFileSystem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;Seq(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    mappings in Universal &amp;lt;++= playAssetsDirectories map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directories&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      directories.flatMap { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;directoryLen &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; dir.getCanonicalPath.length
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pathFinder &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; dir ** &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        pathFinder.get map {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publicFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            publicFile -&amp;gt; (&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;public&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; + publicFile.getCanonicalPath.substring(directoryLen))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I personaly think that we will more and more use JavaScript even on the server side.
Projects like &lt;a href=&quot;http:&#x2F;&#x2F;vertx.io&#x2F;&quot;&gt;Vert.x&lt;&#x2F;a&gt; are interesting because they support this from the beginning.
With Play Framework on the JVM, there is currently &lt;a href=&quot;http:&#x2F;&#x2F;openjdk.java.net&#x2F;projects&#x2F;nashorn&#x2F;&quot;&gt;a&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typesafehub&#x2F;webdriver&quot;&gt;lot&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typesafehub&#x2F;js-engine&quot;&gt;of&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sbt&#x2F;sbt-web&quot;&gt;effort&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;www.webjars.org&#x2F;&quot;&gt;put&lt;&#x2F;a&gt; to support that.&lt;&#x2F;p&gt;
&lt;p&gt;This proof of concept shows that it is already possible to achieve that.
And I guess it will be even easier in the future.&lt;&#x2F;p&gt;
&lt;p&gt;If you need more information, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;play-react&quot;&gt;code is available on github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>ping conf 2014</title>
		<published>2014-02-17T00:00:00+00:00</published>
		<updated>2014-02-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2014/02/17/ping-conf-2014/" type="text/html"/>
		<id>https://yanns.github.io/blog/2014/02/17/ping-conf-2014/</id>
		<content type="html">&lt;p&gt;In January, I had the pleasure to participate and give a talk at the &lt;a href=&quot;http:&#x2F;&#x2F;www.ping-conf.com&#x2F;&quot;&gt;ping conf&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ping conf was the first world wide community conference about the &lt;a href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;&quot;&gt;Play Framework!&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This conference was very well organized. I&#x27;d like to thank all the organizers one more time for this.
It was a good opportunity to meet people I only knew online from the mailing list or on twitter.&lt;&#x2F;p&gt;
&lt;p&gt;The talks were very interesting. Some notices:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;javascript-functionality-coming-to-play-2-3-from-christopher-hunt&quot;&gt;&amp;quot;Javascript functionality coming to Play 2.3&amp;quot; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;huntchr&quot;&gt;Christopher Hunt&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Typesafe take the JavaScript build chain very seriously and the new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sbt&#x2F;sbt-web&quot;&gt;sbt-web&lt;&#x2F;a&gt; offers a lot of new functionalities.
IMO, one of the most important is the possibility to use NodeJS as JavaScript engine. The performance of the JavaScript build pipeline in Play is similar or even better than the ones based on NodeJS (like Grunt or Gulp)&lt;br&#x2F;&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;huntc.github.io&#x2F;sbt-web-presentation&#x2F;#&#x2F;step-1&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;typesafing-your-blobs-with-scala-from-julien-tournay-and-pascal-voitot&quot;&gt;&amp;quot;Typesafing your blobs with Scala&amp;quot; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;skaalf&quot;&gt;Julien Tournay&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mandubian&#x2F;&quot;&gt;Pascal Voitot&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Julien and Pascal show us the new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jto&#x2F;Play20&#x2F;tree&#x2F;new_validation_api&#x2F;documentation&#x2F;manual&#x2F;scalaGuide&#x2F;main&#x2F;validation&quot;&gt;validation API&lt;&#x2F;a&gt;, unifying the Form and JSON validation.
This new API should appear in Play 2.3.&lt;br&#x2F;&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;jto.github.io&#x2F;articles&#x2F;play_new_validation_api&#x2F;&quot;&gt;More info&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;1bc4437zIO3dUD0cYoSFDbNjrSErY3soURfE5QUErbgw&#x2F;pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.g11c889a6e_23&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;writing-a-reactive-web-app-with-scala-js-and-reactjs-from-matthias-nehlsen&quot;&gt;&amp;quot;Writing a reactive web app with Scala.js and ReactJS&amp;quot; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;matthiasnehlsen&quot;&gt;Matthias Nehlsen&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Matthias, famous for his &lt;a href=&quot;http:&#x2F;&#x2F;matthiasnehlsen.com&#x2F;&quot;&gt;blog&lt;&#x2F;a&gt; and his &lt;a href=&quot;http:&#x2F;&#x2F;birdwatch.matthiasnehlsen.com&#x2F;&quot;&gt;realtime reactive tweet analysing application&lt;&#x2F;a&gt; talked about the &lt;a href=&quot;http:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;&quot;&gt;ReactJS UI library&lt;&#x2F;a&gt; combined with &lt;a href=&quot;http:&#x2F;&#x2F;www.scala-js.org&#x2F;&quot;&gt;ScalaJS&lt;&#x2F;a&gt;.
These two tools can be well combined. ReactJS like immutable data structure, that ScalaJS can provide.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;play2-and-redis-when-simplicity-meets-productivity-from-nicolas-martignole&quot;&gt;&amp;quot;Play2 and Redis : when simplicity meets productivity&amp;quot; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nmartignole&quot;&gt;Nicolas Martignole&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Nicolas talked about his experience with Redis and Play. This combination is looking very simple and performant.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;building-composable-streaming-testable-play-apps-from-yevgeniy-brikman&quot;&gt;&amp;quot;Building composable, streaming, testable Play apps&amp;quot; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;brikis98&quot;&gt;Yevgeniy Brikman&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The &amp;quot;Jim&amp;quot; from LinkedIn talked about how to compose web pages together, using the &lt;a href=&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;note.php?note_id=389414033919&quot;&gt;Facebook&#x27;s BigPipe concept&lt;&#x2F;a&gt;.
Very interesting way to decompose a web site into small web components.&lt;br&#x2F;&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;de.slideshare.net&#x2F;brikis98&#x2F;composable-and-streamable-play-apps&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;play-is-for-performance-from-james-roper-tech-lead-for-play-framework&quot;&gt;&amp;quot;Play is for Performance&amp;quot; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jroper&quot;&gt;James Roper&lt;&#x2F;a&gt;, tech lead for Play! framework&lt;&#x2F;h4&gt;
&lt;p&gt;Very interesting talk about how to optimize (or not) an asynchronous Play! application.&lt;br&#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jroper&#x2F;play-is-for-performance&quot;&gt;slides as Play! application&lt;&#x2F;a&gt; (simply check it out and start the Play! application, it is very impressive)&lt;&#x2F;p&gt;
&lt;h4 id=&quot;making-the-case-for-play-from-adam-evans-and-asher-glynn-bbc&quot;&gt;&amp;quot;Making the case for Play&amp;quot; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ajevans85&quot;&gt;Adam Evans&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;asherglynn&quot;&gt;Asher Glynn&lt;&#x2F;a&gt;, BBC&lt;&#x2F;h4&gt;
&lt;p&gt;Adam and Asher talked about pushing change within an organization like the BBC, how they introduced the Play Framework!&lt;br&#x2F;&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;pt.slideshare.net&#x2F;ajevans&#x2F;making-the-30191542&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;grant-klopper-software-engineer-at-the-guardian&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;grantklopper&quot;&gt;Grant Klopper&lt;&#x2F;a&gt;, Software engineer at The Guardian.&lt;&#x2F;h4&gt;
&lt;p&gt;Grant made a change during the talk and push it into production, very impressive.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tobias-neef&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tobnee&quot;&gt;Tobias Neef&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Tobias talk about action composition and filter in Play, when to use the first ones and when to use the others.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;async-reacting-instead-of-waiting-for-better-times-from-johan-andren&quot;&gt;&amp;quot;Async: Reacting instead of waiting for better times&amp;quot; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;apnylle&quot;&gt;Johan Andrén&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Johan talk about asynchronous programming and how it works with Play. A very good introduction!&lt;br&#x2F;&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;de.slideshare.net&#x2F;johanandren&#x2F;async-react-dont-wait-ping-conf&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr&#x2F;&gt;
&lt;p&gt;My talk was about &amp;quot;Structure your Play application with the cake pattern (and test it)&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;I talked about how to organize a Play! application written in Scala into components with the cake pattern.
The main goal of these components is to encaspulate and expose services only to others components, and to declare dependencies if needed.&lt;&#x2F;p&gt;
&lt;p&gt;As a side effect, the cake pattern allows to inject dependencies at compile time.
A particularity of this &amp;quot;dependency injection&amp;quot; mechanism is that it does not need any container like Spring or Guice at runtime.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ustream.tv&#x2F;recorded&#x2F;42775808&quot;&gt;Video of my talk &amp;quot;Structure your Play application with the cake pattern (and test it)&amp;quot;&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;de.slideshare.net&#x2F;yann_s&#x2F;play-withcake-export2&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I had great feedbacks, like these ones:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
    &lt;p&gt;Leanovate Software Engineer Yann Simon gives the best presentation on the cake pattern I’ve ever seen.&lt;&#x2F;p&gt;
    &lt;p&gt;&amp;mdash; &lt;a href=&quot;http:&amp;#x2F;&amp;#x2F;tech.gilt.com&amp;#x2F;post&amp;#x2F;74733533436&amp;#x2F;a-few-things-about-ping-a-play-framework-conference&quot;&gt;Gilt&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote&gt;
    &lt;p&gt;it was great that Yann pointed out the disadvantages as well every step along the way and made it clear how far it’s worth going in various cases.&lt;&#x2F;p&gt;
    &lt;p&gt;&amp;mdash; &lt;a href=&quot;http:&amp;#x2F;&amp;#x2F;csaba.palfi.me&amp;#x2F;ping-conf-day-1&amp;#x2F;&quot;&gt;Csaba Palfi&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote&gt;
    &lt;p&gt;Currently talking, is astounding the audience with live baking an application, slam dunk videos feat. Sulley - of Monsters fame - and hand drawn presentation slides!&lt;&#x2F;p&gt;
    &lt;p&gt;&amp;mdash; &lt;a href=&quot;http:&amp;#x2F;&amp;#x2F;pingconference.kinja.com&amp;#x2F;yann-simon-1502530900&quot;&gt;kinja&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote&gt;
    &lt;p&gt;All this was presented using funny monster videos and a French-German accent.&lt;&#x2F;p&gt;
    &lt;p&gt;&amp;mdash; &lt;a href=&quot;http:&amp;#x2F;&amp;#x2F;www.mariussoutier.com&amp;#x2F;blog&amp;#x2F;2014&amp;#x2F;01&amp;#x2F;20&amp;#x2F;ping-conference-play-edition-day-1&amp;#x2F;&quot;&gt;Marius Soutier&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;&lt;blockquote&gt;
    &lt;p&gt;the infamous Totoro-defense! &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;search?q=%23pingconf&amp;amp;src=hash&quot;&gt;#pingconf&lt;&#x2F;a&gt; &lt;img src=&quot;&#x2F;assets&#x2F;2014-02-17&#x2F;BeGeO5rIQAEYVSd.jpg&quot;&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&amp;mdash; &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;twitter.com&amp;#x2F;_serif&amp;#x2F;statuses&amp;#x2F;423793818857930752&quot;&gt;serif&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Thanks everybody!&lt;&#x2F;p&gt;
&lt;hr&#x2F;&gt;
&lt;p&gt;Some people saw that I was using my phone to controll the slideshow during the talk and asked me how I did that.
I was simply using &lt;a href=&quot;https:&#x2F;&#x2F;www.libreoffice.org&#x2F;&quot;&gt;LibreOffice Impress&lt;&#x2F;a&gt; for my slides. I controlled the slideshow with &lt;a href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=org.libreoffice.impressremote&amp;amp;hl=en&quot;&gt;Impress Remote app&lt;&#x2F;a&gt; installed on my phone.
It works very well. The app displays the duration of your talk, the current, previous and next slide.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>DevOpsDays Berlin 2013</title>
		<published>2013-05-08T00:00:00+00:00</published>
		<updated>2013-05-08T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2013/05/08/devopsdays-berlin-2013/" type="text/html"/>
		<id>https://yanns.github.io/blog/2013/05/08/devopsdays-berlin-2013/</id>
		<content type="html">&lt;p&gt;direct from DevOpsDay Berlin 2013, my notices:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.devopsdays.org&#x2F;events&#x2F;2013-berlin&#x2F;program&#x2F;&quot;&gt;Program&lt;&#x2F;a&gt;
&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;new.livestream.com&#x2F;accounts&#x2F;4051563&quot;&gt;Videos&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;day1&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yanns.github.io&#x2F;blog&#x2F;2013&#x2F;05&#x2F;08&#x2F;devopsdays-berlin-2013&#x2F;#day1&quot;&gt;Day #1&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;From the &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.devopsdays.org&#x2F;events&#x2F;2013-berlin&#x2F;proposals&#x2F;DevOps3.0&#x2F;&quot;&gt;presentation from Immobilienscout&lt;&#x2F;a&gt; - &lt;i&gt;Marcel Wolf, &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;felixsperling&quot;&gt;Felix Sperling&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;Dev AM rotation: exchange between Dev and Ops&lt;&#x2F;li&gt;
	&lt;li&gt;Self service VM&lt;&#x2F;li&gt;
	&lt;li&gt;unique configuration server, accessible to anyone&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.devopsdays.org&#x2F;events&#x2F;2013-berlin&#x2F;proposals&#x2F;DevOps3.0&#x2F;&quot;&gt;DevTools team at Etsy&lt;&#x2F;a&gt; - &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mrtazz&quot;&gt;Daniel Schauenberg&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;fr.slideshare.net&#x2F;mrtazz&#x2F;devtools-at-etsy&quot;&gt;Slides&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etsy&#x2F;deployinator&quot;&gt;deployinator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;Each new employee should deploy on her first day.&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;lxc.sourceforge.net&#x2F;&quot;&gt;LXC container&lt;&#x2F;a&gt; for tests&lt;&#x2F;li&gt;
	&lt;li&gt;Statistics with &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etsy&#x2F;statsd&#x2F;&quot;&gt;statsd&lt;&#x2F;a&gt;, &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etsy&#x2F;logster&quot;&gt;logster&lt;&#x2F;a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;graphite.wikidot.com&#x2F;&quot;&gt;graphite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;Log streamer with &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etsy&#x2F;supergrep&quot;&gt;supergrep&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;etsy&quot;&gt;Open Source projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;day2&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yanns.github.io&#x2F;blog&#x2F;2013&#x2F;05&#x2F;08&#x2F;devopsdays-berlin-2013&#x2F;#day2&quot;&gt;Day #2&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.devopsdays.org&#x2F;events&#x2F;2013-berlin&#x2F;proposals&#x2F;How%20the%20QA%20team%20got%20Prezi%20ready%20for%20DevOps&#x2F;&quot;&gt;How the QA team got Prezi ready for DevOps&lt;&#x2F;a&gt; - &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;pneumark&quot;&gt;Peter Neumark&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;prezi.com&#x2F;qmrekeeqqvyf&#x2F;how-the-qa-team-got-prezi-ready-for-devops&#x2F;&quot;&gt;presentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;Like the &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;simon_yann&#x2F;status&#x2F;339462592315682816&#x2F;photo&#x2F;1&quot;&gt;error handling&lt;&#x2F;a&gt;: &quot;When blame inevitably arises, the most senior people in the room should repeat this mantra: if a mistake happens, shame on us for making it so easy to make that mistake&quot;. Very similar to risk management culture.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.devopsdays.org&#x2F;events&#x2F;2013-berlin&#x2F;proposals&#x2F;Podularity%20FTW&#x2F;&quot;&gt;Podularity FTW!&lt;&#x2F;a&gt; - &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tlossen&quot;&gt;Tim Lossen&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;fr.slideshare.net&#x2F;tim.lossen.de&#x2F;podularity-ftw&quot;&gt;slides&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;team = autonomous cell (even technological stack, product...)&lt;&#x2F;li&gt;
	&lt;li&gt;The organization is a supercell, bindings autonomous cells together.&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;simon_yann&#x2F;status&#x2F;339461227552047104&#x2F;photo&#x2F;1&quot;&gt;Lunch roulette&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;Interesting question from the audience about the business continuity: if each team can choose its technological stack, is not it a problem then the team change, and when the new members do not know the new stack he is working with? Tim answered that it was indeed a problem the organization though of, but in practice, it never happened.&lt;br&#x2F;&gt;I like this approach that I could try to summarize like this: do not spend your time trying to avoid problems, but solve real problem that exist.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.devopsdays.org&#x2F;events&#x2F;2013-berlin&#x2F;proposals&#x2F;How%20we%20built%20and%20deployed%20the%20Honshu%20way&#x2F;&quot;&gt;Island Life: How we built and deployed the Honshū way&lt;&#x2F;a&gt; - Wes Mason&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;from one monolith app to several islands like components&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;other-notices&quot;&gt;&lt;a href=&quot;#other-notices&quot;&gt;Other notices:&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;hubot.github.com&#x2F;&quot;&gt;robot for chat room&lt;&#x2F;a&gt; to post more information&lt;&#x2F;li&gt;
	&lt;li&gt;secrets are hard to deploy in a secure way&lt;&#x2F;li&gt;
	&lt;li&gt;distributed file system: &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ceph.com&#x2F;&quot;&gt;ceph&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;more info: &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.110.4574&amp;rep=rep1&amp;type=pdf&quot;&gt;Ceph: A scalable, high-performance distributed file system (2006)&lt;&#x2F;a&gt;
&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.docker.io&#x2F;&quot;&gt;doker.io&lt;&#x2F;a&gt; to manage linux containers. The demo was impressive, deploying one version and then another one in a few minutes.&lt;&#x2F;li&gt;
	&lt;li&gt;Discussion with &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.gutefrage.net&#x2F;&quot;&gt;gutefrage.net&lt;&#x2F;a&gt; who use Scala &#x2F; &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;twitter&#x2F;finagle&quot;&gt;Finagle&lt;&#x2F;a&gt; with &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;thrift.apache.org&#x2F;&quot;&gt;Thrift&lt;&#x2F;a&gt;.&lt;br&gt;Storage of statistics with &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;opentsdb.net&#x2F;&quot;&gt;OpenTSDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;zeroturnaround.com&#x2F;software&#x2F;liverebel&#x2F;&quot;&gt;LiveRebel&lt;&#x2F;a&gt;: ZeroTurnaround made a presentation of LiveRebel&lt;br&#x2F;&gt;
LiveRebel contains some versions of the application.&lt;br&#x2F;&gt;
These versions can be uploaded, manually or automatically (maven plugin, command line tool...)&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
Then LiveRebel can deploy a specific version on production (or staging...)&lt;br&#x2F;&gt;
For this, an agent is running on each server.&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
LiveRebel can deploy to one server, check it with some configured smoke test.&lt;br&#x2F;&gt;
If the test is successful, the server is activated on the cluster, and the deployment process continues with the next server.&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;
Liquibase is used to deploy a version to a database.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Handling data streams with Play2 and Server-Send Events</title>
		<published>2012-08-12T00:00:00+00:00</published>
		<updated>2012-08-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://yanns.github.io/blog/2012/08/12/handling-data-streams-with-play2-and-server-send-events/" type="text/html"/>
		<id>https://yanns.github.io/blog/2012/08/12/handling-data-streams-with-play2-and-server-send-events/</id>
		<content type="html">&lt;h2 id=&quot;handling-data-streams&quot;&gt;Handling data streams&lt;&#x2F;h2&gt;
&lt;p&gt;As the version 2 of Play! Framework was published, I was very interested in its new capabilities to handle data streams reactively.&lt;br&#x2F;&gt;
As a technical proof of concept, I wrote a parser that works with chunks of data instead of loading the whole content in memory.
My source was a file containing the geographical coordinates of Wikipedia articles.&lt;br&#x2F;&gt;
(This file is the result of an experience of Triposo, showing how Wikipedia has spread over the planet since the start of the Wikipedia project. Do not forget to watch the other labs from Triposo, they are great!)&lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Play2 architecture is based on event, and gives us some tools to work with streams of data:&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.2.x&#x2F;Enumerators&quot;&gt;Enumerators&lt;&#x2F;a&gt; produce chunk of data&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.2.x&#x2F;Enumeratees&quot;&gt;Enumeratees&lt;&#x2F;a&gt; transform these chunks&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.2.x&#x2F;Iteratees&quot;&gt;Iteratees&lt;&#x2F;a&gt; consumes these chunks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(For more information, you can read:&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;sadache&#x2F;3072893&quot;&gt;Is socket.push(bytes) all you need to program Realtime Web apps?&lt;&#x2F;a&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Sadache&quot;&gt;Sadek Drobi, CTO Zenexity&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;greweb.me&#x2F;2012&#x2F;08&#x2F;zound-a-playframework-2-audio-streaming-experiment-using-iteratees&#x2F;&quot;&gt;Zound, a PlayFramework 2 audio streaming experiment using Iteratees&lt;&#x2F;a&gt; from &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;greweb&quot;&gt;Gaetan Renaudeau&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
	&lt;li&gt;If you understand french, you can read &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.touilleur-express.fr&#x2F;2012&#x2F;08&#x2F;05&#x2F;realtime-web-application-un-exemple-avec-play2&#x2F;&quot;&gt;Realtime Web Application, un exemple avec Play2&lt;&#x2F;a&gt; from &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nmartignole&quot;&gt;Nicolas Martignole&lt;&#x2F;a&gt;)
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The production of data is an Enumerator, sending line after line of the input file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lineEnumerator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Source&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enumerator&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] = {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lines &lt;&#x2F;span&gt;&lt;span&gt;= source.getLines()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Enumerator.fromCallback1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] ( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(lines.hasNext) {
&lt;&#x2F;span&gt;&lt;span&gt;      Some(lines.next())
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      None
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    Future.successful(line)
&lt;&#x2F;span&gt;&lt;span&gt;  }, source.close)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With an Enumeratee, each line can be possibly parsed into a Coordinate class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lineParser&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Enumeratee&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;]] = Enumeratee.map[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  line.split(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Array(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, IsDouble(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latitude&lt;&#x2F;span&gt;&lt;span&gt;), IsDouble(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;longitude&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Some(Coordinate(latitude, longitude))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Enumerator can be composed with an Enumeratee with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span&gt;= scala.io.Source.fromFile(Play.getExistingFile(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;conf&#x2F;coosbyid.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).get)
&lt;&#x2F;span&gt;&lt;span&gt;lineEnumerator(source) &amp;amp;&amp;gt; lineParser
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I know, the method&#x27;s name &amp;quot;&amp;amp;&amp;gt;&amp;quot; can make some of you go away. Please stay! This sign is like the pipe in bash. It is very easy to understand:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;lineEnumerator(source) &amp;amp;&amp;gt; lineParser
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;is the same as (removing infix notation)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;lineEnumerator(source).&amp;amp;&amp;gt;(lineParser)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which is the same as (method alias)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;lineEnumerator(source).through(lineParser)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use the last form if the first one is not your taste... :)&lt;&#x2F;p&gt;
&lt;p&gt;With a last Enumeratee to produce JSON, I can send the stream directly to the browser with Server Send Events.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span&gt;= scala.io.Source.fromFile(Play.getExistingFile(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;conf&#x2F;coosbyid.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).get)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jsonStream &lt;&#x2F;span&gt;&lt;span&gt;= lineEnumerator(source) &amp;amp;&amp;gt; lineParser &amp;amp;&amp;gt; validCoordinate &amp;amp;&amp;gt; asJson
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eventDataStream &lt;&#x2F;span&gt;&lt;span&gt;= jsonStream &amp;amp;&amp;gt; EventSource()
&lt;&#x2F;span&gt;&lt;span&gt;Ok.chunked(eventDataStream).as(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;event-stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What to notice:&lt;&#x2F;p&gt;
&lt;p&gt;Only chunks of data are in memory. The whole content of the source file is never loaded completely.&lt;&#x2F;p&gt;
&lt;p&gt;Each step of the process is isolated in an Enumertor or Enumeratee, making it very easy to modify, to re-use, to combine in a different way.&lt;&#x2F;p&gt;
&lt;p&gt;The Enumerator is reading a file, but you can imagine it could read data from a web service, of from a database.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;server-send-events&quot;&gt;Server-Send Events&lt;&#x2F;h2&gt;
&lt;p&gt;When we want to send events in &amp;quot;real time&amp;quot; to the browser, what technologies are available?&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;polling: the browser pools the server every x milliseconds to check if there is a new message. This method is not very efficient, because a lot of requests are necessary to give the illusion to update the application in real time.&lt;&#x2F;li&gt;
	&lt;li&gt;long-polling (or &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Comet_(programming)&quot;&gt;Comet&lt;&#x2F;a&gt;): the browser opens a connection to the server (for example in a iframe), and the server keeps the connection opened. When the server wants to push data to the client, it sends this data with the opened connection. The client receives the data, and opens a connection again for further messages. With this method, the browser is always showing that it is waiting for data. This technology does not scale on threaded system, as each opened connection uses a thread. In JEE environment, we need an asynchronous servlet 3.1 not to make the server exploding.&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;dev.w3.org&#x2F;html5&#x2F;eventsource&#x2F;&quot;&gt;Server-Send Events (SSE)&lt;&#x2F;a&gt; are quite similar to Comet. The main difference is that the browser manages this connection. For example, it opens the connection again if it falls.&lt;&#x2F;li&gt;
	&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;dev.w3.org&#x2F;html5&#x2F;websockets&#x2F;&quot;&gt;WebSockets&lt;&#x2F;a&gt; provide a bi-directional, full-duplex communications channels. It is a different protocol than HTTP.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I choose to use Server-Send Events instead of WebSockets because of the following reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
	&lt;li&gt;I&#x27;ve already played with WebSockets and wanted to try something new.&lt;&#x2F;li&gt;
	&lt;li&gt;WebSockets are great and can communicate in both directions. But this technology is a new protocol, sometimes difficult to integrate in an existing infrastructure (Proxy, Load-Balancer, Firewall...) Server-Send Events, on the other hand, use the HTTP protocol. The PaaS &lt;a target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.heroku.com&#x2F;&quot;&gt;Heroku&lt;&#x2F;a&gt; does not support WebSockets yet, but support SSE. When pushing data from the server to clients is all what you need, SSE can be what is the most appropriate and is &lt;a target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;caniuse.com&#x2F;#search=eventsource&quot;&gt;well supported&lt;&#x2F;a&gt; (except in IE for the moment)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;server-send-events-api&quot;&gt;Server-Send Events API&lt;&#x2F;h2&gt;
&lt;p&gt;The Javascript API is very simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feed &lt;&#x2F;span&gt;&lt;span&gt;= new EventSource(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; receive message
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feed&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;= JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.data);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do something with data
&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;visualizing-the-results&quot;&gt;Visualizing the results&lt;&#x2F;h2&gt;
&lt;p&gt;As the stream is sending coordinates, my first attempt was to display them on a earth in 3D. For this, I used three.js, which was very simple. The first results were promising, but sadly, the browser could not display so much information in 3D. I had to found an alternative.&lt;br&#x2F;&gt;
My second attempt was to display these coordinates on a 2D canvas, and that worked well, although less impressive that a 3D map... :)&lt;br&#x2F;&gt;
You can see the result on Heroku: http:&#x2F;&#x2F;wiki-growth.herokuapp.com&#x2F;&lt;br&#x2F;&gt;
The code source is available on github: https:&#x2F;&#x2F;github.com&#x2F;yanns&#x2F;play2-wiki-growth-sse&lt;br&#x2F;&gt;
You can run it by yourself with Play and let heroku sleeping.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
