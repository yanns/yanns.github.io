<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yann's Blog]]></title>
  <link href="http://yanns.github.io/atom.xml" rel="self"/>
  <link href="http://yanns.github.io/"/>
  <updated>2014-03-16T09:20:11+01:00</updated>
  <id>http://yanns.github.io/</id>
  <author>
    <name><![CDATA[Yann Simon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Server side rendering for JavaScript ReactJS framework]]></title>
    <link href="http://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework/"/>
    <updated>2014-03-15T09:44:00+01:00</updated>
    <id>http://yanns.github.io/blog/2014/03/15/server-side-rendering-for-javascript-reactjs-framework</id>
    <content type="html"><![CDATA[<h2>Flicker effect with JavaScript applications</h2>

<p>A lot of web applications are nowadays build with a JavaScript framework, rendering the HTML in the browser (client side).
There are a few reasons for this, like:</p>

<ul>
<li>avoiding server-browser round-trips to modify one HTML element</li>
<li>it is easier to keep the server side stateless if you maintain the state in the browser</li>
<li>the server can expose a public REST API for partners. And your own JavaScript application can use this API, encouraging <a href="http://en.wikipedia.org/wiki/Eating_your_own_dog_food">eating our own dog food</a></li>
</ul>


<p>Building a client side JavaScript application is not always easy for teams used to server side code, and a few frameworks can help there, like <a href="http://angularjs.org/">AngularJS</a>, <a href="http://emberjs.com/">Ember</a> or <a href="http://facebook.github.io/react/">React</a></p>

<p>We will look at an <a href="http://play-react.herokuapp.com/clientSide">example with React</a></p>

<p>To display the HTML, a few steps are needed:</p>

<ol>
<li><p>The browser loads HTML, CSS and JavaScript.<br>
It displays the HTML delivered directly by the server.<br>
 <img src="http://yanns.github.io/assets/2014-03-15/server.png" alt="The browser shows the HTML coming from the server" /></p>

<p> With AngularJS, if <a href="http://docs.angularjs.org/guide/expression">inline expression</a> are used, the user can see the following for a few milliseconds:<br/>
 hello {{firstname}}<br/>
 before AngularJS replaces this expression with its computed value.</p></li>
<li><p>The JavaScript framework manipulates the DOM and the user can then see the application.
 <img src="http://yanns.github.io/assets/2014-03-15/server_and_client.png" alt="The JavaScript application has changed the DOM" /></p></li>
<li><p>If the application needs to display some data from the server, it must first request it with Ajax. The data is displayed only after being received by the browser.
 <img src="http://yanns.github.io/assets/2014-03-15/server_and_client_and_data.png" alt="The JavaScript application has received data and changed the DOM accordingly" /></p></li>
</ol>


<p>(to make the <a href="http://play-react.herokuapp.com/clientSide">flicker</a> more visible, I introduced a latency of 500 ms to simulate a slow backend)</p>

<p>The user experience is not optimal. The application flickers at each step, as the DOM is changed several times in a few seconds.</p>

<h2>Avoiding the flicker effect</h2>

<h3>On the client side</h3>

<p>In the browser, we can mitigate the flicker effect.
Some applications show a spinner as long as the page is not ready to be shown.
The not-yet-completed DOM is hidden before being shown in one final step.</p>

<p>For example, AngularJS provides the <a href="http://docs.angularjs.org/api/ng/directive/ngCloak">ng-cloak directive</a>.
With this directive, AngularJS can hide the HTML as long as it is not ready.</p>

<h3>Welcome back to server side rendering</h3>

<p>Instead of rendering everything in the browser, it is also possible to first render the page on on the server side, serve it when ready, and when updating it on the client side when necessary.</p>

<p>(Please notice that this technic allows the HTML to be indexed for search engines that do not execute the JavaScript.)</p>

<p>From example, React can render a UI component without any browser with <a href="http://facebook.github.io/react/docs/top-level-api.html#react.rendercomponenttostring">React.renderComponentToString</a>.</p>

<p>With this function, the complete page can be prepared on the server side, send under this form to the browser that can directly display the ready application. On the client side, the same JavaScript code can dynamically manipulate this DOM as a normal client side application.</p>

<p>The <a href="https://github.com/mhart/react-server-example">React server rendering example</a> demonstrates how to use React&rsquo;s server rendering capabilities. Rendering a JavaScript application on the server side is technically possible because the JavaScript is executed by <a href="http://nodejs.org/">Node.js</a>.</p>

<h3>And what about the JVM?</h3>

<p>If you are not using NodeJS, but the Java Virtual Machine (JVM), you might be disappointed at this time.
Pre-render a JavaScript application is only possible with Node.js?</p>

<p>In Java, there are a few projects that can save us:</p>

<ul>
<li><p><a href="https://github.com/apigee/trireme">trireme</a> provides a Node.js API and can run node.js scripts inside Java. It uses Rhino, the current JavaScript implementation for the JVM. (With Java 8, let&rsquo;s see if trireme will use the new JavaScript implementation, Nashorn, or whether Nashorn will implement the node.js API itself.)</p></li>
<li><p><a href="https://github.com/typesafehub/js-engine">js-engine</a> provides <a href="http://akka.io/">Akka Actors</a> to execute JavaScript code with trireme or with node.js</p></li>
</ul>


<p>As a proof of concept, I implemented a little play application that uses these projects to pre-render a React component on the server side.</p>

<p>The JavaScript is loaded:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">serverside</span> <span class="k">=</span> <span class="nc">Play</span><span class="o">.</span><span class="n">getFile</span><span class="o">(</span><span class="s">&quot;public/javascripts/serverside.js&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>An actor is created for a JavaScript engine (trireme or node.js)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">engine</span> <span class="k">=</span> <span class="nc">Akka</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="n">jsEngine</span><span class="o">,</span> <span class="n">s</span><span class="s">&quot;engine-${request.id}&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We receive the data from the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">data</span> <span class="k">&lt;-</span> <span class="n">initialData</span>
</span></code></pre></td></tr></table></div></figure>


<p>and let the JavaScript code execute with that data as parameter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">result</span> <span class="k">&lt;-</span> <span class="o">(</span><span class="n">engine</span> <span class="o">?</span> <span class="nc">Engine</span><span class="o">.</span><span class="nc">ExecuteJs</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">serverside</span><span class="o">.</span><span class="n">toURI</span><span class="o">),</span> <span class="nc">List</span><span class="o">(</span><span class="n">data</span><span class="o">))).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">JsExecutionResult</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is send to the browser</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="nc">Html</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">toArray</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>complete controller code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="c1">// with js-engine</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">serverSideTrireme</span> <span class="k">=</span> <span class="n">serverSideWithJsEngine</span><span class="o">(</span><span class="nc">Trireme</span><span class="o">.</span><span class="n">props</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// with node</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">serverSideNode</span> <span class="k">=</span> <span class="n">serverSideWithJsEngine</span><span class="o">(</span><span class="nc">Node</span><span class="o">.</span><span class="n">props</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">serverSideWithJsEngine</span><span class="o">(</span><span class="n">jsEngine</span><span class="k">:</span> <span class="kt">Props</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span><span class="o">.</span><span class="n">async</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">akka.pattern.ask</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">serverside</span> <span class="k">=</span> <span class="nc">Play</span><span class="o">.</span><span class="n">getFile</span><span class="o">(</span><span class="s">&quot;public/javascripts/serverside.js&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mf">5.</span><span class="n">seconds</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">engine</span> <span class="k">=</span> <span class="nc">Akka</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="n">jsEngine</span><span class="o">,</span> <span class="n">s</span><span class="s">&quot;engine-${request.id}&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">data</span> <span class="k">&lt;-</span> <span class="n">initialData</span>
</span><span class='line'>      <span class="n">result</span> <span class="k">&lt;-</span> <span class="o">(</span><span class="n">engine</span> <span class="o">?</span> <span class="nc">Engine</span><span class="o">.</span><span class="nc">ExecuteJs</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">serverside</span><span class="o">.</span><span class="n">toURI</span><span class="o">),</span> <span class="nc">List</span><span class="o">(</span><span class="n">data</span><span class="o">))).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">JsExecutionResult</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="nc">Html</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="n">output</span><span class="o">.</span><span class="n">toArray</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">))))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code <code>serverside.js</code> uses the <a href="http://nodejs.org/api/modules.html#modules_module_require_id">node.js modules API</a> to render our main component (CommentBox).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./react&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">CommentBox</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./CommentBox&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It then loads the data given as first parameter in the controller</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// take data from parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It renders the CommentBox component to a String and output it to console.log so that the Scala controller can receive the result with <code>result.output.toArray</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">React</span><span class="p">.</span><span class="nx">renderComponentToString</span><span class="p">(</span><span class="nx">CommentBox</span><span class="p">(</span><span class="nx">backend</span><span class="p">)({</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">onServerSide</span><span class="o">:</span> <span class="kc">true</span><span class="p">})));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Complete code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./react&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">CommentBox</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./CommentBox&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// take data from parameters</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">backend</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">loadCommentsFromServer</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">handleCommentSubmit</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">settings</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">React</span><span class="p">.</span><span class="nx">renderComponentToString</span><span class="p">(</span><span class="nx">CommentBox</span><span class="p">(</span><span class="nx">backend</span><span class="p">)({</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">onServerSide</span><span class="o">:</span> <span class="kc">true</span><span class="p">})));</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://play-react.herokuapp.com/serverSide">This page</a> does not flicker anymore compared to the <a href="http://play-react.herokuapp.com/clientSide">first version</a>.</p>

<h3>Drawback with server side rendering</h3>

<p>The drawback with pre-rendering the page on the server side is that we have to wait to have all the data before sending the page.
In the <a href="http://play-react.herokuapp.com/serverSide">sample application</a>, I introduced a latency when requesting the data to simulate a slow database.</p>

<p>The browser must also wait long before getting any HTML. The following diagram shows that the application deployed on Heroku delivers the page in more than 1s!
<img src="http://yanns.github.io/assets/2014-03-15/wait_for_server.png" alt="The browser is waiting for the server" /></p>

<h3>Can we optimize more?</h3>

<p>We can optimize this version by sending the first bytes of the HTML page before having any data.
When the data is there, we can send the rest of the page.</p>

<p>With <a href="http://play-react.herokuapp.com/serverSideStream">that variant</a>, we can include the CSS and part of the JavaScript in the &lt;HEAD> section of the HTML page.
The browser receives this information very quickly and can begin downloading these assets.
The server lets the connection open and when the rest of the page is ready, it is send to the browser.</p>

<p><img src="http://yanns.github.io/assets/2014-03-15/browser_loads_assets.png" alt="The browser can load the CSS and JavaScript" /></p>

<p>To implement this, I used the Facebook’s BigPipe concept as presented in the <a href="http://de.slideshare.net/brikis98/composable-and-streamable-play-apps">talk “Building composable, streaming, testable Play apps” from Yevgeniy Brikman</a></p>

<p>It is not a &ldquo;Silver Bullet&rdquo; as we are still waiting for the data before displaying it to the user (that makes sense).
But the browser can load the stylesheets, the JavaScripts very quickly, leading to a more responsive page.</p>

<p>If you need more information, the <a href="https://github.com/yanns/play-react">code is available on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ping conf 2014]]></title>
    <link href="http://yanns.github.io/blog/2014/02/17/ping-conf-2014/"/>
    <updated>2014-02-17T16:49:00+01:00</updated>
    <id>http://yanns.github.io/blog/2014/02/17/ping-conf-2014</id>
    <content type="html"><![CDATA[<p>In January, I had the pleasure to participate and give a talk at the <a href="http://www.ping-conf.com/">ping conf</a>.</p>

<p>Ping conf was the first world wide community conference about the <a href="http://www.playframework.com/">Play Framework!</a>.</p>

<p>This conference was very well organized. I&rsquo;d like to thank all the organizers one more time for this.
It was a good opportunity to meet people I only knew online from the mailing list or on twitter.</p>

<p>The talks were very interesting. Some notices:</p>

<h4>&ldquo;Javascript functionality coming to Play 2.3&rdquo; from <a href="https://twitter.com/huntchr">Christopher Hunt</a></h4>

<p>Typesafe take the JavaScript build chain very seriously and the new <a href="https://github.com/sbt/sbt-web">sbt-web</a> offers a lot of new functionalities.
IMO, one of the most important is the possibility to use NodeJS as JavaScript engine. The performance of the JavaScript build pipeline in Play is similar or even better than the ones based on NodeJS (like Grunt or Gulp)<br/>
<a href="http://huntc.github.io/sbt-web-presentation/#/step-1">slides</a></p>

<h4>&ldquo;Typesafing your blobs with Scala&rdquo; from <a href="https://twitter.com/skaalf">Julien Tournay</a> and <a href="https://twitter.com/mandubian/">Pascal Voitot</a></h4>

<p>Julien and Pascal show us the new <a href="https://github.com/jto/Play20/tree/new_validation_api/documentation/manual/scalaGuide/main/validation">validation API</a>, unifying the Form and JSON validation.
This new API should appear in Play 2.3.<br/>
<a href="http://jto.github.io/articles/play_new_validation_api/">More info</a><br/>
<a href="https://docs.google.com/presentation/d/1bc4437zIO3dUD0cYoSFDbNjrSErY3soURfE5QUErbgw/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.g11c889a6e_23">slides</a></p>

<h4>&ldquo;Writing a reactive web app with Scala.js and ReactJS&rdquo; from <a href="https://twitter.com/matthiasnehlsen">Matthias Nehlsen</a></h4>

<p>Matthias, famous for his <a href="http://matthiasnehlsen.com/">blog</a> and his <a href="http://birdwatch.matthiasnehlsen.com/">realtime reactive tweet analysing application</a> talked about the <a href="http://facebook.github.io/react/">ReactJS UI library</a> combined with <a href="http://www.scala-js.org/">ScalaJS</a>.
These two tools can be well combined. ReactJS like immutable data structure, that ScalaJS can provide.</p>

<h4>&ldquo;Play2 and Redis : when simplicity meets productivity&rdquo; from <a href="https://twitter.com/nmartignole">Nicolas Martignole</a></h4>

<p>Nicolas talked about his experience with Redis and Play. This combination is looking very simple and performant.</p>

<h4>&ldquo;Building composable, streaming, testable Play apps&rdquo; from <a href="https://twitter.com/brikis98">Yevgeniy Brikman</a></h4>

<p>The &ldquo;Jim&rdquo; from LinkedIn talked about how to compose web pages together, using the <a href="https://www.facebook.com/note.php?note_id=389414033919">Facebook&rsquo;s BigPipe concept</a>.
Very interesting way to decompose a web site into small web components.<br/>
<a href="http://de.slideshare.net/brikis98/composable-and-streamable-play-apps">slides</a></p>

<h4>&ldquo;Play is for Performance&rdquo; from <a href="https://twitter.com/jroper">James Roper</a>, tech lead for Play! framework</h4>

<p>Very interesting talk about how to optimize (or not) an asynchronous Play! application.<br/>
<a href="https://github.com/jroper/play-is-for-performance">slides as Play! application</a> (simply check it out and start the Play! application, it is very impressive)</p>

<h4>&ldquo;Making the case for Play&rdquo; from <a href="https://twitter.com/ajevans85">Adam Evans</a> and <a href="https://twitter.com/asherglynn">Asher Glynn</a>, BBC</h4>

<p>Adam and Asher talked about pushing change within an organization like the BBC, how they introduced the Play Framework!<br/>
<a href="http://pt.slideshare.net/ajevans/making-the-30191542">slides</a></p>

<h4><a href="https://twitter.com/grantklopper">Grant Klopper</a>, Software engineer at The Guardian.</h4>

<p>Grant made a change during the talk and push it into production, very impressive.</p>

<h4><a href="https://twitter.com/tobnee">Tobias Neef</a></h4>

<p>Tobias talk about action composition and filter in Play, when to use the first ones and when to use the others.</p>

<h4>&ldquo;Async: Reacting instead of waiting for better times&rdquo; from <a href="https://twitter.com/apnylle">Johan Andrén</a></h4>

<p>Johan talk about asynchronous programming and how it works with Play. A very good introduction!<br/>
<a href="http://de.slideshare.net/johanandren/async-react-dont-wait-ping-conf">slides</a></p>

<hr/>


<p>My talk was about &ldquo;Structure your Play application with the cake pattern (and test it)&rdquo;</p>

<p>I talked about how to organize a Play! application written in Scala into components with the cake pattern.
The main goal of these components is to encaspulate and expose services only to others components, and to declare dependencies if needed.</p>

<p>As a side effect, the cake pattern allows to inject dependencies at compile time.
A particularity of this &ldquo;dependency injection&rdquo; mechanism is that it does not need any container like Spring or Guice at runtime.</p>

<p><a href="http://www.ping-conf.com/#yannsimon">Video of my talk &ldquo;Structure your Play application with the cake pattern (and test it)&rdquo;</a><br/>
<a href="http://de.slideshare.net/yann_s/play-withcake-export2">slides</a></p>

<p>I had great feedbacks, like these ones:<br/></p>

<blockquote><p>Leanovate Software Engineer Yann Simon gives the best presentation on the cake pattern I’ve ever seen.</p><footer><strong>Gilt,</strong> <cite><a href='http://tech.gilt.com/post/74733533436/a-few-things-about-ping-a-play-framework-conference'>tech.gilt.com/post/74733533436/&hellip;</a></cite></footer></blockquote>


<blockquote><p>it was great that Yann pointed out the disadvantages as well every step along the way and made it clear how far it’s worth going in various cases.</p><footer><strong>Csaba Palfi,</strong> <cite><a href='http://csaba.palfi.me/ping-conf-day-1/'>csaba.palfi.me/ping-conf-day-1/&hellip;</a></cite></footer></blockquote>


<blockquote><p>Currently talking, is astounding the audience with live baking an application, slam dunk videos feat. Sulley - of Monsters fame - and hand drawn presentation slides!</p><footer><strong>kinja,</strong> <cite><a href='http://pingconference.kinja.com/yann-simon-1502530900'>pingconference.kinja.com/&hellip;</a></cite></footer></blockquote>


<blockquote><p>All this was presented using funny monster videos and a French-German accent.</p><footer><strong>Marius Soutier,</strong> <cite><a href='http://www.mariussoutier.com/blog/2014/01/20/ping-conference-play-edition-day-1/'>www.mariussoutier.com/blog/2014/&hellip;</a></cite></footer></blockquote>




<blockquote class="twitter-tweet" lang="en"><p>the infamous Totoro-defense! <a href="https://twitter.com/search?q=%23pingconf&amp;src=hash">#pingconf</a> <a href="http://t.co/EnJhauj8tw">pic.twitter.com/EnJhauj8tw</a></p>&mdash; serif (@_serif) <a href="https://twitter.com/_serif/statuses/423793818857930752">January 16, 2014</a></blockquote>


<script async src="http://yanns.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Thanks everybody!</p>

<hr/>


<p>Some people saw that I was using my phone to controll the slideshow during the talk and asked me how I did that.
I was simply using <a href="https://www.libreoffice.org/">LibreOffice Impress</a> for my slides. I controlled the slideshow with <a href="https://play.google.com/store/apps/details?id=org.libreoffice.impressremote&amp;hl=en">Impress Remote app</a> installed on my phone.
It works very well. The app displays the duration of your talk, the current, previous and next slide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOpsDays Berlin 2013]]></title>
    <link href="http://yanns.github.io/blog/2013/05/08/devopsdays-berlin-2013/"/>
    <updated>2013-05-08T12:47:00+02:00</updated>
    <id>http://yanns.github.io/blog/2013/05/08/devopsdays-berlin-2013</id>
    <content type="html"><![CDATA[<p>direct from DevOpsDay Berlin 2013, my notices:</p>

<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/program/">Program</a>
<a target="_blank" href="http://new.livestream.com/accounts/4051563">Videos</a></p>

<h2 id="day1"><a href="#day1">Day #1</a></h2>


<p>From the <a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/DevOps3.0/">presentation from Immobilienscout</a> &ndash; <i>Marcel Wolf, <a target="_blank" href="https://twitter.com/felixsperling">Felix Sperling</a></i></p>

<ul>
    <li>Dev AM rotation: exchange between Dev and Ops</li>
    <li>Self service VM</li>
    <li>unique configuration server, accessible to anyone</li>
</ul>


<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/DevOps3.0/">DevTools team at Etsy</a> &ndash; <a target="_blank" href="https://twitter.com/mrtazz">Daniel Schauenberg</a></p>

<ul>
    <li><a target="_blank" href="http://fr.slideshare.net/mrtazz/devtools-at-etsy">Slides</a></li>
    <li><a target="_blank" href="https://github.com/etsy/deployinator">deployinator</a></li>
    <li>Each new employee should deploy on her first day.</li>
    <li><a target="_blank" href="http://lxc.sourceforge.net/">LXC container</a> for tests</li>
    <li>Statistics with <a target="_blank" href="https://github.com/etsy/statsd/">statsd</a>, <a target="_blank" href="https://github.com/etsy/logster">logster</a> and <a target="_blank" href="http://graphite.wikidot.com/">graphite</a></li>
    <li>Log streamer with <a target="_blank" href="https://github.com/etsy/supergrep">supergrep</a></li>
    <li><a target="_blank" href="https://github.com/etsy">Open Source projects</a></li>
</ul>




<h2 id="day2"><a href="#day2">Day #2</a></h2>


<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/How%20the%20QA%20team%20got%20Prezi%20ready%20for%20DevOps/">How the QA team got Prezi ready for DevOps</a> &ndash; <a target="_blank" href="https://twitter.com/pneumark">Peter Neumark</a></p>

<ul>
    <li><a target="_blank" href="http://prezi.com/qmrekeeqqvyf/how-the-qa-team-got-prezi-ready-for-devops/">presentation</a></li>
    <li>Like the <a target="_blank" href="https://twitter.com/simon_yann/status/339462592315682816/photo/1">error handling</a>: &#8220;When blame inevitably arises, the most senior people in the room should repeat this mantra: if a mistake happens, shame on us for making it so easy to make that mistake&#8221;. Very similar to risk management culture.</li>
</ul>


<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/Podularity%20FTW/">Podularity FTW!</a> &ndash; <a target="_blank" href="https://twitter.com/tlossen">Tim Lossen</a></p>

<ul>
    <li><a target="_blank" href="http://fr.slideshare.net/tim.lossen.de/podularity-ftw">slides</a></li>
    <li>team = autonomous cell (even technological stack, product&#8230;)</li>
    <li>The organization is a supercell, bindings autonomous cells together.</li>
    <li><a target="_blank" href="https://twitter.com/simon_yann/status/339461227552047104/photo/1">Lunch roulette</a></li>
    <li>Interesting question from the audience about the business continuity: if each team can choose its technological stack, is not it a problem then the team change, and when the new members do not know the new stack he is working with? Tim answered that it was indeed a problem the organization though of, but in practice, it never happened.<br/>I like this approach that I could try to summarize like this: do not spend your time trying to avoid problems, but solve real problem that exist.</li>
</ul>


<p><a target="_blank" href="http://www.devopsdays.org/events/2013-berlin/proposals/How%20we%20built%20and%20deployed%20the%20Honshu%20way/">Island Life: How we built and deployed the Honshū way</a> &ndash; Wes Mason</p>

<ul>
    <li>from one monolith app to several islands like components</li>
</ul>




<h2 id="other-notices"><a href="#other-notices">Other notices:</a></h2>


<ul>
    <li><a target="_blank" href="http://hubot.github.com/">robot for chat room</a> to post more information</li>
    <li>secrets are hard to deploy in a secure way</li>
    <li>distributed file system: <a target="_blank" href="http://ceph.com/">ceph</a><br/>more info: <a target="_blank" href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.110.4574&rep=rep1&type=pdf">Ceph: A scalable, high-performance distributed file system (2006)</a>
</li>
    <li><a target="_blank" href="http://www.docker.io/">doker.io</a> to manage linux containers. The demo was impressive, deploying one version and then another one in a few minutes.</li>
    <li>Discussion with <a target="_blank" href="http://www.gutefrage.net/">gutefrage.net</a> who use Scala / <a target="_blank" href="https://github.com/twitter/finagle">Finagle</a> with <a target="_blank" href="http://thrift.apache.org/">Thrift</a>.<br>Storage of statistics with <a target="_blank" href="http://opentsdb.net/">OpenTSDB</a></li>
    <li><a target="_blank" href="http://zeroturnaround.com/software/liverebel/">LiveRebel</a>: ZeroTurnaround made a presentation of LiveRebel<br/>
LiveRebel contains some versions of the application.<br/>
These versions can be uploaded, manually or automatically (maven plugin, command line tool&#8230;)<br/><br/>
Then LiveRebel can deploy a specific version on production (or staging&#8230;)<br/>
For this, an agent is running on each server.<br/><br/>
LiveRebel can deploy to one server, check it with some configured smoke test.<br/>
If the test is successful, the server is activated on the cluster, and the deployment process continues with the next server.<br/><br/>
Liquibase is used to deploy a version to a database.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[G+ or blog?]]></title>
    <link href="http://yanns.github.io/blog/2012/08/20/g-plus-or-blog/"/>
    <updated>2012-08-20T06:17:00+02:00</updated>
    <id>http://yanns.github.io/blog/2012/08/20/g-plus-or-blog</id>
    <content type="html"><![CDATA[<p>Why having opened a blog, while I regularly post on G+?</p>

<p>I like posting on G+, it fells spontaneous.</p>

<p>But I felt frustrated about the formatting possibilities on G+, especially for code.
I&rsquo;ve also opened this blog to experiment a new possibility.
It is possible that I move this blog to another platform if I am not happy with it.</p>

<p>To reduce the gap with G+, I compiled some of my posts:</p>

<ul>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/QgyUF9cXPkv">Using LESS CSS with Play! framework 2</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/RxohCRp52J5">Starting staged Play application under windows</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/LKjmmANJBNo">And starting staged Play application as linux service</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/6RUZaCxYi7V">Why using google chrome frame?</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/YvB97rnbSiG">Reverse routing in javascript with Play!</a></li>
    <li><a target="_blank" href="https://plus.google.com/u/0/108788785914419775677/posts/PpRUjgHhXzK">Finding who deleted this function with GIT</a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling data streams with Play2 and Server-Send Events]]></title>
    <link href="http://yanns.github.io/blog/2012/08/12/handling-data-streams-with-play2-and-server-send-events/"/>
    <updated>2012-08-12T09:42:00+02:00</updated>
    <id>http://yanns.github.io/blog/2012/08/12/handling-data-streams-with-play2-and-server-send-events</id>
    <content type="html"><![CDATA[<h2 id="Handling-data-streams"><a href="#Handling-data-streams">Handling data streams</a></h2>


<p>As the version 2 of Play! Framework was published, I was very interested in its new capabilities to handle data streams reactively.<br/>
As a technical proof of concept, I wrote a parser that works with chunks of data instead of loading the whole content in memory.
My source was a file containing the geographical coordinates of Wikipedia articles.<br/>
(This file is the result of an experience of Triposo, showing how Wikipedia has spread over the planet since the start of the Wikipedia project. Do not forget to watch the other labs from Triposo, they are great!)<br/></p>

<p>Play2 architecture is based on event, and gives us some tools to work with streams of data:</p>

<ul>
    <li><a target="_blank" href="http://www.playframework.com/documentation/2.2.x/Enumerators">Enumerators</a> produce chunk of data</li>
    <li><a target="_blank" href="http://www.playframework.com/documentation/2.2.x/Enumeratees">Enumeratees</a> transform these chunks</li>
    <li><a target="_blank" href="http://www.playframework.com/documentation/2.2.x/Iteratees">Iteratees</a> consumes these chunks</li>
</ul>


<p>(For more information, you can read:</p>

<ul>
    <li><a target="_blank" href="https://gist.github.com/sadache/3072893">Is socket.push(bytes) all you need to program Realtime Web apps?</a> from <a href="https://twitter.com/Sadache">Sadek Drobi, CTO Zenexity</a>.</li>
    <li><a target="_blank" href="http://greweb.me/2012/08/zound-a-playframework-2-audio-streaming-experiment-using-iteratees/">Zound, a PlayFramework 2 audio streaming experiment using Iteratees</a> from <a target="_blank" href="https://twitter.com/greweb">Gaetan Renaudeau</a></li>
    <li>If you understand french, you can read <a target="_blank" href="http://www.touilleur-express.fr/2012/08/05/realtime-web-application-un-exemple-avec-play2/">Realtime Web Application, un exemple avec Play2</a> from <a target="_blank" href="https://twitter.com/nmartignole">Nicolas Martignole</a>)
</li>
</ul>


<p>The production of data is an Enumerator, sending line after line of the input file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="k">:</span> <span class="kt">Source</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Enumerator</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">lines</span> <span class="k">=</span> <span class="n">source</span><span class="o">.</span><span class="n">getLines</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nc">Enumerator</span><span class="o">.</span><span class="n">fromCallback1</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">line</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">lines</span><span class="o">.</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Some</span><span class="o">(</span><span class="n">lines</span><span class="o">.</span><span class="n">next</span><span class="o">())</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">None</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="n">line</span><span class="o">)</span>
</span><span class='line'>  <span class="o">},</span> <span class="n">source</span><span class="o">.</span><span class="n">close</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With an Enumeratee, each line can be possibly parsed into a Coordinate class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">lineParser</span><span class="k">:</span> <span class="kt">Enumeratee</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Option</span><span class="o">[</span><span class="kt">Coordinate</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Enumeratee</span><span class="o">.</span><span class="n">map</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="o">{</span> <span class="n">line</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Array</span><span class="o">(</span><span class="k">_</span><span class="o">,</span> <span class="nc">IsDouble</span><span class="o">(</span><span class="n">latitude</span><span class="o">),</span> <span class="nc">IsDouble</span><span class="o">(</span><span class="n">longitude</span><span class="o">))</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">Coordinate</span><span class="o">(</span><span class="n">latitude</span><span class="o">,</span> <span class="n">longitude</span><span class="o">))</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Enumerator can be composed with an Enumeratee with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="nc">Play</span><span class="o">.</span><span class="n">getExistingFile</span><span class="o">(</span><span class="s">&quot;conf/coosbyid.txt&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">)</span>
</span><span class='line'><span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">)</span> <span class="o">&amp;&gt;</span> <span class="n">lineParser</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know, the method&rsquo;s name &ldquo;&amp;>&rdquo; can make some of you go away. Please stay! This sign is like the pipe in bash. It is very easy to understand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">)</span> <span class="o">&amp;&gt;</span> <span class="n">lineParser</span>
</span></code></pre></td></tr></table></div></figure>


<p>is the same as (removing infix notation)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">).&amp;&gt;(</span><span class="n">lineParser</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is the same as (method alias)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">).</span><span class="n">through</span><span class="o">(</span><span class="n">lineParser</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use the last form if the first one is not your taste&hellip; :)</p>

<p>With a last Enumeratee to produce JSON, I can send the stream directly to the browser with Server Send Events.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="nc">Play</span><span class="o">.</span><span class="n">getExistingFile</span><span class="o">(</span><span class="s">&quot;conf/coosbyid.txt&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">jsonStream</span> <span class="k">=</span> <span class="n">lineEnumerator</span><span class="o">(</span><span class="n">source</span><span class="o">)</span> <span class="o">&amp;&gt;</span> <span class="n">lineParser</span> <span class="o">&amp;&gt;</span> <span class="n">validCoordinate</span> <span class="o">&amp;&gt;</span> <span class="n">asJson</span>
</span><span class='line'><span class="k">val</span> <span class="n">eventDataStream</span> <span class="k">=</span> <span class="n">jsonStream</span> <span class="o">&amp;&gt;</span> <span class="nc">EventSource</span><span class="o">()</span>
</span><span class='line'><span class="nc">Ok</span><span class="o">.</span><span class="n">chunked</span><span class="o">(</span><span class="n">eventDataStream</span><span class="o">).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;text/event-stream&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What to notice:
Only chunks of data are in memory. The whole content of the source file is never loaded completely.
Each step of the process is isolated in an Enumertor or Enumeratee, making it very easy to modify, to re-use, to combine in a different way.
The Enumerator is reading a file, but you can imagine it could read data from a web service, of from a database.</p>

<h2 id="SSE"><a href="#SSE">Server-Send Events</a></h2>


<p>When we want to send events in &ldquo;real time&rdquo; to the browser, what technologies are available?</p>

<ul>
    <li>polling: the browser pools the server every x milliseconds to check if there is a new message. This method is not very efficient, because a lot of requests are necessary to give the illusion to update the application in real time.</li>
    <li>long-polling (or <a target="_blank" href="http://en.wikipedia.org/wiki/Comet_(programming)">Comet</a>): the browser opens a connection to the server (for example in a iframe), and the server keeps the connection opened. When the server wants to push data to the client, it sends this data with the opened connection. The client receives the data, and opens a connection again for further messages. With this method, the browser is always showing that it is waiting for data. This technology does not scale on threaded system, as each opened connection uses a thread. In JEE environment, we need an asynchronous servlet 3.1 not to make the server exploding.</li>
    <li><a target="_blank" href="http://dev.w3.org/html5/eventsource/">Server-Send Events (SSE)</a> are quite similar to Comet. The main difference is that the browser manages this connection. For example, it opens the connection again if it falls.</li>
    <li><a target="_blank" href="http://dev.w3.org/html5/websockets/">WebSockets</a> provide a bi-directional, full-duplex communications channels. It is a different protocol than HTTP.</li>
</ul>


<p>I choose to use Server-Send Events instead of WebSockets because of the following reasons:</p>

<ul>
    <li>I&#8217;ve already played with WebSockets and wanted to try something new.</li>
    <li>WebSockets are great and can communicate in both directions. But this technology is a new protocol, sometimes difficult to integrate in an existing infrastructure (Proxy, Load-Balancer, Firewall&#8230;) Server-Send Events, on the other hand, use the HTTP protocol. The PaaS <a target="_blank" href="https://www.heroku.com/">Heroku</a> does not support WebSockets yet, but support SSE. When pushing data from the server to clients is all what you need, SSE can be what is the most appropriate and is <a target="_blank" href="http://caniuse.com/#search=eventsource">well supported</a> (except in IE for the moment)</li>
</ul>




<h2 id="SSE-API"><a href="#SSE-API">Server-Send Events API</a></h2>


<p>The Javascript API is very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">feed</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s1">&#39;/stream&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// receive message</span>
</span><span class='line'><span class="nx">feed</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// do something with data</span>
</span><span class='line'><span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<h2 id="Visualizing-results"><a href="#Visualizing-results">Visualizing the results</a></h2>


<p>As the stream is sending coordinates, my first attempt was to display them on a earth in 3D. For this, I used three.js, which was very simple. The first results were promising, but sadly, the browser could not display so much information in 3D. I had to found an alternative.<br/>
My second attempt was to display these coordinates on a 2D canvas, and that worked well, although less impressive that a 3D map&hellip; :)<br/>
You can see the result on Heroku: <a href="http://wiki-growth.herokuapp.com/">http://wiki-growth.herokuapp.com/</a><br/>
The code source is available on github: <a href="https://github.com/yanns/play2-wiki-growth-sse">https://github.com/yanns/play2-wiki-growth-sse</a><br/>
You can run it by yourself with Play and let heroku sleeping.</p>
]]></content>
  </entry>
  
</feed>
